{
  "info": {
    "_postman_id": "503b80a7-dd73-4ed0-8aa6-5eaaa06f9ea5",
    "name": "Public API Tests Collection",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "updatedAt": "2023-04-06T16:42:38.000Z",
    "uid": "24163049-503b80a7-dd73-4ed0-8aa6-5eaaa06f9ea5"
  },
  "item": [
    {
      "name": "Transactions",
      "item": [
        {
          "name": "200 Response",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5493f52e-37bd-40cc-8bcd-86aca6541429",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "",
                  "pm.test(\"Test transactionId is Same\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var inputJson = JSON.parse(pm.request.body.raw)",
                  "    const inputTransactionId = inputJson.transactionId",
                  "    pm.expect(jsonData.transactionId).eq(inputTransactionId)",
                  "});",
                  "",
                  "pm.test(\"Have executed Rules\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"executedRules\");",
                  "});",
                  "",
                  "pm.test(\"Have hitRules Rules\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"hitRules\")",
                  "});",
                  "",
                  "pm.test(\"Have atleast one executedRules\", function () {",
                  "    var jsonData = pm.response.json()",
                  "    const executedRules = jsonData.executedRules.length > 0",
                  "    pm.expect(executedRules).eq(true)",
                  "})"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "79cf4c20-1b65-40e6-a97a-2091b078d496",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"{{transactionId}}\",\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": {{timestamp}},\n  \"originAmountDetails\": {\n    \"country\": \"IN\",\n    \"transactionAmount\": 100044440,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": 10033.34,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"GENERIC_BANK_ACCOUNT\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "24163049-79cf4c20-1b65-40e6-a97a-2091b078d496"
        },
        {
          "name": "No Api Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4eb48a0b-b251-4575-b314-4fa1e0efa551",
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Should Give Unauthorized\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Unauthorized\");",
                  "});",
                  "",
                  "pm.test(\"Content-Type is present\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\");",
                  "});",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "55f3420c-0450-4b9c-9973-63c6ebe98757",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"{{transactionId}}\",\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": {{timestamp}},\n  \"originAmountDetails\": {\n    \"country\": \"IN\",\n    \"transactionAmount\": 100044440,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": 10033.34,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"GENERIC_BANK_ACCOUNT\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "24163049-55f3420c-0450-4b9c-9973-63c6ebe98757"
        },
        {
          "name": "Incorrect Domain",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8541af14-c7e4-4096-aa9e-d392b0f1f6ea",
                "exec": [
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test(\"Your test name\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "b6a56512-bc67-4697-80aa-319f22aaae6a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"{{transactionId}}\",\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": {{timestamp}},\n  \"originAmountDetails\": {\n    \"country\": \"IN\",\n    \"transactionAmount\": 100044440,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": 10033.34,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"GENERIC_BANK_ACCOUNT\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{incorrectDomain}}/transactions",
              "host": ["{{incorrectDomain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "24163049-b6a56512-bc67-4697-80aa-319f22aaae6a"
        },
        {
          "name": "Incorrect API Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "46863b08-add7-420a-88fd-8647507f2cb2",
                "exec": [
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test(\"Your test name\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.Message).to.eql(\"User is not authorized to access this resource with an explicit deny\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "9da866b3-e5cf-4fbb-a660-cc12369164bb",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}1"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"{{transactionId}}\",\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": {{timestamp}},\n  \"originAmountDetails\": {\n    \"country\": \"IN\",\n    \"transactionAmount\": 100044440,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": 10033.34,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"GENERIC_BANK_ACCOUNT\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "24163049-9da866b3-e5cf-4fbb-a660-cc12369164bb"
        },
        {
          "name": "No Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d3c29c61-4681-43ea-8368-ad0267114a6a",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Invalid Request Body Test\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"timestamp\\\",\\\"transactionId\\\"])]\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "2ec6314f-635f-4bf5-8cf9-6797887ef8ed",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "24163049-2ec6314f-635f-4bf5-8cf9-6797887ef8ed"
        },
        {
          "name": "Transaction Id not Given",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b6fe03e0-63fc-4bee-b091-5059b8cb3677",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Invalid Request Body Test\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"transactionId\\\"])]\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "c4556296-baf7-4237-bdc0-14ee1ae4b37c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": {{timestamp}},\n  \"originAmountDetails\": {\n    \"country\": \"IN\",\n    \"transactionAmount\": 100044440,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": 10033.34,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"GENERIC_BANK_ACCOUNT\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "24163049-c4556296-baf7-4237-bdc0-14ee1ae4b37c"
        },
        {
          "name": "Incorrect Type Provided in Transaction Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9c2f9983-9330-41cc-a724-05cb70a95370",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Invalid Request Body Test\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance type (boolean) does not match any allowed primitive type (allowed: [\\\"string\\\"])]\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "06de28da-9558-434d-b4e0-1dd3e2f8ac72",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": true,\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": {{timestamp}},\n  \"originAmountDetails\": {\n    \"country\": \"IN\",\n    \"transactionAmount\": 100044440,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": 10033.34,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"GENERIC_BANK_ACCOUNT\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "24163049-06de28da-9558-434d-b4e0-1dd3e2f8ac72"
        },
        {
          "name": "Incorrect Timestamp",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5b38f334-95fb-41ee-8045-5a9ed4bad4d4",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Invalid Request Body Test\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[numeric instance is lower than the required minimum (minimum: 1262300400000, found: 1)]\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "94ec0f6c-5155-4764-8d77-0a960d73c33b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"{{transactionId}}\",\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": 1,\n  \"originAmountDetails\": {\n    \"country\": \"IN\",\n    \"transactionAmount\": 100044440,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": 10033.34,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"GENERIC_BANK_ACCOUNT\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "24163049-94ec0f6c-5155-4764-8d77-0a960d73c33b"
        },
        {
          "name": "Duplicate Transaction Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "54f3f499-1040-479c-8130-836d759e251c",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Test transactionId is Same\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var inputJson = JSON.parse(pm.request.body.raw)",
                  "    const inputTransactionId = inputJson.transactionId",
                  "    pm.expect(jsonData.transactionId).eq(inputTransactionId)",
                  "});",
                  "",
                  "pm.test(\"Test Message of Same transaction Id\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"The provided transactionId already exists. No rules were run. If you want to update the attributes of this transaction, please use transaction events instead.\");",
                  "});",
                  "",
                  "pm.test(\"Have executed Rules\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"executedRules\");",
                  "});",
                  "",
                  "pm.test(\"Have hitRules Rules\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"hitRules\")",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "ea5b4126-d74f-4e9d-9397-355d38b5c3df",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"{{transactionId}}\",\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": {{timestamp}},\n  \"originAmountDetails\": {\n    \"country\": \"IN\",\n    \"transactionAmount\": 100044440,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": 10033.34,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"GENERIC_BANK_ACCOUNT\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "24163049-ea5b4126-d74f-4e9d-9397-355d38b5c3df"
        },
        {
          "name": "Invalid Method",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c2442a1f-faf8-490a-9c84-a32643bfbb8e",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Invalid Request Body Test\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance failed to match exactly one schema (matched 0 out of 9)]\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "bc38c401-f80a-4bca-938d-fc0aff8197fd",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"{{transactionId}}\",\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": {{timestamp}},\n  \"originAmountDetails\": {\n    \"country\": \"IN\",\n    \"transactionAmount\": 100044440,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": 10033.34,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"AMAN\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "24163049-bc38c401-f80a-4bca-938d-fc0aff8197fd"
        },
        {
          "name": "Invalid Country Code Given",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e57be525-5260-4d9c-90c3-6b7a1f2dad95",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Invalid Request Body Test\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance value (\\\"AB\\\") not found in enum (possible values: [\\\"AF\\\",\\\"AL\\\",\\\"DZ\\\",\\\"AS\\\",\\\"AD\\\",\\\"AO\\\",\\\"AI\\\",\\\"AQ\\\",\\\"AG\\\",\\\"AR\\\",\\\"AM\\\",\\\"AW\\\",\\\"AU\\\",\\\"AT\\\",\\\"AZ\\\",\\\"BS\\\",\\\"BH\\\",\\\"BD\\\",\\\"BB\\\",\\\"BY\\\",\\\"BE\\\",\\\"BZ\\\",\\\"BJ\\\",\\\"BM\\\",\\\"BT\\\",\\\"BO\\\",\\\"BQ\\\",\\\"BA\\\",\\\"BW\\\",\\\"BV\\\",\\\"BR\\\",\\\"IO\\\",\\\"BN\\\",\\\"BG\\\",\\\"BF\\\",\\\"BI\\\",\\\"CV\\\",\\\"KH\\\",\\\"CM\\\",\\\"CA\\\",\\\"KY\\\",\\\"CF\\\",\\\"TD\\\",\\\"CL\\\",\\\"CN\\\",\\\"CX\\\",\\\"CC\\\",\\\"CO\\\",\\\"KM\\\",\\\"CD\\\",\\\"CG\\\",\\\"CK\\\",\\\"CR\\\",\\\"HR\\\",\\\"CU\\\",\\\"CW\\\",\\\"CY\\\",\\\"CZ\\\",\\\"CI\\\",\\\"DK\\\",\\\"DJ\\\",\\\"DM\\\",\\\"DO\\\",\\\"EC\\\",\\\"EG\\\",\\\"SV\\\",\\\"GQ\\\",\\\"ER\\\",\\\"EE\\\",\\\"SZ\\\",\\\"ET\\\",\\\"FK\\\",\\\"FO\\\",\\\"FJ\\\",\\\"FI\\\",\\\"FR\\\",\\\"GF\\\",\\\"PF\\\",\\\"TF\\\",\\\"GA\\\",\\\"GM\\\",\\\"GE\\\",\\\"DE\\\",\\\"GH\\\",\\\"GI\\\",\\\"GR\\\",\\\"GL\\\",\\\"GD\\\",\\\"GP\\\",\\\"GU\\\",\\\"GT\\\",\\\"GG\\\",\\\"GN\\\",\\\"GW\\\",\\\"GY\\\",\\\"HT\\\",\\\"HM\\\",\\\"VA\\\",\\\"HN\\\",\\\"HK\\\",\\\"HU\\\",\\\"IS\\\",\\\"IN\\\",\\\"ID\\\",\\\"IR\\\",\\\"IQ\\\",\\\"IE\\\",\\\"IM\\\",\\\"IL\\\",\\\"IT\\\",\\\"JM\\\",\\\"JP\\\",\\\"JE\\\",\\\"JO\\\",\\\"KZ\\\",\\\"KE\\\",\\\"KI\\\",\\\"KP\\\",\\\"KR\\\",\\\"KW\\\",\\\"KG\\\",\\\"LA\\\",\\\"LV\\\",\\\"LB\\\",\\\"LS\\\",\\\"LR\\\",\\\"LY\\\",\\\"LI\\\",\\\"LT\\\",\\\"LU\\\",\\\"MO\\\",\\\"MG\\\",\\\"MW\\\",\\\"MY\\\",\\\"MV\\\",\\\"ML\\\",\\\"MT\\\",\\\"MH\\\",\\\"MQ\\\",\\\"MR\\\",\\\"MU\\\",\\\"YT\\\",\\\"MX\\\",\\\"FM\\\",\\\"MD\\\",\\\"MC\\\",\\\"MN\\\",\\\"ME\\\",\\\"MS\\\",\\\"MA\\\",\\\"MZ\\\",\\\"MM\\\",\\\"NA\\\",\\\"NR\\\",\\\"NP\\\",\\\"NL\\\",\\\"NC\\\",\\\"NZ\\\",\\\"NI\\\",\\\"NE\\\",\\\"NG\\\",\\\"NU\\\",\\\"NF\\\",\\\"MK\\\",\\\"MP\\\",\\\"NO\\\",\\\"OM\\\",\\\"PK\\\",\\\"PW\\\",\\\"PS\\\",\\\"PA\\\",\\\"PG\\\",\\\"PY\\\",\\\"PE\\\",\\\"PH\\\",\\\"PN\\\",\\\"PL\\\",\\\"PT\\\",\\\"PR\\\",\\\"QA\\\",\\\"RO\\\",\\\"RU\\\",\\\"RW\\\",\\\"RE\\\",\\\"BL\\\",\\\"SH\\\",\\\"KN\\\",\\\"LC\\\",\\\"MF\\\",\\\"PM\\\",\\\"VC\\\",\\\"WS\\\",\\\"SM\\\",\\\"ST\\\",\\\"SA\\\",\\\"SN\\\",\\\"RS\\\",\\\"SC\\\",\\\"SL\\\",\\\"SG\\\",\\\"SX\\\",\\\"SK\\\",\\\"SI\\\",\\\"SB\\\",\\\"SO\\\",\\\"ZA\\\",\\\"GS\\\",\\\"SS\\\",\\\"ES\\\",\\\"LK\\\",\\\"SD\\\",\\\"SR\\\",\\\"SJ\\\",\\\"SE\\\",\\\"CH\\\",\\\"SY\\\",\\\"TW\\\",\\\"TJ\\\",\\\"TZ\\\",\\\"TH\\\",\\\"TL\\\",\\\"TG\\\",\\\"TK\\\",\\\"TO\\\",\\\"TT\\\",\\\"TN\\\",\\\"TM\\\",\\\"TC\\\",\\\"TV\\\",\\\"TR\\\",\\\"UG\\\",\\\"UA\\\",\\\"AE\\\",\\\"GB\\\",\\\"UM\\\",\\\"US\\\",\\\"UY\\\",\\\"UZ\\\",\\\"VU\\\",\\\"VE\\\",\\\"VN\\\",\\\"VG\\\",\\\"VI\\\",\\\"WF\\\",\\\"EH\\\",\\\"YE\\\",\\\"ZM\\\",\\\"ZW\\\",\\\"AX\\\",\\\"N/A\\\"])]\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "0dec913d-6c23-4931-b0b1-75c6dd322afd",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"{{transactionId}}\",\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": {{timestamp}},\n  \"originAmountDetails\": {\n    \"country\": \"AB\",\n    \"transactionAmount\": 100044440,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": 10033.34,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"GENERIC_BANK_ACCOUNT\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "24163049-0dec913d-6c23-4931-b0b1-75c6dd322afd"
        },
        {
          "name": "Only Transaction Id and Timestamp Given",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c02622f4-6b05-4e97-aced-d2ad4661bd64",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "",
                  "pm.test(\"Test transactionId is Same\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var inputJson = JSON.parse(pm.request.body.raw)",
                  "    const inputTransactionId = inputJson.transactionId",
                  "    pm.expect(jsonData.transactionId).eq(inputTransactionId)",
                  "});",
                  "",
                  "pm.test(\"Have executed Rules\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"executedRules\");",
                  "});",
                  "",
                  "pm.test(\"Have hitRules Rules\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"hitRules\")",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "d85b6016-5130-4479-ac20-d31394a288e0",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"{{transactionId}}-12\",\n  \"timestamp\": {{timestamp}}\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "24163049-d85b6016-5130-4479-ac20-d31394a288e0"
        },
        {
          "name": "Amount Provided as String",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f00f1b66-462d-4740-8571-4de6a980f27d",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Invalid Request Body Test\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance type (string) does not match any allowed primitive type (allowed: [\\\"integer\\\",\\\"number\\\"])]\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "0aa76e64-8c85-4260-9b5d-ede674406d09",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"{{transactionId}}\",\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": {{timestamp}},\n  \"originAmountDetails\": {\n    \"country\": \"IN\",\n    \"transactionAmount\": \"100044440\",\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": \"10033.34\",\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"GENERIC_BANK_ACCOUNT\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "24163049-0aa76e64-8c85-4260-9b5d-ede674406d09"
        }
      ],
      "id": "4d1b842a-c27f-427d-b7af-e09ebc923e55",
      "uid": "24163049-4d1b842a-c27f-427d-b7af-e09ebc923e55"
    },
    {
      "name": "Consumer Users",
      "item": [
        {
          "name": "Create Consumer User 200",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Your test name\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var inputJson = JSON.parse(pm.request.body.raw)",
                  "    const userId = inputJson.userId",
                  "    ",
                  "    pm.expect(jsonData.userId).to.eql(userId);",
                  "});",
                  "",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"userId\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "5019659e-695d-4ff0-ad85-ef999a07a01f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"CONSUMER\",\n    \"createdTimestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}\",\n    \"reasonForAccountOpening\": [\n        \"Payment\",\n        \"Deposits\"\n    ],\n    \"userDetails\": {\n        \"name\": {\n            \"firstName\": \"Post Man\",\n            \"lastName\": \"Dugar\"\n        },\n        \"dateOfBirth\": \"2007-01-15\",\n        \"countryOfResidence\": \"US\",\n        \"countryOfNationality\": \"RU\"\n    },\n    \"legalDocuments\": [\n        {\n            \"documentType\": \"passport\",\n            \"documentNumber\": \"CB33GME6\",\n            \"documentIssuedDate\": 1639939034,\n            \"documentExpirationDate\": 1839939034,\n            \"documentIssuedCountry\": \"US\"\n        }\n    ],\n    \"tags\": [\n        {\n            \"key\": \"hello\",\n            \"value\": \"wallet\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/consumer/users",
              "host": ["{{domain}}"],
              "path": ["consumer", "users"]
            }
          },
          "response": [],
          "uid": "24163049-5019659e-695d-4ff0-ad85-ef999a07a01f"
        },
        {
          "name": "Duplicate User Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Check UserId\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var inputJson = JSON.parse(pm.request.body.raw)",
                  "    const userId = inputJson.userId",
                  "    ",
                  "    pm.expect(jsonData.userId).to.eql(userId);",
                  "});",
                  "",
                  "pm.test(\"Check Message in Duplicate UserId\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"The provided userId already exists. The user attribute updates are not saved. If you want to update the attributes of this user, please use user events instead.\");",
                  "});",
                  "",
                  "",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"userId\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "29d3f46a-99ee-42b7-aea3-ec19739d29d7",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"CONSUMER\",\n    \"createdTimestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}\",\n    \"reasonForAccountOpening\": [\n        \"Payment\",\n        \"Deposits\"\n    ],\n    \"userDetails\": {\n        \"name\": {\n            \"firstName\": \"Post Man\",\n            \"lastName\": \"Dugar\"\n        },\n        \"dateOfBirth\": \"2007-01-15\",\n        \"countryOfResidence\": \"US\",\n        \"countryOfNationality\": \"RU\"\n    },\n    \"legalDocuments\": [\n        {\n            \"documentType\": \"passport\",\n            \"documentNumber\": \"CB33GME6\",\n            \"documentIssuedDate\": 1639939034,\n            \"documentExpirationDate\": 1839939034,\n            \"documentIssuedCountry\": \"US\"\n        }\n    ],\n    \"tags\": [\n        {\n            \"key\": \"hello\",\n            \"value\": \"wallet\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/consumer/users",
              "host": ["{{domain}}"],
              "path": ["consumer", "users"]
            }
          },
          "response": [],
          "uid": "24163049-29d3f46a-99ee-42b7-aea3-ec19739d29d7"
        },
        {
          "name": "Incorrect Type in First Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance type (boolean) does not match any allowed primitive type (allowed: [\\\"string\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "70eef699-56d0-4f1a-bfe4-00a52f0bb1d3",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"CONSUMER\",\n    \"createdTimestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}-2\",\n    \"reasonForAccountOpening\": [\n        \"Payment\",\n        \"Deposits\"\n    ],\n    \"userDetails\": {\n        \"name\": {\n            \"firstName\": true,\n            \"lastName\": \"Dugar\"\n        },\n        \"dateOfBirth\": \"2007-01-15\",\n        \"countryOfResidence\": \"US\",\n        \"countryOfNationality\": \"RU\"\n    },\n    \"legalDocuments\": [\n        {\n            \"documentType\": \"passport\",\n            \"documentNumber\": \"CB33GME6\",\n            \"documentIssuedDate\": 1639939034,\n            \"documentExpirationDate\": 1839939034,\n            \"documentIssuedCountry\": \"US\"\n        }\n    ],\n    \"tags\": [\n        {\n            \"key\": \"hello\",\n            \"value\": \"wallet\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/consumer/users",
              "host": ["{{domain}}"],
              "path": ["consumer", "users"]
            }
          },
          "response": [],
          "uid": "24163049-70eef699-56d0-4f1a-bfe4-00a52f0bb1d3"
        },
        {
          "name": "First Name Not Provided",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"firstName\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "1bdf4796-1ebe-4202-863b-c8e064b5d7a7",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"CONSUMER\",\n    \"createdTimestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}\",\n    \"reasonForAccountOpening\": [\n        \"Payment\",\n        \"Deposits\"\n    ],\n    \"userDetails\": {\n        \"name\": {\n            \"lastName\": \"Test\"\n        },\n        \"dateOfBirth\": \"2007-01-15\",\n        \"countryOfResidence\": \"US\",\n        \"countryOfNationality\": \"RU\"\n    },\n    \"legalDocuments\": [\n        {\n            \"documentType\": \"passport\",\n            \"documentNumber\": \"CB33GME6\",\n            \"documentIssuedDate\": 1639939034,\n            \"documentExpirationDate\": 1839939034,\n            \"documentIssuedCountry\": \"US\"\n        }\n    ],\n    \"tags\": [\n        {\n            \"key\": \"hello\",\n            \"value\": \"test\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/consumer/users",
              "host": ["{{domain}}"],
              "path": ["consumer", "users"]
            }
          },
          "response": [],
          "uid": "24163049-1bdf4796-1ebe-4202-863b-c8e064b5d7a7"
        },
        {
          "name": "Value not Provided in Tags",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"value\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "a9b7e9ee-07f2-47d0-8765-78a239f20a63",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"CONSUMER\",\n    \"createdTimestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}\",\n    \"reasonForAccountOpening\": [\n        \"Payment\",\n        \"Deposits\"\n    ],\n    \"userDetails\": {\n        \"name\": {\n            \"firstName\": \"Post man\",\n            \"lastName\": \"Test\"\n        },\n        \"dateOfBirth\": \"2007-01-15\",\n        \"countryOfResidence\": \"US\",\n        \"countryOfNationality\": \"RU\"\n    },\n    \"legalDocuments\": [\n        {\n            \"documentType\": \"passport\",\n            \"documentNumber\": \"CB33GME6\",\n            \"documentIssuedDate\": 1639939034,\n            \"documentExpirationDate\": 1839939034,\n            \"documentIssuedCountry\": \"US\"\n        }\n    ],\n    \"tags\": [\n        {\n            \"key\": \"hello\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/consumer/users",
              "host": ["{{domain}}"],
              "path": ["consumer", "users"]
            }
          },
          "response": [],
          "uid": "24163049-a9b7e9ee-07f2-47d0-8765-78a239f20a63"
        },
        {
          "name": "User Id not givern",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"userId\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "f8d88c23-64c8-4390-92ca-e046766a43dc",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"CONSUMER\",\n    \"createdTimestamp\": {{timestamp}},\n    \"reasonForAccountOpening\": [\n        \"Payment\",\n        \"Deposits\"\n    ],\n    \"userDetails\": {\n        \"name\": {\n            \"firstName\": \"Post Man\",\n            \"lastName\": \"Test\"\n        },\n        \"dateOfBirth\": \"2007-01-15\",\n        \"countryOfResidence\": \"US\",\n        \"countryOfNationality\": \"RU\"\n    },\n    \"legalDocuments\": [\n        {\n            \"documentType\": \"passport\",\n            \"documentNumber\": \"CB33GME6\",\n            \"documentIssuedDate\": 1639939034,\n            \"documentExpirationDate\": 1839939034,\n            \"documentIssuedCountry\": \"US\"\n        }\n    ],\n    \"tags\": [\n        {\n            \"key\": \"hello\",\n            \"value\": \"wallet\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/consumer/users",
              "host": ["{{domain}}"],
              "path": ["consumer", "users"]
            }
          },
          "response": [],
          "uid": "24163049-f8d88c23-64c8-4390-92ca-e046766a43dc"
        },
        {
          "name": "No Api Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Unauthorized\");",
                  "});",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "c587528e-708e-4e28-b82e-603870a3666b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"CONSUMER\",\n    \"createdTimestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}\",\n    \"reasonForAccountOpening\": [\n        \"Payment\",\n        \"Deposits\"\n    ],\n    \"userDetails\": {\n        \"name\": {\n            \"firstName\": \"Post Man\",\n            \"lastName\": \"Test\"\n        },\n        \"dateOfBirth\": \"2007-01-15\",\n        \"countryOfResidence\": \"US\",\n        \"countryOfNationality\": \"RU\"\n    },\n    \"legalDocuments\": [\n        {\n            \"documentType\": \"passport\",\n            \"documentNumber\": \"CB33GME6\",\n            \"documentIssuedDate\": 1639939034,\n            \"documentExpirationDate\": 1839939034,\n            \"documentIssuedCountry\": \"US\"\n        }\n    ],\n    \"tags\": [\n        {\n            \"key\": \"hello\",\n            \"value\": \"wallet\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/consumer/users",
              "host": ["{{domain}}"],
              "path": ["consumer", "users"]
            }
          },
          "response": [],
          "uid": "24163049-c587528e-708e-4e28-b82e-603870a3666b"
        },
        {
          "name": "Incorrect-Domain",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "",
                  "pm.test(\"Matches Key\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Matches Text\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "c09bba7c-068f-431e-b7fb-d2e53bdff618",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"CONSUMER\",\n    \"createdTimestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}\",\n    \"reasonForAccountOpening\": [\n        \"Payment\",\n        \"Deposits\"\n    ],\n    \"userDetails\": {\n        \"name\": {\n            \"firstName\": \"Post Man\",\n            \"lastName\": \"Test\"\n        },\n        \"dateOfBirth\": \"2007-01-15\",\n        \"countryOfResidence\": \"US\",\n        \"countryOfNationality\": \"RU\"\n    },\n    \"legalDocuments\": [\n        {\n            \"documentType\": \"passport\",\n            \"documentNumber\": \"CB33GME6\",\n            \"documentIssuedDate\": 1639939034,\n            \"documentExpirationDate\": 1839939034,\n            \"documentIssuedCountry\": \"US\"\n        }\n    ],\n    \"tags\": [\n        {\n            \"key\": \"hello\",\n            \"value\": \"wallet\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{incorrectDomain}}/consumer/users",
              "host": ["{{incorrectDomain}}"],
              "path": ["consumer", "users"]
            }
          },
          "response": [],
          "uid": "24163049-c09bba7c-068f-431e-b7fb-d2e53bdff618"
        },
        {
          "name": "No Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[Unknown error parsing request body]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "86c52ad2-7288-4d8f-9314-dada2a6dc286",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{domain}}/consumer/users",
              "host": ["{{domain}}"],
              "path": ["consumer", "users"]
            }
          },
          "response": [],
          "uid": "24163049-86c52ad2-7288-4d8f-9314-dada2a6dc286"
        },
        {
          "name": "Empty Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"createdTimestamp\\\",\\\"userId\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "482986ad-46b3-4345-9542-dfcaf03dd65c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{domain}}/consumer/users",
              "host": ["{{domain}}"],
              "path": ["consumer", "users"]
            }
          },
          "response": [],
          "uid": "24163049-482986ad-46b3-4345-9542-dfcaf03dd65c"
        }
      ],
      "id": "bbd47037-d9fb-4727-be02-43a93facffcf",
      "uid": "24163049-bbd47037-d9fb-4727-be02-43a93facffcf"
    },
    {
      "name": "Business Users",
      "item": [
        {
          "name": "Create Business User 200",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Match Business Name\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    const data = JSON.parse(pm.request.body.raw)",
                  "    const businessUserId = data.userId",
                  "    pm.expect(jsonData.userId).to.eql(businessUserId)",
                  "});",
                  "",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"userId\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "ceeaafd1-98c3-4112-928d-9d7b949b3815",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{businessUserId}}\",\n  \"createdTimestamp\": {{timestamp}},\n  \"legalEntity\": {\n    \"companyGeneralDetails\": {\n      \"legalName\": \"Jameson Breweries\",\n      \"businessIndustry\": [\n        \"Alcohol\", \"Scotch\"\n      ]\n    },\n    \"companyFinancialDetails\": {\n      \"expectedTransactionAmountPerMonth\": {\n        \"amountValue\": 5160000,\n        \"amountCurrency\": \"GBP\"\n      },\n      \"expectedTurnoverPerMonth\": {\n        \"amountValue\": 30000090,\n        \"amountCurrency\": \"GBP\"\n      },\n      \"tags\": [\n        {\n          \"key\": \"averageNumberOfPaymentsPerMonth\",\n          \"value\": \"90\"\n        }\n      ]\n    },\n    \"companyRegistrationDetails\": {\n      \"registrationIdentifier\": \"IN22313\",\n      \"registrationCountry\": \"DK\",\n      \"dateOfRegistration\": \"2022-01-01\",\n      \"taxIdentifier\": \"BDH3N221E\",\n      \"legalEntityType\": \"Pvt Ltd\"\n    },\n    \"contactDetails\": {\n      \"websites\": [\n        \"jamieson.com\"\n      ]\n    }\n  },\n  \"allowedPaymentMethods\": [\n    \"GENERIC_BANK_ACCOUNT\", \"WALLET\", \"CARD\", \"ACH\"\n  ]\n}"
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "24163049-ceeaafd1-98c3-4112-928d-9d7b949b3815"
        },
        {
          "name": "Duplicate Business",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Check UserId\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var inputJson = JSON.parse(pm.request.body.raw)",
                  "    const userId = inputJson.userId",
                  "    ",
                  "    pm.expect(jsonData.userId).to.eql(userId);",
                  "});",
                  "",
                  "pm.test(\"Check Message in Duplicate UserId\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"The provided userId already exists. The user attribute updates are not saved. If you want to update the attributes of this user, please use user events instead.\");",
                  "});",
                  "",
                  "",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"userId\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "56339335-3260-49fb-8ce3-888af4520f66",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{businessUserId}}\",\n  \"createdTimestamp\": {{timestamp}},\n  \"legalEntity\": {\n    \"companyGeneralDetails\": {\n      \"legalName\": \"Jameson Breweries\",\n      \"businessIndustry\": [\n        \"Alcohol\", \"Scotch\"\n      ]\n    },\n    \"companyFinancialDetails\": {\n      \"expectedTransactionAmountPerMonth\": {\n        \"amountValue\": 5160000,\n        \"amountCurrency\": \"GBP\"\n      },\n      \"expectedTurnoverPerMonth\": {\n        \"amountValue\": 30000090,\n        \"amountCurrency\": \"GBP\"\n      },\n      \"tags\": [\n        {\n          \"key\": \"averageNumberOfPaymentsPerMonth\",\n          \"value\": \"90\"\n        }\n      ]\n    },\n    \"companyRegistrationDetails\": {\n      \"registrationIdentifier\": \"IN22313\",\n      \"registrationCountry\": \"DK\",\n      \"dateOfRegistration\": \"2022-01-01\",\n      \"taxIdentifier\": \"BDH3N221E\",\n      \"legalEntityType\": \"Pvt Ltd\"\n    },\n    \"contactDetails\": {\n      \"websites\": [\n        \"jamieson.com\"\n      ]\n    }\n  },\n  \"allowedPaymentMethods\": [\n    \"GENERIC_BANK_ACCOUNT\", \"WALLET\", \"CARD\", \"ACH\"\n  ]\n}"
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "24163049-56339335-3260-49fb-8ce3-888af4520f66"
        },
        {
          "name": "Linked Entity Does not Exists",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Check Error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    ",
                  "    pm.expect(jsonData.error).to.eql(\"BadRequestError\");",
                  "});",
                  "",
                  "pm.test(\"Check Message in Duplicate UserId\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Parent user ID : B-21 passed in linkedEntities does not exist. Please create the entitiy before linking it\");",
                  "});",
                  "",
                  "",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"error\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "8227015d-b703-462f-a46c-76f16da0b8e1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{businessUserId}}-12qq\",\n  \"createdTimestamp\": {{timestamp}},\n  \"legalEntity\": {\n    \"companyGeneralDetails\": {\n      \"legalName\": \"Jameson Breweries\",\n      \"businessIndustry\": [\n        \"Alcohol\", \"Scotch\"\n      ]\n    },\n    \"companyFinancialDetails\": {\n      \"expectedTransactionAmountPerMonth\": {\n        \"amountValue\": 5160000,\n        \"amountCurrency\": \"GBP\"\n      },\n      \"expectedTurnoverPerMonth\": {\n        \"amountValue\": 30000090,\n        \"amountCurrency\": \"GBP\"\n      },\n      \"tags\": [\n        {\n          \"key\": \"averageNumberOfPaymentsPerMonth\",\n          \"value\": \"90\"\n        }\n      ]\n    },\n    \"companyRegistrationDetails\": {\n      \"registrationIdentifier\": \"IN22313\",\n      \"registrationCountry\": \"DK\",\n      \"dateOfRegistration\": \"2022-01-01\",\n      \"taxIdentifier\": \"BDH3N221E\",\n      \"legalEntityType\": \"Pvt Ltd\"\n    },\n    \"contactDetails\": {\n      \"websites\": [\n        \"jamieson.com\"\n      ]\n    }\n  },\n  \"linkedEntities\": {\n      \"parentUserId\": \"B-21\",\n      \"childUserIds\": [\"B-1\", \"B-22\", \"B-20\"]\n  },\n  \"allowedPaymentMethods\": [\n    \"GENERIC_BANK_ACCOUNT\", \"WALLET\", \"CARD\", \"ACH\"\n  ]\n}"
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "24163049-8227015d-b703-462f-a46c-76f16da0b8e1"
        },
        {
          "name": "Legal Name Not Provided",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"legalName\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "b2e81c21-4094-4c39-8ed6-a1419b68cb4e",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{businessUserId}}\",\n  \"createdTimestamp\": {{timestamp}},\n  \"legalEntity\": {\n    \"companyGeneralDetails\": {\n      \"businessIndustry\": [\n        \"Alcohol\", \"Scotch\"\n      ]\n    },\n    \"companyFinancialDetails\": {\n      \"expectedTransactionAmountPerMonth\": {\n        \"amountValue\": 5160000,\n        \"amountCurrency\": \"GBP\"\n      },\n      \"expectedTurnoverPerMonth\": {\n        \"amountValue\": 30000090,\n        \"amountCurrency\": \"GBP\"\n      },\n      \"tags\": [\n        {\n          \"key\": \"averageNumberOfPaymentsPerMonth\",\n          \"value\": \"90\"\n        }\n      ]\n    },\n    \"companyRegistrationDetails\": {\n      \"registrationIdentifier\": \"IN22313\",\n      \"registrationCountry\": \"DK\",\n      \"dateOfRegistration\": \"2022-01-01\",\n      \"taxIdentifier\": \"BDH3N221E\",\n      \"legalEntityType\": \"Pvt Ltd\"\n    },\n    \"contactDetails\": {\n      \"websites\": [\n        \"jamieson.com\"\n      ]\n    }\n  },\n  \"allowedPaymentMethods\": [\n    \"GENERIC_BANK_ACCOUNT\", \"WALLET\", \"CARD\", \"ACH\"\n  ]\n}"
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "24163049-b2e81c21-4094-4c39-8ed6-a1419b68cb4e"
        },
        {
          "name": "Incorrect Type of Legal Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance type (integer) does not match any allowed primitive type (allowed: [\\\"string\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "38162d6e-27df-4628-9514-3cb8793697fd",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{businessUserId}}\",\n  \"createdTimestamp\": {{timestamp}},\n  \"legalEntity\": {\n    \"companyGeneralDetails\": {\n      \"legalName\": 123,\n      \"businessIndustry\": [\n        \"Alcohol\", \"Scotch\"\n      ]\n    },\n    \"companyFinancialDetails\": {\n      \"expectedTransactionAmountPerMonth\": {\n        \"amountValue\": 5160000,\n        \"amountCurrency\": \"GBP\"\n      },\n      \"expectedTurnoverPerMonth\": {\n        \"amountValue\": 30000090,\n        \"amountCurrency\": \"GBP\"\n      },\n      \"tags\": [\n        {\n          \"key\": \"averageNumberOfPaymentsPerMonth\",\n          \"value\": \"90\"\n        }\n      ]\n    },\n    \"companyRegistrationDetails\": {\n      \"registrationIdentifier\": \"IN22313\",\n      \"registrationCountry\": \"DK\",\n      \"dateOfRegistration\": \"2022-01-01\",\n      \"taxIdentifier\": \"BDH3N221E\",\n      \"legalEntityType\": \"Pvt Ltd\"\n    },\n    \"contactDetails\": {\n      \"websites\": [\n        \"jamieson.com\"\n      ]\n    }\n  },\n  \"allowedPaymentMethods\": [\n    \"GENERIC_BANK_ACCOUNT\", \"WALLET\", \"CARD\", \"ACH\"\n  ]\n}"
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "24163049-38162d6e-27df-4628-9514-3cb8793697fd"
        },
        {
          "name": "Company General Details Not Provided",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"companyGeneralDetails\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "9fc5d81c-101e-491f-bfbd-539f124671a4",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"BUSINESS\",\n    \"userId\": \"{{businessUserId}}\",\n    \"createdTimestamp\": {{timestamp}},\n    \"legalEntity\": {\n        \"companyFinancialDetails\": {\n            \"expectedTransactionAmountPerMonth\": {\n                \"amountValue\": 5160000,\n                \"amountCurrency\": \"GBP\"\n            },\n            \"expectedTurnoverPerMonth\": {\n                \"amountValue\": 30000090,\n                \"amountCurrency\": \"GBP\"\n            },\n            \"tags\": [\n                {\n                    \"key\": \"averageNumberOfPaymentsPerMonth\",\n                    \"value\": \"90\"\n                }\n            ]\n        },\n        \"companyRegistrationDetails\": {\n            \"registrationIdentifier\": \"IN22313\",\n            \"registrationCountry\": \"DK\",\n            \"dateOfRegistration\": \"2022-01-01\",\n            \"taxIdentifier\": \"BDH3N221E\",\n            \"legalEntityType\": \"Pvt Ltd\"\n        },\n        \"contactDetails\": {\n            \"websites\": [\n                \"jamieson.com\"\n            ]\n        }\n    },\n    \"linkedEntities\": {\n        \"parentUserId\": \"B-21\",\n        \"childUserIds\": [\n            \"B-1\",\n            \"B-22\",\n            \"B-20\"\n        ]\n    },\n    \"allowedPaymentMethods\": [\n        \"GENERIC_BANK_ACCOUNT\",\n        \"WALLET\",\n        \"CARD\",\n        \"ACH\"\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "24163049-9fc5d81c-101e-491f-bfbd-539f124671a4"
        },
        {
          "name": "Value not Provided in Tags",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"value\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "68b94f30-4f0e-4a89-8586-43075acf89dd",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"userId\": \"{{businessUserId}}\",\n    \"createdTimestamp\": {{timestamp}},\n    \"legalEntity\": {\n        \"companyGeneralDetails\": {\n            \"legalName\": \"Jameson Breweries\",\n            \"businessIndustry\": [\n                \"Alcohol\",\n                \"Scotch\"\n            ]\n        },\n        \"companyFinancialDetails\": {\n            \"expectedTransactionAmountPerMonth\": {\n                \"amountValue\": 5160000,\n                \"amountCurrency\": \"GBP\"\n            },\n            \"expectedTurnoverPerMonth\": {\n                \"amountValue\": 30000090,\n                \"amountCurrency\": \"GBP\"\n            },\n            \"tags\": [\n                {\n                    \"key\": \"averageNumberOfPaymentsPerMonth\"\n                }\n            ]\n        },\n        \"companyRegistrationDetails\": {\n            \"registrationIdentifier\": \"IN22313\",\n            \"registrationCountry\": \"DK\",\n            \"dateOfRegistration\": \"2022-01-01\",\n            \"taxIdentifier\": \"BDH3N221E\",\n            \"legalEntityType\": \"Pvt Ltd\"\n        },\n        \"contactDetails\": {\n            \"websites\": [\n                \"jamieson.com\"\n            ]\n        }\n    },\n    \"linkedEntities\": {\n        \"parentUserId\": \"B-21\",\n        \"childUserIds\": [\n            \"B-1\",\n            \"B-22\",\n            \"B-20\"\n        ]\n    },\n    \"allowedPaymentMethods\": [\n        \"GENERIC_BANK_ACCOUNT\",\n        \"WALLET\",\n        \"CARD\",\n        \"ACH\"\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "24163049-68b94f30-4f0e-4a89-8586-43075acf89dd"
        },
        {
          "name": "User Id not givern",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"userId\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "614b531b-77fd-4891-9557-76b69c1bae77",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"BUSINESS\",\n    \"createdTimestamp\": {{timestamp}},\n    \"legalEntity\": {\n        \"companyGeneralDetails\": {\n            \"businessIndustry\": [\n                \"Alcohol\",\n                \"Scotch\"\n            ]\n        },\n        \"companyFinancialDetails\": {\n            \"expectedTransactionAmountPerMonth\": {\n                \"amountValue\": 5160000,\n                \"amountCurrency\": \"GBP\"\n            },\n            \"expectedTurnoverPerMonth\": {\n                \"amountValue\": 30000090,\n                \"amountCurrency\": \"GBP\"\n            },\n            \"tags\": [\n                {\n                    \"key\": \"averageNumberOfPaymentsPerMonth\",\n                    \"value\": \"90\"\n                }\n            ]\n        },\n        \"companyRegistrationDetails\": {\n            \"registrationIdentifier\": \"IN22313\",\n            \"registrationCountry\": \"DK\",\n            \"dateOfRegistration\": \"2022-01-01\",\n            \"taxIdentifier\": \"BDH3N221E\",\n            \"legalEntityType\": \"Pvt Ltd\"\n        },\n        \"contactDetails\": {\n            \"websites\": [\n                \"jamieson.com\"\n            ]\n        }\n    },\n    \"linkedEntities\": {\n        \"parentUserId\": \"B-21\",\n        \"childUserIds\": [\n            \"B-1\",\n            \"B-22\",\n            \"B-20\"\n        ]\n    },\n    \"allowedPaymentMethods\": [\n        \"GENERIC_BANK_ACCOUNT\",\n        \"WALLET\",\n        \"CARD\",\n        \"ACH\"\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "24163049-614b531b-77fd-4891-9557-76b69c1bae77"
        },
        {
          "name": "No Api Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Unauthorized\");",
                  "});",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "e7b1d3c9-652b-4487-9e0a-be1ecbe31125",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"BUSINESS\",\n    \"userId\": \"{{businessUserId}}\",\n    \"createdTimestamp\": {{timestamp}},\n    \"legalEntity\": {\n        \"companyGeneralDetails\": {\n            \"businessIndustry\": [\n                \"Alcohol\",\n                \"Scotch\"\n            ]\n        },\n        \"companyFinancialDetails\": {\n            \"expectedTransactionAmountPerMonth\": {\n                \"amountValue\": 5160000,\n                \"amountCurrency\": \"GBP\"\n            },\n            \"expectedTurnoverPerMonth\": {\n                \"amountValue\": 30000090,\n                \"amountCurrency\": \"GBP\"\n            },\n            \"tags\": [\n                {\n                    \"key\": \"averageNumberOfPaymentsPerMonth\",\n                    \"value\": \"90\"\n                }\n            ]\n        },\n        \"companyRegistrationDetails\": {\n            \"registrationIdentifier\": \"IN22313\",\n            \"registrationCountry\": \"DK\",\n            \"dateOfRegistration\": \"2022-01-01\",\n            \"taxIdentifier\": \"BDH3N221E\",\n            \"legalEntityType\": \"Pvt Ltd\"\n        },\n        \"contactDetails\": {\n            \"websites\": [\n                \"jamieson.com\"\n            ]\n        }\n    },\n    \"linkedEntities\": {\n        \"parentUserId\": \"B-21\",\n        \"childUserIds\": [\n            \"B-1\",\n            \"B-22\",\n            \"B-20\"\n        ]\n    },\n    \"allowedPaymentMethods\": [\n        \"GENERIC_BANK_ACCOUNT\",\n        \"WALLET\",\n        \"CARD\",\n        \"ACH\"\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "24163049-e7b1d3c9-652b-4487-9e0a-be1ecbe31125"
        },
        {
          "name": "Incorrect-Domain",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "",
                  "pm.test(\"Matches Key\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Matches Text\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "015c311a-d0ab-4a02-8fea-a30c89bf6e05",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"BUSINESS\",\n    \"createdTimestamp\": {{timestamp}},\n    \"legalEntity\": {\n        \"companyGeneralDetails\": {\n            \"businessIndustry\": [\n                \"Alcohol\",\n                \"Scotch\"\n            ]\n        },\n        \"companyFinancialDetails\": {\n            \"expectedTransactionAmountPerMonth\": {\n                \"amountValue\": 5160000,\n                \"amountCurrency\": \"GBP\"\n            },\n            \"expectedTurnoverPerMonth\": {\n                \"amountValue\": 30000090,\n                \"amountCurrency\": \"GBP\"\n            },\n            \"tags\": [\n                {\n                    \"key\": \"averageNumberOfPaymentsPerMonth\",\n                    \"value\": \"90\"\n                }\n            ]\n        },\n        \"companyRegistrationDetails\": {\n            \"registrationIdentifier\": \"IN22313\",\n            \"registrationCountry\": \"DK\",\n            \"dateOfRegistration\": \"2022-01-01\",\n            \"taxIdentifier\": \"BDH3N221E\",\n            \"legalEntityType\": \"Pvt Ltd\"\n        },\n        \"contactDetails\": {\n            \"websites\": [\n                \"jamieson.com\"\n            ]\n        }\n    },\n    \"linkedEntities\": {\n        \"parentUserId\": \"B-21\",\n        \"childUserIds\": [\n            \"B-1\",\n            \"B-22\",\n            \"B-20\"\n        ]\n    },\n    \"allowedPaymentMethods\": [\n        \"GENERIC_BANK_ACCOUNT\",\n        \"WALLET\",\n        \"CARD\",\n        \"ACH\"\n    ]\n}"
            },
            "url": {
              "raw": "{{incorrectDomain}}/business/users",
              "host": ["{{incorrectDomain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "24163049-015c311a-d0ab-4a02-8fea-a30c89bf6e05"
        },
        {
          "name": "No Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[Unknown error parsing request body]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "def827de-bc8b-42b6-86bb-f160ee66bae1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "24163049-def827de-bc8b-42b6-86bb-f160ee66bae1"
        },
        {
          "name": "Empty Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"createdTimestamp\\\",\\\"legalEntity\\\",\\\"userId\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "22e21f82-7398-4cc1-9483-b77bb999e729",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "24163049-22e21f82-7398-4cc1-9483-b77bb999e729"
        }
      ],
      "id": "d23e8ddf-1588-4c91-b363-cd4851e63a19",
      "uid": "24163049-d23e8ddf-1588-4c91-b363-cd4851e63a19"
    }
  ]
}
