/* tslint:disable */
/* eslint-disable */
/**
 * Tarpon Console API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  ConsumerName,
  ConsumerNameFromJSON,
  ConsumerNameFromJSONTyped,
  ConsumerNameToJSON,
} from './ConsumerName';
import { Tag, TagFromJSON, TagFromJSONTyped, TagToJSON } from './Tag';

/**
 * LegalDocument model generalizes User's identity document type (ex: Passport)
 * @export
 * @interface LegalDocument1
 */
export interface LegalDocument1 {
  /**
   * User's identity document type such as passport, national ID etc.
   * @type {string}
   * @memberof LegalDocument1
   */
  documentType: string;
  /**
   * User's unique identity document number such as passport number
   * @type {string}
   * @memberof LegalDocument1
   */
  documentNumber: string;
  /**
   * User's identity document issuance date
   * @type {number}
   * @memberof LegalDocument1
   */
  documentIssuedDate?: number;
  /**
   * User's identity document expiration date
   * @type {number}
   * @memberof LegalDocument1
   */
  documentExpirationDate?: number;
  /**
   * User's identity document issuance country
   * @type {string}
   * @memberof LegalDocument1
   */
  documentIssuedCountry: string;
  /**
   * Additional information that can be added via tags
   * @type {Array<Tag>}
   * @memberof LegalDocument1
   */
  tags?: Array<Tag>;
  /**
   *
   * @type {ConsumerName}
   * @memberof LegalDocument1
   */
  nameOnDocument?: ConsumerName;
}

export function LegalDocument1FromJSON(json: any): LegalDocument1 {
  return LegalDocument1FromJSONTyped(json, false);
}

export function LegalDocument1FromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): LegalDocument1 {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    documentType: json['documentType'],
    documentNumber: json['documentNumber'],
    documentIssuedDate: !exists(json, 'documentIssuedDate')
      ? undefined
      : json['documentIssuedDate'],
    documentExpirationDate: !exists(json, 'documentExpirationDate')
      ? undefined
      : json['documentExpirationDate'],
    documentIssuedCountry: json['documentIssuedCountry'],
    tags: !exists(json, 'tags') ? undefined : (json['tags'] as Array<any>).map(TagFromJSON),
    nameOnDocument: !exists(json, 'nameOnDocument')
      ? undefined
      : ConsumerNameFromJSON(json['nameOnDocument']),
  };
}

export function LegalDocument1ToJSON(value?: LegalDocument1 | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    documentType: value.documentType,
    documentNumber: value.documentNumber,
    documentIssuedDate: value.documentIssuedDate,
    documentExpirationDate: value.documentExpirationDate,
    documentIssuedCountry: value.documentIssuedCountry,
    tags: value.tags === undefined ? undefined : (value.tags as Array<any>).map(TagToJSON),
    nameOnDocument: ConsumerNameToJSON(value.nameOnDocument),
  };
}
