/* tslint:disable */
/* eslint-disable */
/**
 * Tarpon Console API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Model for device data
 * @export
 * @interface DeviceData
 */
export interface DeviceData {
  /**
   * Battery level of the device used for a transaction or event at a given timestamp
   * @type {number}
   * @memberof DeviceData
   */
  batteryLevel?: number;
  /**
   * Device latitude at a give timestamp for an event or transaction
   * @type {number}
   * @memberof DeviceData
   */
  deviceLatitude?: number;
  /**
   * Device longitude at a give timestamp for an event or transaction
   * @type {number}
   * @memberof DeviceData
   */
  deviceLongitude?: number;
  /**
   * IP address of the device at a given timestamp for an event or transaction
   * @type {string}
   * @memberof DeviceData
   */
  ipAddress?: string;
  /**
   * Device identifier number
   * @type {string}
   * @memberof DeviceData
   */
  deviceIdentifier?: string;
  /**
   * Whether VPN was used at a given timestamp for an event or transaction
   * @type {boolean}
   * @memberof DeviceData
   */
  vpnUsed?: boolean;
  /**
   * Operating system of the device at a given timestamp for an event or transaction
   * @type {string}
   * @memberof DeviceData
   */
  operatingSystem?: string;
  /**
   * The maker of the device at a given timestamp for an event or transaction
   * @type {string}
   * @memberof DeviceData
   */
  deviceMaker?: string;
  /**
   * The model of the device at a given timestamp for an event or transaction
   * @type {string}
   * @memberof DeviceData
   */
  deviceModel?: string;
  /**
   * The year the device was manufactured at a given timestamp for an event or transaction
   * @type {string}
   * @memberof DeviceData
   */
  deviceYear?: string;
  /**
   * The version of the app your user is using on their device at a given timestamp for an event or transaction
   * @type {string}
   * @memberof DeviceData
   */
  appVersion?: string;
}

export function DeviceDataFromJSON(json: any): DeviceData {
  return DeviceDataFromJSONTyped(json, false);
}

export function DeviceDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): DeviceData {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    batteryLevel: !exists(json, 'batteryLevel') ? undefined : json['batteryLevel'],
    deviceLatitude: !exists(json, 'deviceLatitude') ? undefined : json['deviceLatitude'],
    deviceLongitude: !exists(json, 'deviceLongitude') ? undefined : json['deviceLongitude'],
    ipAddress: !exists(json, 'ipAddress') ? undefined : json['ipAddress'],
    deviceIdentifier: !exists(json, 'deviceIdentifier') ? undefined : json['deviceIdentifier'],
    vpnUsed: !exists(json, 'vpnUsed') ? undefined : json['vpnUsed'],
    operatingSystem: !exists(json, 'operatingSystem') ? undefined : json['operatingSystem'],
    deviceMaker: !exists(json, 'deviceMaker') ? undefined : json['deviceMaker'],
    deviceModel: !exists(json, 'deviceModel') ? undefined : json['deviceModel'],
    deviceYear: !exists(json, 'deviceYear') ? undefined : json['deviceYear'],
    appVersion: !exists(json, 'appVersion') ? undefined : json['appVersion'],
  };
}

export function DeviceDataToJSON(value?: DeviceData | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    batteryLevel: value.batteryLevel,
    deviceLatitude: value.deviceLatitude,
    deviceLongitude: value.deviceLongitude,
    ipAddress: value.ipAddress,
    deviceIdentifier: value.deviceIdentifier,
    vpnUsed: value.vpnUsed,
    operatingSystem: value.operatingSystem,
    deviceMaker: value.deviceMaker,
    deviceModel: value.deviceModel,
    deviceYear: value.deviceYear,
    appVersion: value.appVersion,
  };
}
