/* tslint:disable */
/* eslint-disable */
/**
 * Tarpon Console API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  ContactDetails1,
  ContactDetails1FromJSON,
  ContactDetails1FromJSONTyped,
  ContactDetails1ToJSON,
} from './ContactDetails1';
import {
  LegalDocument1,
  LegalDocument1FromJSON,
  LegalDocument1FromJSONTyped,
  LegalDocument1ToJSON,
} from './LegalDocument1';
import { Tag, TagFromJSON, TagFromJSONTyped, TagToJSON } from './Tag';
import {
  UserDetails1,
  UserDetails1FromJSON,
  UserDetails1FromJSONTyped,
  UserDetails1ToJSON,
} from './UserDetails1';

/**
 * Model for a generic individual - different from User model by not having userId field
 * @export
 * @interface Person
 */
export interface Person {
  /**
   *
   * @type {UserDetails1}
   * @memberof Person
   */
  generalDetails: UserDetails1;
  /**
   * User's legal identity documents - See Document Model for details
   * @type {Array<LegalDocument1>}
   * @memberof Person
   */
  legalDocuments?: Array<LegalDocument1>;
  /**
   *
   * @type {ContactDetails1}
   * @memberof Person
   */
  contactDetails?: ContactDetails1;
  /**
   * Additional information that can be added via tags
   * @type {Array<Tag>}
   * @memberof Person
   */
  tags?: Array<Tag>;
}

export function PersonFromJSON(json: any): Person {
  return PersonFromJSONTyped(json, false);
}

export function PersonFromJSONTyped(json: any, ignoreDiscriminator: boolean): Person {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    generalDetails: UserDetails1FromJSON(json['generalDetails']),
    legalDocuments: !exists(json, 'legalDocuments')
      ? undefined
      : (json['legalDocuments'] as Array<any>).map(LegalDocument1FromJSON),
    contactDetails: !exists(json, 'contactDetails')
      ? undefined
      : ContactDetails1FromJSON(json['contactDetails']),
    tags: !exists(json, 'tags') ? undefined : (json['tags'] as Array<any>).map(TagFromJSON),
  };
}

export function PersonToJSON(value?: Person | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    generalDetails: UserDetails1ToJSON(value.generalDetails),
    legalDocuments:
      value.legalDocuments === undefined
        ? undefined
        : (value.legalDocuments as Array<any>).map(LegalDocument1ToJSON),
    contactDetails: ContactDetails1ToJSON(value.contactDetails),
    tags: value.tags === undefined ? undefined : (value.tags as Array<any>).map(TagToJSON),
  };
}
