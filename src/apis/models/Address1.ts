/* tslint:disable */
/* eslint-disable */
/**
 * Tarpon Console API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import { Tag, TagFromJSON, TagFromJSONTyped, TagToJSON } from './Tag';

/**
 * Model for standardized address
 * @export
 * @interface Address1
 */
export interface Address1 {
  /**
   * Address lines of the user's residence address
   * @type {Array<any>}
   * @memberof Address1
   */
  addressLines: Array<any>;
  /**
   * Post code of the user's residence address
   * @type {string}
   * @memberof Address1
   */
  postcode: string;
  /**
   * City of the user's residence address
   * @type {string}
   * @memberof Address1
   */
  city: string;
  /**
   * State of the user's residence address
   * @type {string}
   * @memberof Address1
   */
  state?: string;
  /**
   * User's country of residence
   * @type {string}
   * @memberof Address1
   */
  country: string;
  /**
   * Additional information that can be added via tags
   * @type {Array<Tag>}
   * @memberof Address1
   */
  tags?: Array<Tag>;
}

export function Address1FromJSON(json: any): Address1 {
  return Address1FromJSONTyped(json, false);
}

export function Address1FromJSONTyped(json: any, ignoreDiscriminator: boolean): Address1 {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    addressLines: json['addressLines'],
    postcode: json['postcode'],
    city: json['city'],
    state: !exists(json, 'state') ? undefined : json['state'],
    country: json['country'],
    tags: !exists(json, 'tags') ? undefined : (json['tags'] as Array<any>).map(TagFromJSON),
  };
}

export function Address1ToJSON(value?: Address1 | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    addressLines: value.addressLines,
    postcode: value.postcode,
    city: value.city,
    state: value.state,
    country: value.country,
    tags: value.tags === undefined ? undefined : (value.tags as Array<any>).map(TagToJSON),
  };
}
