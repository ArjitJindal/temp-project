/* tslint:disable */
/* eslint-disable */
/**
 * Tarpon Console API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  ContactDetails,
  ContactDetailsFromJSON,
  ContactDetailsFromJSONTyped,
  ContactDetailsToJSON,
} from './ContactDetails';
import {
  LegalDocument,
  LegalDocumentFromJSON,
  LegalDocumentFromJSONTyped,
  LegalDocumentToJSON,
} from './LegalDocument';
import { Tag, TagFromJSON, TagFromJSONTyped, TagToJSON } from './Tag';
import {
  UserDetails,
  UserDetailsFromJSON,
  UserDetailsFromJSONTyped,
  UserDetailsToJSON,
} from './UserDetails';

/**
 * Model for User details
 * @export
 * @interface User
 */
export interface User {
  /**
   * Unique user ID
   * @type {string}
   * @memberof User
   */
  userId: string;
  /**
   *
   * @type {UserDetails}
   * @memberof User
   */
  userDetails: UserDetails;
  /**
   *
   * @type {number}
   * @memberof User
   */
  createdTimestamp: number;
  /**
   * User's legal identity documents - See Document Model for details
   * @type {Array<LegalDocument>}
   * @memberof User
   */
  legalDocuments?: Array<LegalDocument>;
  /**
   *
   * @type {ContactDetails}
   * @memberof User
   */
  contactDetails?: ContactDetails;
  /**
   * Additional information that can be added via tags
   * @type {Array<Tag>}
   * @memberof User
   */
  tags?: Array<Tag>;
}

export function UserFromJSON(json: any): User {
  return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    userId: json['userId'],
    userDetails: UserDetailsFromJSON(json['userDetails']),
    createdTimestamp: json['createdTimestamp'],
    legalDocuments: !exists(json, 'legalDocuments')
      ? undefined
      : (json['legalDocuments'] as Array<any>).map(LegalDocumentFromJSON),
    contactDetails: !exists(json, 'contactDetails')
      ? undefined
      : ContactDetailsFromJSON(json['contactDetails']),
    tags: !exists(json, 'tags') ? undefined : (json['tags'] as Array<any>).map(TagFromJSON),
  };
}

export function UserToJSON(value?: User | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    userId: value.userId,
    userDetails: UserDetailsToJSON(value.userDetails),
    createdTimestamp: value.createdTimestamp,
    legalDocuments:
      value.legalDocuments === undefined
        ? undefined
        : (value.legalDocuments as Array<any>).map(LegalDocumentToJSON),
    contactDetails: ContactDetailsToJSON(value.contactDetails),
    tags: value.tags === undefined ? undefined : (value.tags as Array<any>).map(TagToJSON),
  };
}
