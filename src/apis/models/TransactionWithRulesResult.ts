/* tslint:disable */
/* eslint-disable */
/**
 * Tarpon Console API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  ACHDetails,
  ACHDetailsFromJSON,
  ACHDetailsFromJSONTyped,
  ACHDetailsToJSON,
} from './ACHDetails';
import {
  CardDetails,
  CardDetailsFromJSON,
  CardDetailsFromJSONTyped,
  CardDetailsToJSON,
} from './CardDetails';
import {
  DeviceData,
  DeviceDataFromJSON,
  DeviceDataFromJSONTyped,
  DeviceDataToJSON,
} from './DeviceData';
import {
  ExecutedRulesResult,
  ExecutedRulesResultFromJSON,
  ExecutedRulesResultFromJSONTyped,
  ExecutedRulesResultToJSON,
} from './ExecutedRulesResult';
import {
  FailedRulesResult,
  FailedRulesResultFromJSON,
  FailedRulesResultFromJSONTyped,
  FailedRulesResultToJSON,
} from './FailedRulesResult';
import { IBANDetails, IBANDetailsFromJSON, IBANDetailsToJSON } from './IBANDetails';
import { Tag, TagFromJSON, TagFromJSONTyped, TagToJSON } from './Tag';
import {
  Transaction,
  TransactionFromJSON,
  TransactionFromJSONTyped,
  TransactionToJSON,
} from './Transaction';
import {
  TransactionAmountDetails,
  TransactionAmountDetailsFromJSON,
  TransactionAmountDetailsFromJSONTyped,
  TransactionAmountDetailsToJSON,
} from './TransactionAmountDetails';
import {
  TransactionWithRulesResultAllOf,
  TransactionWithRulesResultAllOfFromJSON,
  TransactionWithRulesResultAllOfFromJSONTyped,
  TransactionWithRulesResultAllOfToJSON,
} from './TransactionWithRulesResultAllOf';
import { UPIDetails, UPIDetailsFromJSON, UPIDetailsToJSON } from './UPIDetails';

/**
 * Model for transaction payload with rules result
 * @export
 * @interface TransactionWithRulesResult
 */
export interface TransactionWithRulesResult {
  /**
   * Unique transaction identifier
   * @type {string}
   * @memberof TransactionWithRulesResult
   */
  transactionId?: string;
  /**
   *
   *
   *
   * @type {number}
   * @memberof TransactionWithRulesResult
   */
  timestamp: number;
  /**
   *
   *
   *
   * @type {string}
   * @memberof TransactionWithRulesResult
   */
  senderUserId?: string;
  /**
   *
   *
   *
   * @type {string}
   * @memberof TransactionWithRulesResult
   */
  receiverUserId?: string;
  /**
   *
   *
   *
   * @type {TransactionAmountDetails}
   * @memberof TransactionWithRulesResult
   */
  sendingAmountDetails?: TransactionAmountDetails;
  /**
   *
   *
   *
   * @type {TransactionAmountDetails}
   * @memberof TransactionWithRulesResult
   */
  receivingAmountDetails?: TransactionAmountDetails;
  /**
   *
   *
   *
   * @type {CardDetails | IBANDetails | ACHDetails | UPIDetails}
   * @memberof TransactionWithRulesResult
   */
  senderPaymentDetails: CardDetails | IBANDetails | ACHDetails | UPIDetails | null;
  /**
   *
   *
   *
   * @type {CardDetails | IBANDetails | ACHDetails | UPIDetails}
   * @memberof TransactionWithRulesResult
   */
  receiverPaymentDetails: CardDetails | IBANDetails | ACHDetails | UPIDetails | null;
  /**
   * Type of produce being used by the consumer (ex wallets, payments etc)
   * @type {string}
   * @memberof TransactionWithRulesResult
   */
  productType?: string;
  /**
   * Whether a promotion code was used or not the transaction
   * @type {boolean}
   * @memberof TransactionWithRulesResult
   */
  promotionCodeUsed?: boolean;
  /**
   * Reference field for the transaction indicating the purpose of the transaction etc.
   * @type {string}
   * @memberof TransactionWithRulesResult
   */
  reference?: string;
  /**
   *
   *
   *
   * @type {DeviceData}
   * @memberof TransactionWithRulesResult
   */
  deviceData?: DeviceData;
  /**
   * Additional information that can be added via tags
   * @type {Array<Tag>}
   * @memberof TransactionWithRulesResult
   */
  tags?: Array<Tag>;
  /**
   *
   *
   *
   * @type {Array<ExecutedRulesResult>}
   * @memberof TransactionWithRulesResult
   */
  executedRules: Array<ExecutedRulesResult>;
  /**
   *
   *
   *
   * @type {Array<FailedRulesResult>}
   * @memberof TransactionWithRulesResult
   */
  failedRules: Array<FailedRulesResult>;
}

export function TransactionWithRulesResultFromJSON(json: any): TransactionWithRulesResult {
  return TransactionWithRulesResultFromJSONTyped(json, false);
}

export function TransactionWithRulesResultFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): TransactionWithRulesResult {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    transactionId: !exists(json, 'transactionId') ? undefined : json['transactionId'],
    timestamp: json['timestamp'],
    senderUserId: !exists(json, 'senderUserId') ? undefined : json['senderUserId'],
    receiverUserId: !exists(json, 'receiverUserId') ? undefined : json['receiverUserId'],
    sendingAmountDetails: !exists(json, 'sendingAmountDetails')
      ? undefined
      : TransactionAmountDetailsFromJSON(json['sendingAmountDetails']),
    receivingAmountDetails: !exists(json, 'receivingAmountDetails')
      ? undefined
      : TransactionAmountDetailsFromJSON(json['receivingAmountDetails']),
    senderPaymentDetails:
      json['senderPaymentDetails'].method === 'CARD'
        ? CardDetailsFromJSON(json['senderPaymentDetails'])
        : json['senderPaymentDetails'].method === 'IBAN'
        ? IBANDetailsFromJSON(json['senderPaymentDetails'])
        : json['senderPaymentDetails'].method === 'ACH'
        ? ACHDetailsFromJSON(json['senderPaymentDetails'])
        : json['senderPaymentDetails'].method === 'UPI'
        ? UPIDetailsFromJSON(json['senderPaymentDetails'])
        : null,
    receiverPaymentDetails:
      json['receiverPaymentDetails'].method === 'CARD'
        ? CardDetailsFromJSON(json['receiverPaymentDetails'])
        : json['receiverPaymentDetails'].method === 'IBAN'
        ? IBANDetailsFromJSON(json['receiverPaymentDetails'])
        : json['receiverPaymentDetails'].method === 'ACH'
        ? ACHDetailsFromJSON(json['receiverPaymentDetails'])
        : json['receiverPaymentDetails'].method === 'UPI'
        ? UPIDetailsFromJSON(json['receiverPaymentDetails'])
        : null,
    productType: !exists(json, 'productType') ? undefined : json['productType'],
    promotionCodeUsed: !exists(json, 'promotionCodeUsed') ? undefined : json['promotionCodeUsed'],
    reference: !exists(json, 'reference') ? undefined : json['reference'],
    deviceData: !exists(json, 'deviceData') ? undefined : DeviceDataFromJSON(json['deviceData']),
    tags: !exists(json, 'tags') ? undefined : (json['tags'] as Array<any>).map(TagFromJSON),
    executedRules: (json['executedRules'] as Array<any>).map(ExecutedRulesResultFromJSON),
    failedRules: (json['failedRules'] as Array<any>).map(FailedRulesResultFromJSON),
  };
}

export function TransactionWithRulesResultToJSON(value?: TransactionWithRulesResult | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    transactionId: value.transactionId,
    timestamp: value.timestamp,
    senderUserId: value.senderUserId,
    receiverUserId: value.receiverUserId,
    sendingAmountDetails: TransactionAmountDetailsToJSON(value.sendingAmountDetails),
    receivingAmountDetails: TransactionAmountDetailsToJSON(value.receivingAmountDetails),
    senderPaymentDetails:
      value.senderPaymentDetails?.method === 'CARD'
        ? CardDetailsToJSON(value.senderPaymentDetails as CardDetails)
        : value.senderPaymentDetails?.method === 'IBAN'
        ? IBANDetailsToJSON(value.senderPaymentDetails as IBANDetails)
        : value.senderPaymentDetails?.method === 'ACH'
        ? ACHDetailsToJSON(value.senderPaymentDetails as ACHDetails)
        : value.senderPaymentDetails?.method === 'UPI'
        ? UPIDetailsToJSON(value.senderPaymentDetails as UPIDetails)
        : null,
    receiverPaymentDetails:
      value.receiverPaymentDetails?.method === 'CARD'
        ? CardDetailsToJSON(value.receiverPaymentDetails as CardDetails)
        : value.receiverPaymentDetails?.method === 'IBAN'
        ? IBANDetailsToJSON(value.receiverPaymentDetails as IBANDetails)
        : value.receiverPaymentDetails?.method === 'ACH'
        ? ACHDetailsToJSON(value.receiverPaymentDetails as ACHDetails)
        : value.receiverPaymentDetails?.method === 'UPI'
        ? UPIDetailsToJSON(value.receiverPaymentDetails as UPIDetails)
        : null,
    productType: value.productType,
    promotionCodeUsed: value.promotionCodeUsed,
    reference: value.reference,
    deviceData: DeviceDataToJSON(value.deviceData),
    tags: value.tags === undefined ? undefined : (value.tags as Array<any>).map(TagToJSON),
    executedRules: (value.executedRules as Array<any>).map(ExecutedRulesResultToJSON),
    failedRules: (value.failedRules as Array<any>).map(FailedRulesResultToJSON),
  };
}
