/* tslint:disable */
/* eslint-disable */
/**
 * Tarpon Console API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  ListImportRequest,
  ListImportRequestFromJSON,
  ListImportRequestToJSON,
  PresignedUrlResponse,
  PresignedUrlResponseFromJSON,
  PresignedUrlResponseToJSON,
  RuleInstance,
  RuleInstanceFromJSON,
  RuleInstanceToJSON,
  TransactionImportRequest,
  TransactionImportRequestFromJSON,
  TransactionImportRequestToJSON,
  TransactionImportResponse,
  TransactionImportResponseFromJSON,
  TransactionImportResponseToJSON,
} from '../models';

export interface DeleteRuleInstancesRuleInstanceIdRequest {
  ruleInstanceId: string;
}

export interface PostApikeyRequest {
  tenantId?: string;
  usagePlanId?: string;
}

export interface PostListsRequest {
  listImportRequest?: ListImportRequest;
}

export interface PostRuleInstancesRequest {
  ruleInstance?: RuleInstance;
}

export interface PostTransactionsImportRequest {
  transactionImportRequest?: TransactionImportRequest;
}

export interface PutRuleInstancesRuleInstanceIdRequest {
  ruleInstanceId: string;
  ruleInstance?: RuleInstance;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * Rule Instance - Delete
   */
  async deleteRuleInstancesRuleInstanceIdRaw(
    requestParameters: DeleteRuleInstancesRuleInstanceIdRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.ruleInstanceId === null ||
      requestParameters.ruleInstanceId === undefined
    ) {
      throw new runtime.RequiredError(
        'ruleInstanceId',
        'Required parameter requestParameters.ruleInstanceId was null or undefined when calling deleteRuleInstancesRuleInstanceId.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/rule_instances/{ruleInstanceId}`.replace(
          `{${'ruleInstanceId'}}`,
          encodeURIComponent(String(requestParameters.ruleInstanceId)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Rule Instance - Delete
   */
  async deleteRuleInstancesRuleInstanceId(
    requestParameters: DeleteRuleInstancesRuleInstanceIdRequest,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.deleteRuleInstancesRuleInstanceIdRaw(requestParameters, initOverrides);
  }

  /**
   * Generate a new Tarpon API key for a tenant
   * Tarpon API Key - Create
   */
  async postApikeyRaw(
    requestParameters: PostApikeyRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters.tenantId !== undefined) {
      queryParameters['tenantId'] = requestParameters.tenantId;
    }

    if (requestParameters.usagePlanId !== undefined) {
      queryParameters['usagePlanId'] = requestParameters.usagePlanId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/apikey`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Generate a new Tarpon API key for a tenant
   * Tarpon API Key - Create
   */
  async postApikey(
    requestParameters: PostApikeyRequest,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.postApikeyRaw(requestParameters, initOverrides);
  }

  /**
   * List Import
   */
  async postListsRaw(
    requestParameters: PostListsRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/lists`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ListImportRequestToJSON(requestParameters.listImportRequest),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * List Import
   */
  async postLists(requestParameters: PostListsRequest, initOverrides?: RequestInit): Promise<void> {
    await this.postListsRaw(requestParameters, initOverrides);
  }

  /**
   * Rule Instance - Create
   */
  async postRuleInstancesRaw(
    requestParameters: PostRuleInstancesRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<RuleInstance>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/rule_instances`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: RuleInstanceToJSON(requestParameters.ruleInstance),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RuleInstanceFromJSON(jsonValue));
  }

  /**
   * Rule Instance - Create
   */
  async postRuleInstances(
    requestParameters: PostRuleInstancesRequest,
    initOverrides?: RequestInit,
  ): Promise<RuleInstance> {
    const response = await this.postRuleInstancesRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get a presigned URL for uploading a transactions file
   * Transactions Import - Get Presigned URL
   */
  async postTransactionsGetPresignedUrlRaw(
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<PresignedUrlResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/transactions/import/getPresignedUrl`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PresignedUrlResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get a presigned URL for uploading a transactions file
   * Transactions Import - Get Presigned URL
   */
  async postTransactionsGetPresignedUrl(
    initOverrides?: RequestInit,
  ): Promise<PresignedUrlResponse> {
    const response = await this.postTransactionsGetPresignedUrlRaw(initOverrides);
    return await response.value();
  }

  /**
   * Transactions Import - Start to Import
   */
  async postTransactionsImportRaw(
    requestParameters: PostTransactionsImportRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<TransactionImportResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/transactions/import`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: TransactionImportRequestToJSON(requestParameters.transactionImportRequest),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TransactionImportResponseFromJSON(jsonValue),
    );
  }

  /**
   * Transactions Import - Start to Import
   */
  async postTransactionsImport(
    requestParameters: PostTransactionsImportRequest,
    initOverrides?: RequestInit,
  ): Promise<TransactionImportResponse> {
    const response = await this.postTransactionsImportRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Rule Instance - Update
   */
  async putRuleInstancesRuleInstanceIdRaw(
    requestParameters: PutRuleInstancesRuleInstanceIdRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<RuleInstance>> {
    if (
      requestParameters.ruleInstanceId === null ||
      requestParameters.ruleInstanceId === undefined
    ) {
      throw new runtime.RequiredError(
        'ruleInstanceId',
        'Required parameter requestParameters.ruleInstanceId was null or undefined when calling putRuleInstancesRuleInstanceId.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/rule_instances/{ruleInstanceId}`.replace(
          `{${'ruleInstanceId'}}`,
          encodeURIComponent(String(requestParameters.ruleInstanceId)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: RuleInstanceToJSON(requestParameters.ruleInstance),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RuleInstanceFromJSON(jsonValue));
  }

  /**
   * Rule Instance - Update
   */
  async putRuleInstancesRuleInstanceId(
    requestParameters: PutRuleInstancesRuleInstanceIdRequest,
    initOverrides?: RequestInit,
  ): Promise<RuleInstance> {
    const response = await this.putRuleInstancesRuleInstanceIdRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
