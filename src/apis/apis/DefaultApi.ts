/* tslint:disable */
/* eslint-disable */
/**
 * Tarpon Console API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  ImportRequest,
  ImportRequestFromJSON,
  ImportRequestToJSON,
  ImportResponse,
  ImportResponseFromJSON,
  ImportResponseToJSON,
  ListImportRequest,
  ListImportRequestFromJSON,
  ListImportRequestToJSON,
  PresignedUrlResponse,
  PresignedUrlResponseFromJSON,
  PresignedUrlResponseToJSON,
  RuleInstance,
  RuleInstanceFromJSON,
  RuleInstanceToJSON,
  TransactionsListResponse,
  TransactionsListResponseFromJSON,
  TransactionsListResponseToJSON,
} from '../models';

export interface DeleteRuleInstancesRuleInstanceIdRequest {
  ruleInstanceId: string;
}

export interface GetTransactionsListRequest {
  limit: number;
  skip: number;
  beforeTimestamp: number;
}

export interface PostApikeyRequest {
  tenantId?: string;
  usagePlanId?: string;
}

export interface PostImportRequest {
  importRequest?: ImportRequest;
}

export interface PostListsRequest {
  listImportRequest?: ListImportRequest;
}

export interface PostRuleInstancesRequest {
  ruleInstance?: RuleInstance;
}

export interface PutRuleInstancesRuleInstanceIdRequest {
  ruleInstanceId: string;
  ruleInstance?: RuleInstance;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * Rule Instance - Delete
   */
  async deleteRuleInstancesRuleInstanceIdRaw(
    requestParameters: DeleteRuleInstancesRuleInstanceIdRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.ruleInstanceId === null ||
      requestParameters.ruleInstanceId === undefined
    ) {
      throw new runtime.RequiredError(
        'ruleInstanceId',
        'Required parameter requestParameters.ruleInstanceId was null or undefined when calling deleteRuleInstancesRuleInstanceId.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/rule_instances/{ruleInstanceId}`.replace(
          `{${'ruleInstanceId'}}`,
          encodeURIComponent(String(requestParameters.ruleInstanceId)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Rule Instance - Delete
   */
  async deleteRuleInstancesRuleInstanceId(
    requestParameters: DeleteRuleInstancesRuleInstanceIdRequest,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.deleteRuleInstancesRuleInstanceIdRaw(requestParameters, initOverrides);
  }

  /**
   * Transaction - List
   */
  async getTransactionsListRaw(
    requestParameters: GetTransactionsListRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<TransactionsListResponse>> {
    if (requestParameters.limit === null || requestParameters.limit === undefined) {
      throw new runtime.RequiredError(
        'limit',
        'Required parameter requestParameters.limit was null or undefined when calling getTransactionsList.',
      );
    }

    if (requestParameters.skip === null || requestParameters.skip === undefined) {
      throw new runtime.RequiredError(
        'skip',
        'Required parameter requestParameters.skip was null or undefined when calling getTransactionsList.',
      );
    }

    if (
      requestParameters.beforeTimestamp === null ||
      requestParameters.beforeTimestamp === undefined
    ) {
      throw new runtime.RequiredError(
        'beforeTimestamp',
        'Required parameter requestParameters.beforeTimestamp was null or undefined when calling getTransactionsList.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.skip !== undefined) {
      queryParameters['skip'] = requestParameters.skip;
    }

    if (requestParameters.beforeTimestamp !== undefined) {
      queryParameters['beforeTimestamp'] = requestParameters.beforeTimestamp;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/transactions`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TransactionsListResponseFromJSON(jsonValue),
    );
  }

  /**
   * Transaction - List
   */
  async getTransactionsList(
    requestParameters: GetTransactionsListRequest,
    initOverrides?: RequestInit,
  ): Promise<TransactionsListResponse> {
    const response = await this.getTransactionsListRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Generate a new Tarpon API key for a tenant
   * Tarpon API Key - Create
   */
  async postApikeyRaw(
    requestParameters: PostApikeyRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters.tenantId !== undefined) {
      queryParameters['tenantId'] = requestParameters.tenantId;
    }

    if (requestParameters.usagePlanId !== undefined) {
      queryParameters['usagePlanId'] = requestParameters.usagePlanId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/apikey`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Generate a new Tarpon API key for a tenant
   * Tarpon API Key - Create
   */
  async postApikey(
    requestParameters: PostApikeyRequest,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.postApikeyRaw(requestParameters, initOverrides);
  }

  /**
   * Get a presigned URL for uploading a file
   * Import - Get Presigned URL
   */
  async postGetPresignedUrlRaw(
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<PresignedUrlResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/import/getPresignedUrl`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PresignedUrlResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get a presigned URL for uploading a file
   * Import - Get Presigned URL
   */
  async postGetPresignedUrl(initOverrides?: RequestInit): Promise<PresignedUrlResponse> {
    const response = await this.postGetPresignedUrlRaw(initOverrides);
    return await response.value();
  }

  /**
   * Import - Start to Import
   */
  async postImportRaw(
    requestParameters: PostImportRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<ImportResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/import`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ImportRequestToJSON(requestParameters.importRequest),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ImportResponseFromJSON(jsonValue));
  }

  /**
   * Import - Start to Import
   */
  async postImport(
    requestParameters: PostImportRequest,
    initOverrides?: RequestInit,
  ): Promise<ImportResponse> {
    const response = await this.postImportRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * List Import
   */
  async postListsRaw(
    requestParameters: PostListsRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/lists`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ListImportRequestToJSON(requestParameters.listImportRequest),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * List Import
   */
  async postLists(requestParameters: PostListsRequest, initOverrides?: RequestInit): Promise<void> {
    await this.postListsRaw(requestParameters, initOverrides);
  }

  /**
   * Rule Instance - Create
   */
  async postRuleInstancesRaw(
    requestParameters: PostRuleInstancesRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<RuleInstance>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/rule_instances`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: RuleInstanceToJSON(requestParameters.ruleInstance),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RuleInstanceFromJSON(jsonValue));
  }

  /**
   * Rule Instance - Create
   */
  async postRuleInstances(
    requestParameters: PostRuleInstancesRequest,
    initOverrides?: RequestInit,
  ): Promise<RuleInstance> {
    const response = await this.postRuleInstancesRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Rule Instance - Update
   */
  async putRuleInstancesRuleInstanceIdRaw(
    requestParameters: PutRuleInstancesRuleInstanceIdRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<RuleInstance>> {
    if (
      requestParameters.ruleInstanceId === null ||
      requestParameters.ruleInstanceId === undefined
    ) {
      throw new runtime.RequiredError(
        'ruleInstanceId',
        'Required parameter requestParameters.ruleInstanceId was null or undefined when calling putRuleInstancesRuleInstanceId.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/rule_instances/{ruleInstanceId}`.replace(
          `{${'ruleInstanceId'}}`,
          encodeURIComponent(String(requestParameters.ruleInstanceId)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: RuleInstanceToJSON(requestParameters.ruleInstance),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RuleInstanceFromJSON(jsonValue));
  }

  /**
   * Rule Instance - Update
   */
  async putRuleInstancesRuleInstanceId(
    requestParameters: PutRuleInstancesRuleInstanceIdRequest,
    initOverrides?: RequestInit,
  ): Promise<RuleInstance> {
    const response = await this.putRuleInstancesRuleInstanceIdRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
