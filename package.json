{
  "name": "tarpon",
  "version": "1.0.0",
  "description": "![tarpons](https://github.com/flagright/tarpon/blob/main/tarpons.png)",
  "main": "index.js",
  "scripts": {
    "all": "npm-run-all -l -s",
    "parallel": "npm-run-all -l -p",
    "aws-sso-login": "aws sso login --profile $npm_config_profile && yawsso -p $npm_config_profile || npm run sso-fallback-message && echo '\nAWS Credentials:\n====================================' && echo export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id --profile $npm_config_profile) && echo export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key --profile $npm_config_profile) && echo export AWS_SESSION_TOKEN=$(aws configure get aws_session_token --profile $npm_config_profile) && echo '===================================='",
    "aws-sso-login:deploy": "npm run aws-sso-login --profile=AWSAdministratorAccess-073830519512",
    "aws-sso-login:dev": "npm run aws-sso-login --profile=AWSAdministratorAccess-911899431626",
    "aws-sso-login:sandbox": "npm run aws-sso-login --profile=AWSAdministratorAccess-293986822825",
    "aws-sso-login:prod": "npm run aws-sso-login --profile=AWSAdministratorAccess-870721492449",
    "aws-sso-login:all": "npm run aws-sso-login:dev && npm run aws-sso-login:sandbox && npm run aws-sso-login:prod",
    "build": "npm run openapi:build && node scripts/esbuild.js",
    "build:local": "export ENV=local && npm run build",
    "clear": "rm -rf ./dist cdk.out",
    "synth": "cdk synth --quiet",
    "sso-fallback-message": "echo 'Clear the cookies manually of START_URL i.e. https://d-9a6713bec9.awsapps.com/start#/ and try again. \nOR\nFollow the steps mentioned below:\n1. Open the START_URL i.e. https://d-9a6713bec9.awsapps.com/start#/ in a browser.\n2. Click on the AWS Account Button you see\n3. Click DevsAtFlagright\n4. Click AWSAdministratorAccess | Command Line or Programmatic Access\n5. Click Copy to Clipboard in Option 1\n6. Paste the copied value in the terminal and press enter\n\nNow you should be able to run the command again' && exit 1",
    "synth:local": "export ENV=local && npm run openapi:augment && cdk synth --quiet local-tarpon && cdktf get --quiet",
    "synth:dev": "export ENV=dev && npm run openapi:augment && cdk synth --quiet dev-tarpon && cdktf get --quiet && cdktf synth --quiet dev-tarpon",
    "synth:dev:user": "export ENV=dev:user && npm run openapi:augment && cdk synth --quiet dev-tarpon-$GITHUB_USER$S_NO",
    "synth:sandbox": "export ENV=sandbox && npm run openapi:augment && cdk synth --quiet sandbox-tarpon",
    "synth:prod:asia-1": "export ENV=prod:asia-1 && npm run openapi:augment && cdk synth --quiet prod-tarpon",
    "synth:prod:asia-2": "export ENV=prod:asia-2 && npm run openapi:augment && cdk synth --quiet prod-tarpon",
    "synth:prod:eu-1": "export ENV=prod:eu-1 && npm run openapi:augment && cdk synth --quiet prod-tarpon",
    "synth:prod:eu-2": "export ENV=prod:eu-2 && npm run openapi:augment && cdk synth --quiet prod-tarpon",
    "synth:prod:us-1": "export ENV=prod:us-1 && npm run openapi:augment && cdk synth --quiet prod-tarpon",
    "synth:pipeline": "cdk synth --quiet tarpon-pipeline",
    "deploy:dev": "export ENV=dev && cdk deploy dev-tarpon --require-approval=never && cdk deploy dev-tarpon-alarms --require-approval=never && cdktf get --quiet && cdktf deploy --quiet dev-tarpon --auto-approve",
    "deploy:dev:clean": "npm run clear && npm install && ENV=dev npm run build && npm run synth:dev && npm run deploy:dev",
    "deploy:dev:user": "ENV=dev:user cdk deploy dev-tarpon-$GITHUB_USER$S_NO --require-approval never --profile=AWSAdministratorAccess-911899431626",
    "deploy:dev:user:clean": "npm run clear && npm install && npm run aws-sso-login:dev && ENV=dev npm run build && npm run synth:dev:user && npm run deploy:dev:user",
    "deploy:sandbox": "ENV=sandbox cdk deploy sandbox-tarpon --require-approval=never && ENV=sandbox cdk deploy sandbox-tarpon-alarms --require-approval=never && cdktf get --quiet && cdktf deploy --quiet sandbox-tarpon --auto-approve",
    "deploy:sandbox:clean": "npm run clear && npm install && npm run build && npm run synth:sandbox && npm run deploy:sandbox",
    "deploy:prod:asia-1": "ENV=prod:asia-1 cdk deploy prod-tarpon  --require-approval=never && ENV=prod:asia-1 cdk deploy prod-tarpon-alarms --require-approval=never",
    "deploy:prod:asia-1:clean": "npm run clear && npm install && npm run build && npm run synth:prod:asia-1 && npm run deploy:prod:asia-1",
    "deploy:prod:asia-2": "ENV=prod:asia-2 cdk deploy prod-tarpon  --require-approval=never && ENV=prod:asia-2 cdk deploy prod-tarpon-alarms --require-approval=never",
    "deploy:prod:asia-2:clean": "npm run clear && npm install && npm run build && npm run synth:prod:asia-2 && npm run deploy:prod:asia-2",
    "deploy:prod:eu-1": "ENV=prod:eu-1 cdk deploy prod-tarpon  --require-approval=never && ENV=prod:eu-1 cdk deploy prod-tarpon-alarms --require-approval=never && cdktf get --quiet && cdktf deploy --quiet prod-tarpon --auto-approve",
    "deploy:prod:eu-1:clean": "npm run clear && npm install && npm run build && npm run synth:prod:eu-1 && npm run deploy:prod:eu-1",
    "deploy:prod:eu-2": "ENV=prod:eu-2 cdk deploy prod-tarpon --require-approval=never && ENV=prod:eu-2 cdk deploy prod-tarpon-alarms --require-approval=never",
    "deploy:prod:eu-2:clean": "npm run clear && npm install && npm run build && npm run synth:prod:eu-2 && npm run deploy:prod:eu-2",
    "deploy:prod:us-1": "ENV=prod:us-1 cdk deploy prod-tarpon  --require-approval=never && ENV=prod:us-1 cdk deploy prod-tarpon-alarms --require-approval=never",
    "deploy:prod:us-1:clean": "npm run clear && npm install && npm run build && npm run synth:prod:us-1 && npm run deploy:prod:us-1",
    "deploy:pipeline": "cdk deploy tarpon-pipeline --profile=AWSAdministratorAccess-073830519512",
    "deploy:pipeline:clean": "export ENV=deploy && npm run aws-sso-login:deploy && npm run synth:pipeline && npm run deploy:pipeline",
    "deploy:pipeline-test:clean": "export ENV=deploy-test && npm run aws-sso-login:deploy && npm run synth:pipeline && npm run deploy:pipeline",
    "test": "jest --forceExit",
    "test:silent": "npm run test -- --silent",
    "test:ci": "EXEC_SOURCE=CI npm run test -- --silent --ci --runInBand",
    "test:watch": "npm run test -- --watch",
    "format": "prettier --write . && npm run openapi:format",
    "format:check": "prettier --check .",
    "lint": "eslint .",
    "tsc": "tsc --noEmit",
    "lint:fix": "eslint --fix .",
    "lint-staged": "lint-staged",
    "generate-local-data": "ts-node ./init_local_db/all.ts",
    "openapi:build": "scripts/openapi/openapi_generate_sdk.ts",
    "openapi:format": "scripts/openapi/openapi_format.js && prettier --write lib/openapi/**/*.yaml",
    "openapi:prepare": "npm run openapi:format && scripts/openapi/openapi_prepare.js",
    "openapi:publish": "npm run openapi:prepare && scripts/openapi/openapi_publish.js",
    "openapi:augment": "lib/openapi/openapi-public-augmentor.ts && lib/openapi/openapi-public-management-augmentor.ts && lib/openapi/openapi-public-device-data-augmentor.ts && lib/openapi/openapi-internal-augmentor.ts",
    "start-local-api": "ENV=local ts-node-dev $([ \"$TRANSPILE_ONLY\" = \"true\" ] && echo '--transpile-only') -r tsconfig-paths/register local-api-server.ts",
    "recreate-local-ddb": "npm run delete-local-ddb --table=$npm_config_table; npm run create-local-ddb --table=$npm_config_table",
    "create-local-ddb": "aws dynamodb create-table --endpoint-url http://localhost:8000 --table-name $npm_config_table --attribute-definitions AttributeName=PartitionKeyID,AttributeType=S AttributeName=SortKeyID,AttributeType=S --key-schema AttributeName=PartitionKeyID,KeyType=HASH AttributeName=SortKeyID,KeyType=RANGE --provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1 --region=us-east-2",
    "delete-local-ddb": "aws dynamodb delete-table --endpoint-url http://localhost:8000 --table-name $npm_config_table",
    "dev:databases": "docker-compose up",
    "dev:databases:init": "npm run generate-local-data",
    "dev:databases:reset": "rm -rf .local-mongodb-data/ .local-dynamodb-data/",
    "dev:api": "npm run start-local-api",
    "dev:api:public": "API=PUBLIC npm run start-local-api",
    "dev:api:public-management": "API=PUBLIC_MANAGEMENT npm run start-local-api",
    "dev:api:public-device-data": "API=PUBLIC_DEVICE_DATA npm run start-local-api",
    "dev:api:console": "API=CONSOLE npm run start-local-api",
    "dev": "ENV=local npm run parallel dev:databases dev:api",
    "prepare": "husky install",
    "_migrator": "ts-node --transpileOnly scripts/migrations/migrator.ts",
    "migration:pre:create": "MIGRATION_TYPE=PRE_DEPLOYMENT ENV=local npm run _migrator create -- --name $npm_config_name.ts --allow-extension .ts",
    "migration:pre:up": "MIGRATION_TYPE=PRE_DEPLOYMENT npm run _migrator up",
    "migration:pre:down": "MIGRATION_TYPE=PRE_DEPLOYMENT npm run _migrator down",
    "migration:post:create": "MIGRATION_TYPE=POST_DEPLOYMENT ENV=local npm run _migrator create -- --name $npm_config_name.ts --allow-extension .ts",
    "migration:post:up": "MIGRATION_TYPE=POST_DEPLOYMENT npm run _migrator up",
    "migration:post:down": "MIGRATION_TYPE=POST_DEPLOYMENT npm run _migrator down",
    "postman:integration:sandbox": "ENV=sandbox ts-node --transpileOnly scripts/run-integration-tests.ts",
    "postman:integration:dev": "ENV=dev ts-node --transpileOnly scripts/run-integration-tests.ts",
    "postman:sync:collection": "ENV=local ts-node --transpileOnly scripts/sync-postman-collection.ts"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/flagright/tarpon.git"
  },
  "author": "Flagright Data Technologies Inc.",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/flagright/tarpon/issues"
  },
  "homepage": "https://github.com/flagright/tarpon#readme",
  "devDependencies": {
    "@aws-sdk/credential-providers": "^3.245.0",
    "@openapitools/openapi-generator-cli": "^2.5.1",
    "@sentry/cli": "^2.8.1",
    "@slack/types": "^2.7.0",
    "@stoplight/cli": "^5.0.722",
    "@tsconfig/node16": "^1.0.1",
    "@types/ajv": "^1.0.0",
    "@types/auth0": "^2.34.16",
    "@types/aws-lambda": "^8.10.89",
    "@types/command-line-args": "^5.2.0",
    "@types/ejs": "^3.1.1",
    "@types/fast-levenshtein": "^0.0.2",
    "@types/http-errors": "^1.8.2",
    "@types/jest": "^28.1.8",
    "@types/js-yaml": "^4.0.5",
    "@types/jsonwebtoken": "^8.5.8",
    "@types/lodash": "^4.14.180",
    "@types/mkdirp": "^1.0.2",
    "@types/node": "^17.0.8",
    "@types/node-fetch": "^2.6.2",
    "@types/uuid": "^8.3.4",
    "@typescript-eslint/eslint-plugin": "^5.9.1",
    "@typescript-eslint/parser": "^5.9.1",
    "aws-cdk": "^2.35.0",
    "aws-cdk-lib": "^2.35.0",
    "aws-sdk": "^2.1062.0",
    "aws-sdk-client-mock": "^2.0.1",
    "aws-sdk-client-mock-jest": "^2.0.1",
    "body-parser": "^1.20.0",
    "builtin-modules": "^3.3.0",
    "chalk": "^4.1.2",
    "command-line-args": "^5.2.0",
    "commander": "^9.2.0",
    "constructs": "^10.1.244",
    "dotenv": "^16.0.1",
    "enhanced-resolve": "^5.10.0",
    "esbuild": "^0.15.13",
    "eslint": "^8.6.0",
    "eslint-config-prettier": "^8.3.0",
    "eslint-plugin-import": "^2.25.4",
    "eslint-plugin-prettier": "^4.0.0",
    "express": "^4.18.1",
    "express-openapi-validator": "^4.13.8",
    "fs-extra": "^10.1.0",
    "get-port": "^5.1.1",
    "husky": "^8.0.1",
    "jest": "^28.1.3",
    "js-yaml": "^4.1.0",
    "lint-staged": "^13.0.3",
    "mkdirp": "^1.0.4",
    "mock-aws-s3": "^4.0.2",
    "npm-run-all": "^4.1.5",
    "prettier": "^2.5.1",
    "simple-git": "^3.13.0",
    "source-map-support": "^0.5.21",
    "swagger-routes-express": "^3.3.2",
    "ts-jest": "^28.0.8",
    "ts-loader": "^9.2.6",
    "ts-node": "^10.9.1",
    "ts-node-dev": "^2.0.0",
    "tsconfig-paths": "^4.1.2",
    "typescript": "^4.5.5",
    "yaml": "^2.1.1"
  },
  "dependencies": {
    "@aws-sdk/client-api-gateway": "^3.262.0",
    "@aws-sdk/client-cloudwatch": "^3.183.0",
    "@aws-sdk/client-dynamodb": "^3.183.0",
    "@aws-sdk/client-secrets-manager": "^3.145.0",
    "@aws-sdk/client-sfn": "^3.229.0",
    "@aws-sdk/client-sns": "^3.202.0",
    "@aws-sdk/client-sqs": "^3.145.0",
    "@aws-sdk/lib-dynamodb": "^3.183.0",
    "@aws-sdk/util-arn-parser": "^3.47.1",
    "@fast-csv/format": "^4.3.5",
    "@fast-csv/parse": "^4.3.6",
    "@sentry/integrations": "^7.7.0",
    "@sentry/serverless": "^7.7.0",
    "@slack/web-api": "^6.7.2",
    "@slack/webhook": "^6.1.0",
    "@types/flat": "^5.0.2",
    "@types/newman": "^5.3.1",
    "ajv": "8.11.0",
    "auth0": "^2.40.0",
    "aws-xray-sdk-core": "^3.3.8",
    "base-x": "^3.0.9",
    "cdktf": "^0.15.3",
    "cdktf-cli": "^0.15.3",
    "dayjs": "^1.10.7",
    "deep-object-diff": "^1.1.7",
    "ejs": "^3.1.8",
    "fast-geoip": "^1.1.67",
    "fast-levenshtein": "^3.0.0",
    "flat": "^5.0.2",
    "fp-ts": "^2.11.8",
    "handlebars": "^4.7.7",
    "http-errors": "^2.0.0",
    "ibankit": "^1.5.0",
    "io-ts": "^2.2.16",
    "io-ts-reporters": "^2.0.1",
    "jsonwebtoken": "^8.5.1",
    "jwks-rsa": "^2.0.5",
    "lodash": "^4.17.21",
    "mongodb": "^4.4.0",
    "nanoid": "^3.3.4",
    "newman": "^5.3.2",
    "node-fetch": "^2.6.7",
    "postman-collection": "^4.1.6",
    "timeout-signal": "^1.1.0",
    "umzug": "^3.2.1",
    "unique-names-generator": "^4.6.0",
    "uuid": "^8.3.2",
    "winston": "^3.8.1"
  },
  "lint-staged": {
    "**/*.{js,ts}": [
      "prettier --write",
      "eslint --fix"
    ],
    "**/*.yaml": [
      "npm run openapi:format"
    ],
    "!(**/*.{js,ts,yaml})": [
      "prettier --write"
    ]
  }
}
