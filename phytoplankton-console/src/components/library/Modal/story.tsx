import React, { useState } from 'react';
import Modal, { MODAL_WIDTHS, ModalWidth } from './index';
import { UseCase } from '@/pages/storybook/components';
import Button from '@/components/library/Button';
import Select from '@/components/library/Select';
import Label from '@/components/library/Label';
import TextInput from '@/components/library/TextInput';
import Confirm from '@/components/utils/Confirm';
import { init, loading, success } from '@/utils/asyncResource';
import Checkbox from '@/components/library/Checkbox';

function Case1(): JSX.Element {
  const [isVisible, setVisible] = useState<boolean>(false);
  const [width, setWidth] = useState<ModalWidth | undefined>('S');
  const [text, setText] = useState<string | undefined>('Short text');
  return (
    <>
      <UseCase title="Different width modes">
        <div
          style={{
            gap: '20px',
            display: 'grid',
            gridAutoFlow: 'column',
            gridAutoColumns: '100px',
          }}
        >
          <Label label={'Width'}>
            <Select<ModalWidth | undefined>
              placeholder=""
              options={[
                { value: undefined, label: 'Default' },
                ...MODAL_WIDTHS.map((width) => ({ value: width, label: width })),
              ]}
              value={width}
              onChange={setWidth}
            />
          </Label>
          <Label label={'Content'}>
            <Select
              placeholder=""
              options={[
                {
                  value: 'Test',
                  label: 'Short text',
                },
                {
                  value:
                    'ReactJS is a great choice for building modal components. It is a powerful and flexible JavaScript library that allows developers to create user interfaces with ease. ReactJS is a component-based library, which means that developers can create components that can be reused and shared across different projects. This makes it easier to maintain and update components, as well as to create new ones. ReactJS also provides a great way to create modal components. It allows developers to create components that can be used to display information in a modal window. This makes it easier to display information in a way that is both visually appealing and easy to understand. Additionally, ReactJS provides a way to create components that can be used to handle user interactions, such as clicking on a button or entering text into a field. This makes it easier to create interactive modal components that can be used to provide users with more information or to take action. ReactJS also provides a great way to create components that are responsive and can be used on different devices. This makes it easier to create components that can be used on both desktop and mobile devices. Additionally, ReactJS provides a way to create components that can be used to create animations, which can be used to make modal components more visually appealing. Overall, ReactJS is a great choice for building modal components. It provides a powerful and flexible way to create components that can be used to display information in a modal window, handle user interactions, and create animations. This makes it easier to create components that are both visually appealing and easy to understand. This essay was generated by GPT.',
                  label: 'Long text',
                },
              ]}
              value={text}
              onChange={setText}
            />
          </Label>
        </div>
        <Button
          onClick={() => {
            setVisible(true);
          }}
        >
          Show modal
        </Button>
        <Modal
          title={'Test modal'}
          width={width}
          isOpen={isVisible}
          onCancel={() => {
            setVisible(false);
          }}
        >
          <div>{text}</div>
        </Modal>
      </UseCase>
    </>
  );
}

function Case2(): JSX.Element {
  return (
    <>
      <UseCase
        title="Custom footer"
        initialState={{
          cancelText: 'Do not do this',
          okText: 'Do this',
        }}
      >
        {([state, setState]) => (
          <>
            <div
              style={{
                gap: '20px',
                display: 'grid',
                gridAutoFlow: 'column',
                gridAutoColumns: '100px',
              }}
            >
              <Label label={'OK text'}>
                <TextInput
                  value={state.okText}
                  onChange={(okText) => setState((prevState) => ({ ...prevState, okText }))}
                />
              </Label>
              <Label label={'Cancel text'}>
                <TextInput
                  value={state.cancelText}
                  onChange={(cancelText) => setState((prevState) => ({ ...prevState, cancelText }))}
                />
              </Label>
            </div>
            <Button
              onClick={() => {
                setState((prevState) => ({ ...prevState, isVisible: true }));
              }}
            >
              Show modal
            </Button>
            <Modal
              title={'Test modal'}
              isOpen={state.isVisible}
              okText={state.okText}
              cancelText={state.cancelText}
              onCancel={() => {
                setState((prevState) => ({ ...prevState, isVisible: false }));
              }}
            >
              <div>
                ReactJS is a great choice for building modal components. It is a powerful and
                flexible JavaScript library that allows developers to create user interfaces with
                ease.{' '}
              </div>
            </Modal>
          </>
        )}
      </UseCase>
    </>
  );
}

function Case3(): JSX.Element {
  const [isVisible, setVisible] = useState<boolean>(false);
  const [width, setWidth] = useState<ModalWidth | undefined>('S');
  const [text, setText] = useState<string | undefined>('Short text');
  return (
    <>
      <UseCase title="With tabs">
        <div
          style={{
            gap: '20px',
            display: 'grid',
            gridAutoFlow: 'column',
            gridAutoColumns: '100px',
          }}
        >
          <Label label={'Width'}>
            <Select<ModalWidth | undefined>
              placeholder=""
              options={[
                { value: undefined, label: 'Default' },
                ...MODAL_WIDTHS.map((width) => ({ value: width, label: width })),
              ]}
              value={width}
              onChange={setWidth}
            />
          </Label>
          <Label label={'Content'}>
            <Select
              placeholder=""
              options={[
                {
                  value: 'Test',
                  label: 'Short text',
                },
                {
                  value:
                    'ReactJS is a great choice for building modal components. It is a powerful and flexible JavaScript library that allows developers to create user interfaces with ease. ReactJS is a component-based library, which means that developers can create components that can be reused and shared across different projects. This makes it easier to maintain and update components, as well as to create new ones. ReactJS also provides a great way to create modal components. It allows developers to create components that can be used to display information in a modal window. This makes it easier to display information in a way that is both visually appealing and easy to understand. Additionally, ReactJS provides a way to create components that can be used to handle user interactions, such as clicking on a button or entering text into a field. This makes it easier to create interactive modal components that can be used to provide users with more information or to take action. ReactJS also provides a great way to create components that are responsive and can be used on different devices. This makes it easier to create components that can be used on both desktop and mobile devices. Additionally, ReactJS provides a way to create components that can be used to create animations, which can be used to make modal components more visually appealing. Overall, ReactJS is a great choice for building modal components. It provides a powerful and flexible way to create components that can be used to display information in a modal window, handle user interactions, and create animations. This makes it easier to create components that are both visually appealing and easy to understand. This essay was generated by GPT.',
                  label: 'Long text',
                },
              ]}
              value={text}
              onChange={setText}
            />
          </Label>
        </div>
        <Button
          onClick={() => {
            setVisible(true);
          }}
        >
          Show modal
        </Button>
        <Modal
          title={'Test modal'}
          width={width}
          isOpen={isVisible}
          onCancel={() => {
            setVisible(false);
          }}
          tabs={[
            {
              tab: 'First tab',
              key: 'first',
              children: (
                <>
                  <h4>First tab header</h4>
                  {text}
                </>
              ),
            },
            {
              tab: 'Second tab',
              key: 'second',
              children: (
                <>
                  <h4>Second tab header</h4>
                  {text}
                </>
              ),
            },
          ]}
        />
      </UseCase>
    </>
  );
}

export default function (): JSX.Element {
  return (
    <>
      <Case1 />
      <Case2 />
      <Case3 />
      <UseCase
        title="Confirm modal"
        initialState={{
          isDanger: false,
        }}
      >
        {([state, setState]) => (
          <>
            <div
              style={{
                gap: '20px',
                display: 'grid',
                gridAutoFlow: 'column',
                gridAutoColumns: '100px',
              }}
            >
              <Label label={'Is danger'} position="RIGHT">
                <Checkbox
                  value={state.isDanger}
                  onChange={(isDanger) => {
                    setState((prevState) => ({ ...prevState, isDanger }));
                  }}
                />
              </Label>
            </div>
            <Confirm
              isDanger={state.isDanger}
              title={'Title example'}
              text={'Text example'}
              onConfirm={() => {
                console.log('confirm');
              }}
            >
              {(props) => <Button onClick={props.onClick}>Show modal</Button>}
            </Confirm>
          </>
        )}
      </UseCase>
      <UseCase
        title="Confirm with async resource"
        initialState={{
          isDanger: false,
        }}
      >
        {([state, setState]) => (
          <>
            <div
              style={{
                gap: '20px',
                display: 'grid',
                gridAutoFlow: 'column',
                gridAutoColumns: '100px',
              }}
            >
              <Label label={'Is danger'} position="RIGHT">
                <Checkbox
                  value={state.isDanger}
                  onChange={(isDanger) => {
                    setState((prevState) => ({ ...prevState, isDanger }));
                  }}
                />
              </Label>
            </div>
            <Confirm
              isDanger={state.isDanger}
              title={'Title example'}
              text={'Text example'}
              res={state.res ?? init()}
              onConfirm={() => {
                setState((prevState) => ({
                  ...prevState,
                  res: loading(),
                }));
                setTimeout(() => {
                  setState((prevState) => ({
                    ...prevState,
                    res: success(null),
                  }));
                }, 3000);
              }}
              onSuccess={() => {
                console.log('Done!');
              }}
            >
              {(props) => <Button onClick={props.onClick}>Show modal</Button>}
            </Confirm>
          </>
        )}
      </UseCase>
    </>
  );
}
