{
  "info": {
    "_postman_id": "9716caee-9579-4961-8254-66e40d894d09",
    "name": "Public API Tests Collection",
    "description": "**The subesquent folders are added in a specific order please dont change it else it may create some issues with the tests**",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "updatedAt": "2023-08-15T14:59:10.000Z",
    "uid": "25627167-9716caee-9579-4961-8254-66e40d894d09"
  },
  "item": [
    {
      "name": "Transactions",
      "item": [
        {
          "name": "200 Response",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fffaa471-02b5-4638-a837-8ab2b0f05415",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "",
                  "pm.test(\"Test transactionId is Same\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var inputJson = JSON.parse(pm.request.body.raw)",
                  "    const inputTransactionId = inputJson.transactionId",
                  "    pm.expect(jsonData.transactionId).eq(inputTransactionId)",
                  "});",
                  "",
                  "pm.test(\"Have executed Rules\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"executedRules\");",
                  "});",
                  "",
                  "pm.test(\"Have hitRules Rules\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"hitRules\")",
                  "});",
                  "",
                  "pm.test(\"Have atleast one executedRules\", function () {",
                  "    var jsonData = pm.response.json()",
                  "    const executedRules = jsonData.executedRules.length > 0",
                  "    pm.expect(executedRules).eq(true)",
                  "})"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "6fedbd7f-ffe3-4ae3-bd86-3f60479c151b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"{{transactionId}}\",\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": {{timestamp}},\n  \"originAmountDetails\": {\n    \"country\": \"IN\",\n    \"transactionAmount\": 100044440,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": 10033.34,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"GENERIC_BANK_ACCOUNT\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "25627167-6fedbd7f-ffe3-4ae3-bd86-3f60479c151b"
        },
        {
          "name": "No Api Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a15cbae7-db97-48e6-acc6-b39ebcb98f1d",
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Should Give Unauthorized\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Unauthorized\");",
                  "});",
                  "",
                  "pm.test(\"Content-Type is present\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\");",
                  "});",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "84e331a0-293f-40cc-8d65-07841c077b30",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"{{transactionId}}\",\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": {{timestamp}},\n  \"originAmountDetails\": {\n    \"country\": \"IN\",\n    \"transactionAmount\": 100044440,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": 10033.34,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"GENERIC_BANK_ACCOUNT\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "25627167-84e331a0-293f-40cc-8d65-07841c077b30"
        },
        {
          "name": "Incorrect Domain",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ebc60103-b7c5-464a-8902-412ea7bbe41f",
                "exec": [
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test(\"Your test name\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "2b644424-cb79-4402-a69e-14461c7a9f32",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"{{transactionId}}\",\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": {{timestamp}},\n  \"originAmountDetails\": {\n    \"country\": \"IN\",\n    \"transactionAmount\": 100044440,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": 10033.34,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"GENERIC_BANK_ACCOUNT\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{incorrectDomain}}/transactions",
              "host": ["{{incorrectDomain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "25627167-2b644424-cb79-4402-a69e-14461c7a9f32"
        },
        {
          "name": "Incorrect API Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "159b0e9e-3b12-4184-b085-44a7f469940e",
                "exec": [
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test(\"Your test name\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.Message).to.eql(\"User is not authorized to access this resource with an explicit deny\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "ff18ef6c-e65d-49e8-b465-c9f22d4372b5",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}1"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"{{transactionId}}\",\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": {{timestamp}},\n  \"originAmountDetails\": {\n    \"country\": \"IN\",\n    \"transactionAmount\": 100044440,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": 10033.34,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"GENERIC_BANK_ACCOUNT\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "25627167-ff18ef6c-e65d-49e8-b465-c9f22d4372b5"
        },
        {
          "name": "No Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "706293a9-0b7f-42b2-a36d-540c9b9465c4",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Invalid Request Body Test\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"timestamp\\\",\\\"transactionId\\\",\\\"type\\\"])]\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "5d13b91c-b7b8-4b7d-a858-570927f29725",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "25627167-5d13b91c-b7b8-4b7d-a858-570927f29725"
        },
        {
          "name": "Transaction Id not Given",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9444f79e-270f-4ab1-802a-10f3cf211e49",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Invalid Request Body Test\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"transactionId\\\"])]\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "04a80b34-8794-4b93-8550-362b8f2faa90",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": {{timestamp}},\n  \"originAmountDetails\": {\n    \"country\": \"IN\",\n    \"transactionAmount\": 100044440,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": 10033.34,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"GENERIC_BANK_ACCOUNT\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "25627167-04a80b34-8794-4b93-8550-362b8f2faa90"
        },
        {
          "name": "Incorrect Type Provided in Transaction Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "22ae2cf8-e523-4397-8bf5-d6481c3888a8",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Invalid Request Body Test\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance type (boolean) does not match any allowed primitive type (allowed: [\\\"string\\\"])]\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "64526655-62c9-4f06-9f61-644801fea758",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": true,\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": {{timestamp}},\n  \"originAmountDetails\": {\n    \"country\": \"IN\",\n    \"transactionAmount\": 100044440,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": 10033.34,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"GENERIC_BANK_ACCOUNT\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "25627167-64526655-62c9-4f06-9f61-644801fea758"
        },
        {
          "name": "Incorrect Timestamp",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e223d643-d2c1-4996-853e-aea1569ba3c6",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Invalid Request Body Test\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[numeric instance is lower than the required minimum (minimum: 1262300400000, found: 1)]\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "92ca0a77-3e54-407e-973e-fa6c1e1bc4c7",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"{{transactionId}}\",\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": 1,\n  \"originAmountDetails\": {\n    \"country\": \"IN\",\n    \"transactionAmount\": 100044440,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": 10033.34,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"GENERIC_BANK_ACCOUNT\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "25627167-92ca0a77-3e54-407e-973e-fa6c1e1bc4c7"
        },
        {
          "name": "Duplicate Transaction Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d92d9d32-6a26-4810-b454-e056d1d3e1b5",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Test transactionId is Same\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var inputJson = JSON.parse(pm.request.body.raw)",
                  "    const inputTransactionId = inputJson.transactionId",
                  "    pm.expect(jsonData.transactionId).eq(inputTransactionId)",
                  "});",
                  "",
                  "pm.test(\"Test Message of Same transaction Id\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"The provided transactionId already exists. No rules were run. If you want to update the attributes of this transaction, please use transaction events instead.\");",
                  "});",
                  "",
                  "pm.test(\"Have executed Rules\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"executedRules\");",
                  "});",
                  "",
                  "pm.test(\"Have hitRules Rules\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"hitRules\")",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "ca535433-f104-450f-b5bc-49786840308e",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"{{transactionId}}\",\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": {{timestamp}},\n  \"originAmountDetails\": {\n    \"country\": \"IN\",\n    \"transactionAmount\": 100044440,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": 10033.34,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"GENERIC_BANK_ACCOUNT\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "25627167-ca535433-f104-450f-b5bc-49786840308e"
        },
        {
          "name": "Invalid Method",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8f2ae278-5446-417e-aeac-85066f5deb5b",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Invalid Request Body Test\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance failed to match exactly one schema (matched 0 out of 9)]\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "d6a87ff1-0228-4edc-bcb9-0b25a2010317",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"{{transactionId}}\",\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": {{timestamp}},\n  \"originAmountDetails\": {\n    \"country\": \"IN\",\n    \"transactionAmount\": 100044440,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": 10033.34,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"AMAN\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "25627167-d6a87ff1-0228-4edc-bcb9-0b25a2010317"
        },
        {
          "name": "Invalid Country Code Given",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3cea484e-6134-46ea-8fab-00bcc2190102",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Invalid Request Body Test\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance value (\\\"AB\\\") not found in enum (possible values: [\\\"AF\\\",\\\"AL\\\",\\\"DZ\\\",\\\"AS\\\",\\\"AD\\\",\\\"AO\\\",\\\"AI\\\",\\\"AQ\\\",\\\"AG\\\",\\\"AR\\\",\\\"AM\\\",\\\"AW\\\",\\\"AU\\\",\\\"AT\\\",\\\"AZ\\\",\\\"BS\\\",\\\"BH\\\",\\\"BD\\\",\\\"BB\\\",\\\"BY\\\",\\\"BE\\\",\\\"BZ\\\",\\\"BJ\\\",\\\"BM\\\",\\\"BT\\\",\\\"BO\\\",\\\"BQ\\\",\\\"BA\\\",\\\"BW\\\",\\\"BV\\\",\\\"BR\\\",\\\"IO\\\",\\\"BN\\\",\\\"BG\\\",\\\"BF\\\",\\\"BI\\\",\\\"CV\\\",\\\"KH\\\",\\\"CM\\\",\\\"CA\\\",\\\"KY\\\",\\\"CF\\\",\\\"TD\\\",\\\"CL\\\",\\\"CN\\\",\\\"CX\\\",\\\"CC\\\",\\\"CO\\\",\\\"KM\\\",\\\"CD\\\",\\\"CG\\\",\\\"CK\\\",\\\"CR\\\",\\\"HR\\\",\\\"CU\\\",\\\"CW\\\",\\\"CY\\\",\\\"CZ\\\",\\\"CI\\\",\\\"DK\\\",\\\"DJ\\\",\\\"DM\\\",\\\"DO\\\",\\\"EC\\\",\\\"EG\\\",\\\"SV\\\",\\\"GQ\\\",\\\"ER\\\",\\\"EE\\\",\\\"SZ\\\",\\\"ET\\\",\\\"FK\\\",\\\"FO\\\",\\\"FJ\\\",\\\"FI\\\",\\\"FR\\\",\\\"GF\\\",\\\"PF\\\",\\\"TF\\\",\\\"GA\\\",\\\"GM\\\",\\\"GE\\\",\\\"DE\\\",\\\"GH\\\",\\\"GI\\\",\\\"GR\\\",\\\"GL\\\",\\\"GD\\\",\\\"GP\\\",\\\"GU\\\",\\\"GT\\\",\\\"GG\\\",\\\"GN\\\",\\\"GW\\\",\\\"GY\\\",\\\"HT\\\",\\\"HM\\\",\\\"VA\\\",\\\"HN\\\",\\\"HK\\\",\\\"HU\\\",\\\"IS\\\",\\\"IN\\\",\\\"ID\\\",\\\"IR\\\",\\\"IQ\\\",\\\"IE\\\",\\\"IM\\\",\\\"IL\\\",\\\"IT\\\",\\\"JM\\\",\\\"JP\\\",\\\"JE\\\",\\\"JO\\\",\\\"KZ\\\",\\\"KE\\\",\\\"KI\\\",\\\"KP\\\",\\\"KR\\\",\\\"KW\\\",\\\"KG\\\",\\\"LA\\\",\\\"LV\\\",\\\"LB\\\",\\\"LS\\\",\\\"LR\\\",\\\"LY\\\",\\\"LI\\\",\\\"LT\\\",\\\"LU\\\",\\\"MO\\\",\\\"MG\\\",\\\"MW\\\",\\\"MY\\\",\\\"MV\\\",\\\"ML\\\",\\\"MT\\\",\\\"MH\\\",\\\"MQ\\\",\\\"MR\\\",\\\"MU\\\",\\\"YT\\\",\\\"MX\\\",\\\"FM\\\",\\\"MD\\\",\\\"MC\\\",\\\"MN\\\",\\\"ME\\\",\\\"MS\\\",\\\"MA\\\",\\\"MZ\\\",\\\"MM\\\",\\\"NA\\\",\\\"NR\\\",\\\"NP\\\",\\\"NL\\\",\\\"NC\\\",\\\"NZ\\\",\\\"NI\\\",\\\"NE\\\",\\\"NG\\\",\\\"NU\\\",\\\"NF\\\",\\\"MK\\\",\\\"MP\\\",\\\"NO\\\",\\\"OM\\\",\\\"PK\\\",\\\"PW\\\",\\\"PS\\\",\\\"PA\\\",\\\"PG\\\",\\\"PY\\\",\\\"PE\\\",\\\"PH\\\",\\\"PN\\\",\\\"PL\\\",\\\"PT\\\",\\\"PR\\\",\\\"QA\\\",\\\"RO\\\",\\\"RU\\\",\\\"RW\\\",\\\"RE\\\",\\\"BL\\\",\\\"SH\\\",\\\"KN\\\",\\\"LC\\\",\\\"MF\\\",\\\"PM\\\",\\\"VC\\\",\\\"WS\\\",\\\"SM\\\",\\\"ST\\\",\\\"SA\\\",\\\"SN\\\",\\\"RS\\\",\\\"SC\\\",\\\"SL\\\",\\\"SG\\\",\\\"SX\\\",\\\"SK\\\",\\\"SI\\\",\\\"SB\\\",\\\"SO\\\",\\\"ZA\\\",\\\"GS\\\",\\\"SS\\\",\\\"ES\\\",\\\"LK\\\",\\\"SD\\\",\\\"SR\\\",\\\"SJ\\\",\\\"SE\\\",\\\"CH\\\",\\\"SY\\\",\\\"TW\\\",\\\"TJ\\\",\\\"TZ\\\",\\\"TH\\\",\\\"TL\\\",\\\"TG\\\",\\\"TK\\\",\\\"TO\\\",\\\"TT\\\",\\\"TN\\\",\\\"TM\\\",\\\"TC\\\",\\\"TV\\\",\\\"TR\\\",\\\"UG\\\",\\\"UA\\\",\\\"AE\\\",\\\"GB\\\",\\\"UM\\\",\\\"US\\\",\\\"UY\\\",\\\"UZ\\\",\\\"VU\\\",\\\"VE\\\",\\\"VN\\\",\\\"VG\\\",\\\"VI\\\",\\\"WF\\\",\\\"EH\\\",\\\"YE\\\",\\\"ZM\\\",\\\"ZW\\\",\\\"AX\\\",\\\"N/A\\\"])]\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "a431d566-665c-4a8c-a68f-0db899d29a50",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"{{transactionId}}\",\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": {{timestamp}},\n  \"originAmountDetails\": {\n    \"country\": \"AB\",\n    \"transactionAmount\": 100044440,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": 10033.34,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"GENERIC_BANK_ACCOUNT\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "25627167-a431d566-665c-4a8c-a68f-0db899d29a50"
        },
        {
          "name": "Only required fields provided",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4b883f29-b5bf-471a-92f8-c1bee4a15534",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "",
                  "pm.test(\"Test transactionId is Same\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var inputJson = JSON.parse(pm.request.body.raw)",
                  "    const inputTransactionId = inputJson.transactionId",
                  "    pm.expect(jsonData.transactionId).eq(inputTransactionId)",
                  "});",
                  "",
                  "pm.test(\"Have executed Rules\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"executedRules\");",
                  "});",
                  "",
                  "pm.test(\"Have hitRules Rules\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"hitRules\")",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "ef2d01fe-5fe0-4a8d-9001-3837a9769534",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"{{transactionId}}-12\",\n  \"timestamp\": {{timestamp}},\n  \"type\": \"TRANSFER\"\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "25627167-ef2d01fe-5fe0-4a8d-9001-3837a9769534"
        },
        {
          "name": "Amount Provided as String",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "911ba6fe-3843-49a1-9a3b-e23fef172aaa",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Invalid Request Body Test\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance type (string) does not match any allowed primitive type (allowed: [\\\"integer\\\",\\\"number\\\"])]\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "af2c28ba-5d5e-4947-8ffa-6201f19bf517",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"{{transactionId}}\",\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": {{timestamp}},\n  \"originAmountDetails\": {\n    \"country\": \"IN\",\n    \"transactionAmount\": \"100044440\",\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": \"10033.34\",\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"GENERIC_BANK_ACCOUNT\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "25627167-af2c28ba-5d5e-4947-8ffa-6201f19bf517"
        }
      ],
      "id": "8937f833-3600-48bb-ab1e-dfc66d9be09f",
      "uid": "25627167-8937f833-3600-48bb-ab1e-dfc66d9be09f"
    },
    {
      "name": "Consumer Users",
      "item": [
        {
          "name": "Create Consumer User 200",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "16f463e6-f465-4e78-b38f-c1f633b29744",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Your test name\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var inputJson = JSON.parse(pm.request.body.raw)",
                  "    const userId = inputJson.userId",
                  "    ",
                  "    pm.expect(jsonData.userId).to.eql(userId);",
                  "});",
                  "",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"userId\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "5ba5dae1-ee1e-491f-b7ed-14c6c3f31b7a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"CONSUMER\",\n    \"createdTimestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}\",\n    \"reasonForAccountOpening\": [\n        \"Payment\",\n        \"Deposits\"\n    ],\n    \"userDetails\": {\n        \"name\": {\n            \"firstName\": \"Post Man\",\n            \"lastName\": \"Dugar\"\n        },\n        \"dateOfBirth\": \"2007-01-15\",\n        \"countryOfResidence\": \"US\",\n        \"countryOfNationality\": \"RU\"\n    },\n    \"legalDocuments\": [\n        {\n            \"documentType\": \"passport\",\n            \"documentNumber\": \"CB33GME6\",\n            \"documentIssuedDate\": 1639939034,\n            \"documentExpirationDate\": 1839939034,\n            \"documentIssuedCountry\": \"US\"\n        }\n    ],\n    \"tags\": [\n        {\n            \"key\": \"hello\",\n            \"value\": \"wallet\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/consumer/users",
              "host": ["{{domain}}"],
              "path": ["consumer", "users"]
            }
          },
          "response": [],
          "uid": "25627167-5ba5dae1-ee1e-491f-b7ed-14c6c3f31b7a"
        },
        {
          "name": "Duplicate User Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "22a43a9f-f0ae-4611-bda1-a93991061af6",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Check UserId\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var inputJson = JSON.parse(pm.request.body.raw)",
                  "    const userId = inputJson.userId",
                  "    ",
                  "    pm.expect(jsonData.userId).to.eql(userId);",
                  "});",
                  "",
                  "pm.test(\"Check Message in Duplicate UserId\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"The provided userId already exists. The user attribute updates are not saved. If you want to update the attributes of this user, please use user events instead.\");",
                  "});",
                  "",
                  "",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"userId\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "cdabd361-b90c-4d57-9f87-b3fa5c3a05fa",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"CONSUMER\",\n    \"createdTimestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}\",\n    \"reasonForAccountOpening\": [\n        \"Payment\",\n        \"Deposits\"\n    ],\n    \"userDetails\": {\n        \"name\": {\n            \"firstName\": \"Post Man\",\n            \"lastName\": \"Dugar\"\n        },\n        \"dateOfBirth\": \"2007-01-15\",\n        \"countryOfResidence\": \"US\",\n        \"countryOfNationality\": \"RU\"\n    },\n    \"legalDocuments\": [\n        {\n            \"documentType\": \"passport\",\n            \"documentNumber\": \"CB33GME6\",\n            \"documentIssuedDate\": 1639939034,\n            \"documentExpirationDate\": 1839939034,\n            \"documentIssuedCountry\": \"US\"\n        }\n    ],\n    \"tags\": [\n        {\n            \"key\": \"hello\",\n            \"value\": \"wallet\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/consumer/users",
              "host": ["{{domain}}"],
              "path": ["consumer", "users"]
            }
          },
          "response": [],
          "uid": "25627167-cdabd361-b90c-4d57-9f87-b3fa5c3a05fa"
        },
        {
          "name": "Incorrect Type in First Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bd380847-de41-431c-96f1-a92b0e3dbe1e",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance type (boolean) does not match any allowed primitive type (allowed: [\\\"string\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "692a0c03-c97c-4c18-903a-7ea04e23adda",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"CONSUMER\",\n    \"createdTimestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}-2\",\n    \"reasonForAccountOpening\": [\n        \"Payment\",\n        \"Deposits\"\n    ],\n    \"userDetails\": {\n        \"name\": {\n            \"firstName\": true,\n            \"lastName\": \"Dugar\"\n        },\n        \"dateOfBirth\": \"2007-01-15\",\n        \"countryOfResidence\": \"US\",\n        \"countryOfNationality\": \"RU\"\n    },\n    \"legalDocuments\": [\n        {\n            \"documentType\": \"passport\",\n            \"documentNumber\": \"CB33GME6\",\n            \"documentIssuedDate\": 1639939034,\n            \"documentExpirationDate\": 1839939034,\n            \"documentIssuedCountry\": \"US\"\n        }\n    ],\n    \"tags\": [\n        {\n            \"key\": \"hello\",\n            \"value\": \"wallet\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/consumer/users",
              "host": ["{{domain}}"],
              "path": ["consumer", "users"]
            }
          },
          "response": [],
          "uid": "25627167-692a0c03-c97c-4c18-903a-7ea04e23adda"
        },
        {
          "name": "First Name Not Provided",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "53fd6cb5-9cef-40ce-a5cb-f845a1f17745",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"firstName\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "ebda65a6-b5eb-4e9b-bddf-9165fa2d097c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"CONSUMER\",\n    \"createdTimestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}\",\n    \"reasonForAccountOpening\": [\n        \"Payment\",\n        \"Deposits\"\n    ],\n    \"userDetails\": {\n        \"name\": {\n            \"lastName\": \"Test\"\n        },\n        \"dateOfBirth\": \"2007-01-15\",\n        \"countryOfResidence\": \"US\",\n        \"countryOfNationality\": \"RU\"\n    },\n    \"legalDocuments\": [\n        {\n            \"documentType\": \"passport\",\n            \"documentNumber\": \"CB33GME6\",\n            \"documentIssuedDate\": 1639939034,\n            \"documentExpirationDate\": 1839939034,\n            \"documentIssuedCountry\": \"US\"\n        }\n    ],\n    \"tags\": [\n        {\n            \"key\": \"hello\",\n            \"value\": \"test\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/consumer/users",
              "host": ["{{domain}}"],
              "path": ["consumer", "users"]
            }
          },
          "response": [],
          "uid": "25627167-ebda65a6-b5eb-4e9b-bddf-9165fa2d097c"
        },
        {
          "name": "Value not Provided in Tags",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3a0b3306-575c-4f60-bed4-86c6f88a7958",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"value\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "97c26cbe-a472-409a-9d78-9ee047cdb3e9",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"CONSUMER\",\n    \"createdTimestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}\",\n    \"reasonForAccountOpening\": [\n        \"Payment\",\n        \"Deposits\"\n    ],\n    \"userDetails\": {\n        \"name\": {\n            \"firstName\": \"Post man\",\n            \"lastName\": \"Test\"\n        },\n        \"dateOfBirth\": \"2007-01-15\",\n        \"countryOfResidence\": \"US\",\n        \"countryOfNationality\": \"RU\"\n    },\n    \"legalDocuments\": [\n        {\n            \"documentType\": \"passport\",\n            \"documentNumber\": \"CB33GME6\",\n            \"documentIssuedDate\": 1639939034,\n            \"documentExpirationDate\": 1839939034,\n            \"documentIssuedCountry\": \"US\"\n        }\n    ],\n    \"tags\": [\n        {\n            \"key\": \"hello\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/consumer/users",
              "host": ["{{domain}}"],
              "path": ["consumer", "users"]
            }
          },
          "response": [],
          "uid": "25627167-97c26cbe-a472-409a-9d78-9ee047cdb3e9"
        },
        {
          "name": "User Id not givern",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8d476a39-0afa-4d17-9eed-6abe42bf1a66",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"userId\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "5fb4f1de-3bb8-4df7-a148-5723b3b9f1e3",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"CONSUMER\",\n    \"createdTimestamp\": {{timestamp}},\n    \"reasonForAccountOpening\": [\n        \"Payment\",\n        \"Deposits\"\n    ],\n    \"userDetails\": {\n        \"name\": {\n            \"firstName\": \"Post Man\",\n            \"lastName\": \"Test\"\n        },\n        \"dateOfBirth\": \"2007-01-15\",\n        \"countryOfResidence\": \"US\",\n        \"countryOfNationality\": \"RU\"\n    },\n    \"legalDocuments\": [\n        {\n            \"documentType\": \"passport\",\n            \"documentNumber\": \"CB33GME6\",\n            \"documentIssuedDate\": 1639939034,\n            \"documentExpirationDate\": 1839939034,\n            \"documentIssuedCountry\": \"US\"\n        }\n    ],\n    \"tags\": [\n        {\n            \"key\": \"hello\",\n            \"value\": \"wallet\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/consumer/users",
              "host": ["{{domain}}"],
              "path": ["consumer", "users"]
            }
          },
          "response": [],
          "uid": "25627167-5fb4f1de-3bb8-4df7-a148-5723b3b9f1e3"
        },
        {
          "name": "No Api Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed2245b4-35cd-4662-b3cb-35407709f4df",
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Unauthorized\");",
                  "});",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "0d5ed27b-54fb-4405-a3a3-707034860cba",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"CONSUMER\",\n    \"createdTimestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}\",\n    \"reasonForAccountOpening\": [\n        \"Payment\",\n        \"Deposits\"\n    ],\n    \"userDetails\": {\n        \"name\": {\n            \"firstName\": \"Post Man\",\n            \"lastName\": \"Test\"\n        },\n        \"dateOfBirth\": \"2007-01-15\",\n        \"countryOfResidence\": \"US\",\n        \"countryOfNationality\": \"RU\"\n    },\n    \"legalDocuments\": [\n        {\n            \"documentType\": \"passport\",\n            \"documentNumber\": \"CB33GME6\",\n            \"documentIssuedDate\": 1639939034,\n            \"documentExpirationDate\": 1839939034,\n            \"documentIssuedCountry\": \"US\"\n        }\n    ],\n    \"tags\": [\n        {\n            \"key\": \"hello\",\n            \"value\": \"wallet\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/consumer/users",
              "host": ["{{domain}}"],
              "path": ["consumer", "users"]
            }
          },
          "response": [],
          "uid": "25627167-0d5ed27b-54fb-4405-a3a3-707034860cba"
        },
        {
          "name": "Incorrect-Domain",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "795710cf-883c-403d-a9d5-1006c3fbae7b",
                "exec": [
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "",
                  "pm.test(\"Matches Key\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Matches Text\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "3d771768-aaa7-41a1-b7da-792fdd5dd9d1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"CONSUMER\",\n    \"createdTimestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}\",\n    \"reasonForAccountOpening\": [\n        \"Payment\",\n        \"Deposits\"\n    ],\n    \"userDetails\": {\n        \"name\": {\n            \"firstName\": \"Post Man\",\n            \"lastName\": \"Test\"\n        },\n        \"dateOfBirth\": \"2007-01-15\",\n        \"countryOfResidence\": \"US\",\n        \"countryOfNationality\": \"RU\"\n    },\n    \"legalDocuments\": [\n        {\n            \"documentType\": \"passport\",\n            \"documentNumber\": \"CB33GME6\",\n            \"documentIssuedDate\": 1639939034,\n            \"documentExpirationDate\": 1839939034,\n            \"documentIssuedCountry\": \"US\"\n        }\n    ],\n    \"tags\": [\n        {\n            \"key\": \"hello\",\n            \"value\": \"wallet\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{incorrectDomain}}/consumer/users",
              "host": ["{{incorrectDomain}}"],
              "path": ["consumer", "users"]
            }
          },
          "response": [],
          "uid": "25627167-3d771768-aaa7-41a1-b7da-792fdd5dd9d1"
        },
        {
          "name": "No Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a923c31d-548a-410d-b6a4-b38502f8cf9c",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[Unknown error parsing request body]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "a9c06635-b024-47b2-b398-24dba88428d2",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{domain}}/consumer/users",
              "host": ["{{domain}}"],
              "path": ["consumer", "users"]
            }
          },
          "response": [],
          "uid": "25627167-a9c06635-b024-47b2-b398-24dba88428d2"
        },
        {
          "name": "Empty Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b8bfbb7d-b9c6-42c1-8d86-1adec33ce974",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"createdTimestamp\\\",\\\"userId\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "1cbe831b-dddf-40c3-be47-8c6464dbed32",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{domain}}/consumer/users",
              "host": ["{{domain}}"],
              "path": ["consumer", "users"]
            }
          },
          "response": [],
          "uid": "25627167-1cbe831b-dddf-40c3-be47-8c6464dbed32"
        }
      ],
      "id": "92f2ab6f-52ea-464d-ada7-bbb17a417d6f",
      "uid": "25627167-92f2ab6f-52ea-464d-ada7-bbb17a417d6f"
    },
    {
      "name": "Business Users",
      "item": [
        {
          "name": "Create Business User 200",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ecd4e92d-e6a6-4706-9332-999162d63c40",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Match Business Name\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    const data = JSON.parse(pm.request.body.raw)",
                  "    const businessUserId = data.userId",
                  "    pm.expect(jsonData.userId).to.eql(businessUserId)",
                  "});",
                  "",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"userId\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "cb9b3597-b8e1-4aad-9085-b0780800398b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{businessUserId}}\",\n  \"createdTimestamp\": {{timestamp}},\n  \"legalEntity\": {\n    \"companyGeneralDetails\": {\n      \"legalName\": \"Jameson Breweries\",\n      \"businessIndustry\": [\n        \"Alcohol\", \"Scotch\"\n      ]\n    },\n    \"companyFinancialDetails\": {\n      \"expectedTransactionAmountPerMonth\": {\n        \"amountValue\": 5160000,\n        \"amountCurrency\": \"GBP\"\n      },\n      \"expectedTurnoverPerMonth\": {\n        \"amountValue\": 30000090,\n        \"amountCurrency\": \"GBP\"\n      },\n      \"tags\": [\n        {\n          \"key\": \"averageNumberOfPaymentsPerMonth\",\n          \"value\": \"90\"\n        }\n      ]\n    },\n    \"companyRegistrationDetails\": {\n      \"registrationIdentifier\": \"IN22313\",\n      \"registrationCountry\": \"DK\",\n      \"dateOfRegistration\": \"2022-01-01\",\n      \"taxIdentifier\": \"BDH3N221E\",\n      \"legalEntityType\": \"Pvt Ltd\"\n    },\n    \"contactDetails\": {\n      \"websites\": [\n        \"jamieson.com\"\n      ]\n    }\n  },\n  \"allowedPaymentMethods\": [\n    \"GENERIC_BANK_ACCOUNT\", \"WALLET\", \"CARD\", \"ACH\"\n  ]\n}"
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "25627167-cb9b3597-b8e1-4aad-9085-b0780800398b"
        },
        {
          "name": "Duplicate Business",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "27ff2912-6257-4643-80c0-04987747c738",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Check UserId\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var inputJson = JSON.parse(pm.request.body.raw)",
                  "    const userId = inputJson.userId",
                  "    ",
                  "    pm.expect(jsonData.userId).to.eql(userId);",
                  "});",
                  "",
                  "pm.test(\"Check Message in Duplicate UserId\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"The provided userId already exists. The user attribute updates are not saved. If you want to update the attributes of this user, please use user events instead.\");",
                  "});",
                  "",
                  "",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"userId\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "ab13c4f7-9de7-4e8d-92c7-ebc587578efd",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{businessUserId}}\",\n  \"createdTimestamp\": {{timestamp}},\n  \"legalEntity\": {\n    \"companyGeneralDetails\": {\n      \"legalName\": \"Jameson Breweries\",\n      \"businessIndustry\": [\n        \"Alcohol\", \"Scotch\"\n      ]\n    },\n    \"companyFinancialDetails\": {\n      \"expectedTransactionAmountPerMonth\": {\n        \"amountValue\": 5160000,\n        \"amountCurrency\": \"GBP\"\n      },\n      \"expectedTurnoverPerMonth\": {\n        \"amountValue\": 30000090,\n        \"amountCurrency\": \"GBP\"\n      },\n      \"tags\": [\n        {\n          \"key\": \"averageNumberOfPaymentsPerMonth\",\n          \"value\": \"90\"\n        }\n      ]\n    },\n    \"companyRegistrationDetails\": {\n      \"registrationIdentifier\": \"IN22313\",\n      \"registrationCountry\": \"DK\",\n      \"dateOfRegistration\": \"2022-01-01\",\n      \"taxIdentifier\": \"BDH3N221E\",\n      \"legalEntityType\": \"Pvt Ltd\"\n    },\n    \"contactDetails\": {\n      \"websites\": [\n        \"jamieson.com\"\n      ]\n    }\n  },\n  \"allowedPaymentMethods\": [\n    \"GENERIC_BANK_ACCOUNT\", \"WALLET\", \"CARD\", \"ACH\"\n  ]\n}"
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "25627167-ab13c4f7-9de7-4e8d-92c7-ebc587578efd"
        },
        {
          "name": "Linked Entity Does not Exists",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "df9ed446-86e9-4d15-97a9-da45d722212c",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Check Error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    ",
                  "    pm.expect(jsonData.error).to.eql(\"BadRequestError\");",
                  "});",
                  "",
                  "pm.test(\"Check Message in Duplicate UserId\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Parent user ID : B-21 passed in linkedEntities does not exist. Please create the entitiy before linking it\");",
                  "});",
                  "",
                  "",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"error\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "fa01a400-6c39-48aa-847f-99309e1fa006",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{businessUserId}}-12qq\",\n  \"createdTimestamp\": {{timestamp}},\n  \"legalEntity\": {\n    \"companyGeneralDetails\": {\n      \"legalName\": \"Jameson Breweries\",\n      \"businessIndustry\": [\n        \"Alcohol\", \"Scotch\"\n      ]\n    },\n    \"companyFinancialDetails\": {\n      \"expectedTransactionAmountPerMonth\": {\n        \"amountValue\": 5160000,\n        \"amountCurrency\": \"GBP\"\n      },\n      \"expectedTurnoverPerMonth\": {\n        \"amountValue\": 30000090,\n        \"amountCurrency\": \"GBP\"\n      },\n      \"tags\": [\n        {\n          \"key\": \"averageNumberOfPaymentsPerMonth\",\n          \"value\": \"90\"\n        }\n      ]\n    },\n    \"companyRegistrationDetails\": {\n      \"registrationIdentifier\": \"IN22313\",\n      \"registrationCountry\": \"DK\",\n      \"dateOfRegistration\": \"2022-01-01\",\n      \"taxIdentifier\": \"BDH3N221E\",\n      \"legalEntityType\": \"Pvt Ltd\"\n    },\n    \"contactDetails\": {\n      \"websites\": [\n        \"jamieson.com\"\n      ]\n    }\n  },\n  \"linkedEntities\": {\n      \"parentUserId\": \"B-21\",\n      \"childUserIds\": [\"B-1\", \"B-22\", \"B-20\"]\n  },\n  \"allowedPaymentMethods\": [\n    \"GENERIC_BANK_ACCOUNT\", \"WALLET\", \"CARD\", \"ACH\"\n  ]\n}"
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "25627167-fa01a400-6c39-48aa-847f-99309e1fa006"
        },
        {
          "name": "Legal Name Not Provided",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7dc840a2-2697-4733-ba0e-819f5ff9d21b",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"legalName\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "fb79430c-7373-4e9d-9e5f-11481add4f39",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{businessUserId}}\",\n  \"createdTimestamp\": {{timestamp}},\n  \"legalEntity\": {\n    \"companyGeneralDetails\": {\n      \"businessIndustry\": [\n        \"Alcohol\", \"Scotch\"\n      ]\n    },\n    \"companyFinancialDetails\": {\n      \"expectedTransactionAmountPerMonth\": {\n        \"amountValue\": 5160000,\n        \"amountCurrency\": \"GBP\"\n      },\n      \"expectedTurnoverPerMonth\": {\n        \"amountValue\": 30000090,\n        \"amountCurrency\": \"GBP\"\n      },\n      \"tags\": [\n        {\n          \"key\": \"averageNumberOfPaymentsPerMonth\",\n          \"value\": \"90\"\n        }\n      ]\n    },\n    \"companyRegistrationDetails\": {\n      \"registrationIdentifier\": \"IN22313\",\n      \"registrationCountry\": \"DK\",\n      \"dateOfRegistration\": \"2022-01-01\",\n      \"taxIdentifier\": \"BDH3N221E\",\n      \"legalEntityType\": \"Pvt Ltd\"\n    },\n    \"contactDetails\": {\n      \"websites\": [\n        \"jamieson.com\"\n      ]\n    }\n  },\n  \"allowedPaymentMethods\": [\n    \"GENERIC_BANK_ACCOUNT\", \"WALLET\", \"CARD\", \"ACH\"\n  ]\n}"
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "25627167-fb79430c-7373-4e9d-9e5f-11481add4f39"
        },
        {
          "name": "Incorrect Type of Legal Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b1e1636b-ade0-4e49-becb-724210a27caf",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance type (integer) does not match any allowed primitive type (allowed: [\\\"string\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "b99ab4ee-85da-444d-a718-f1754b2d101e",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{businessUserId}}\",\n  \"createdTimestamp\": {{timestamp}},\n  \"legalEntity\": {\n    \"companyGeneralDetails\": {\n      \"legalName\": 123,\n      \"businessIndustry\": [\n        \"Alcohol\", \"Scotch\"\n      ]\n    },\n    \"companyFinancialDetails\": {\n      \"expectedTransactionAmountPerMonth\": {\n        \"amountValue\": 5160000,\n        \"amountCurrency\": \"GBP\"\n      },\n      \"expectedTurnoverPerMonth\": {\n        \"amountValue\": 30000090,\n        \"amountCurrency\": \"GBP\"\n      },\n      \"tags\": [\n        {\n          \"key\": \"averageNumberOfPaymentsPerMonth\",\n          \"value\": \"90\"\n        }\n      ]\n    },\n    \"companyRegistrationDetails\": {\n      \"registrationIdentifier\": \"IN22313\",\n      \"registrationCountry\": \"DK\",\n      \"dateOfRegistration\": \"2022-01-01\",\n      \"taxIdentifier\": \"BDH3N221E\",\n      \"legalEntityType\": \"Pvt Ltd\"\n    },\n    \"contactDetails\": {\n      \"websites\": [\n        \"jamieson.com\"\n      ]\n    }\n  },\n  \"allowedPaymentMethods\": [\n    \"GENERIC_BANK_ACCOUNT\", \"WALLET\", \"CARD\", \"ACH\"\n  ]\n}"
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "25627167-b99ab4ee-85da-444d-a718-f1754b2d101e"
        },
        {
          "name": "Company General Details Not Provided",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e32a6503-d1e0-4442-880b-792cce41bb86",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"companyGeneralDetails\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "957791cc-2f59-442d-b3a0-8b4bf6632bcf",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"BUSINESS\",\n    \"userId\": \"{{businessUserId}}\",\n    \"createdTimestamp\": {{timestamp}},\n    \"legalEntity\": {\n        \"companyFinancialDetails\": {\n            \"expectedTransactionAmountPerMonth\": {\n                \"amountValue\": 5160000,\n                \"amountCurrency\": \"GBP\"\n            },\n            \"expectedTurnoverPerMonth\": {\n                \"amountValue\": 30000090,\n                \"amountCurrency\": \"GBP\"\n            },\n            \"tags\": [\n                {\n                    \"key\": \"averageNumberOfPaymentsPerMonth\",\n                    \"value\": \"90\"\n                }\n            ]\n        },\n        \"companyRegistrationDetails\": {\n            \"registrationIdentifier\": \"IN22313\",\n            \"registrationCountry\": \"DK\",\n            \"dateOfRegistration\": \"2022-01-01\",\n            \"taxIdentifier\": \"BDH3N221E\",\n            \"legalEntityType\": \"Pvt Ltd\"\n        },\n        \"contactDetails\": {\n            \"websites\": [\n                \"jamieson.com\"\n            ]\n        }\n    },\n    \"linkedEntities\": {\n        \"parentUserId\": \"B-21\",\n        \"childUserIds\": [\n            \"B-1\",\n            \"B-22\",\n            \"B-20\"\n        ]\n    },\n    \"allowedPaymentMethods\": [\n        \"GENERIC_BANK_ACCOUNT\",\n        \"WALLET\",\n        \"CARD\",\n        \"ACH\"\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "25627167-957791cc-2f59-442d-b3a0-8b4bf6632bcf"
        },
        {
          "name": "Value not Provided in Tags",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7cd2fc6b-8a52-4f22-914f-289f99d3a674",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"value\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "885c2b37-2c43-40d4-a93a-5834bbab5d2a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"userId\": \"{{businessUserId}}\",\n    \"createdTimestamp\": {{timestamp}},\n    \"legalEntity\": {\n        \"companyGeneralDetails\": {\n            \"legalName\": \"Jameson Breweries\",\n            \"businessIndustry\": [\n                \"Alcohol\",\n                \"Scotch\"\n            ]\n        },\n        \"companyFinancialDetails\": {\n            \"expectedTransactionAmountPerMonth\": {\n                \"amountValue\": 5160000,\n                \"amountCurrency\": \"GBP\"\n            },\n            \"expectedTurnoverPerMonth\": {\n                \"amountValue\": 30000090,\n                \"amountCurrency\": \"GBP\"\n            },\n            \"tags\": [\n                {\n                    \"key\": \"averageNumberOfPaymentsPerMonth\"\n                }\n            ]\n        },\n        \"companyRegistrationDetails\": {\n            \"registrationIdentifier\": \"IN22313\",\n            \"registrationCountry\": \"DK\",\n            \"dateOfRegistration\": \"2022-01-01\",\n            \"taxIdentifier\": \"BDH3N221E\",\n            \"legalEntityType\": \"Pvt Ltd\"\n        },\n        \"contactDetails\": {\n            \"websites\": [\n                \"jamieson.com\"\n            ]\n        }\n    },\n    \"linkedEntities\": {\n        \"parentUserId\": \"B-21\",\n        \"childUserIds\": [\n            \"B-1\",\n            \"B-22\",\n            \"B-20\"\n        ]\n    },\n    \"allowedPaymentMethods\": [\n        \"GENERIC_BANK_ACCOUNT\",\n        \"WALLET\",\n        \"CARD\",\n        \"ACH\"\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "25627167-885c2b37-2c43-40d4-a93a-5834bbab5d2a"
        },
        {
          "name": "User Id not givern",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7f2f22da-2bb9-4e3d-a34b-ec29f8425b95",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"userId\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "b987efc4-8ad3-46f1-bed0-2ed62d4478da",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"BUSINESS\",\n    \"createdTimestamp\": {{timestamp}},\n    \"legalEntity\": {\n        \"companyGeneralDetails\": {\n            \"businessIndustry\": [\n                \"Alcohol\",\n                \"Scotch\"\n            ]\n        },\n        \"companyFinancialDetails\": {\n            \"expectedTransactionAmountPerMonth\": {\n                \"amountValue\": 5160000,\n                \"amountCurrency\": \"GBP\"\n            },\n            \"expectedTurnoverPerMonth\": {\n                \"amountValue\": 30000090,\n                \"amountCurrency\": \"GBP\"\n            },\n            \"tags\": [\n                {\n                    \"key\": \"averageNumberOfPaymentsPerMonth\",\n                    \"value\": \"90\"\n                }\n            ]\n        },\n        \"companyRegistrationDetails\": {\n            \"registrationIdentifier\": \"IN22313\",\n            \"registrationCountry\": \"DK\",\n            \"dateOfRegistration\": \"2022-01-01\",\n            \"taxIdentifier\": \"BDH3N221E\",\n            \"legalEntityType\": \"Pvt Ltd\"\n        },\n        \"contactDetails\": {\n            \"websites\": [\n                \"jamieson.com\"\n            ]\n        }\n    },\n    \"linkedEntities\": {\n        \"parentUserId\": \"B-21\",\n        \"childUserIds\": [\n            \"B-1\",\n            \"B-22\",\n            \"B-20\"\n        ]\n    },\n    \"allowedPaymentMethods\": [\n        \"GENERIC_BANK_ACCOUNT\",\n        \"WALLET\",\n        \"CARD\",\n        \"ACH\"\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "25627167-b987efc4-8ad3-46f1-bed0-2ed62d4478da"
        },
        {
          "name": "No Api Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a45968b7-9161-4589-8645-06fa0baaaf6c",
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Unauthorized\");",
                  "});",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "edc66923-955a-492b-ac99-0766b8aa16ef",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"BUSINESS\",\n    \"userId\": \"{{businessUserId}}\",\n    \"createdTimestamp\": {{timestamp}},\n    \"legalEntity\": {\n        \"companyGeneralDetails\": {\n            \"businessIndustry\": [\n                \"Alcohol\",\n                \"Scotch\"\n            ]\n        },\n        \"companyFinancialDetails\": {\n            \"expectedTransactionAmountPerMonth\": {\n                \"amountValue\": 5160000,\n                \"amountCurrency\": \"GBP\"\n            },\n            \"expectedTurnoverPerMonth\": {\n                \"amountValue\": 30000090,\n                \"amountCurrency\": \"GBP\"\n            },\n            \"tags\": [\n                {\n                    \"key\": \"averageNumberOfPaymentsPerMonth\",\n                    \"value\": \"90\"\n                }\n            ]\n        },\n        \"companyRegistrationDetails\": {\n            \"registrationIdentifier\": \"IN22313\",\n            \"registrationCountry\": \"DK\",\n            \"dateOfRegistration\": \"2022-01-01\",\n            \"taxIdentifier\": \"BDH3N221E\",\n            \"legalEntityType\": \"Pvt Ltd\"\n        },\n        \"contactDetails\": {\n            \"websites\": [\n                \"jamieson.com\"\n            ]\n        }\n    },\n    \"linkedEntities\": {\n        \"parentUserId\": \"B-21\",\n        \"childUserIds\": [\n            \"B-1\",\n            \"B-22\",\n            \"B-20\"\n        ]\n    },\n    \"allowedPaymentMethods\": [\n        \"GENERIC_BANK_ACCOUNT\",\n        \"WALLET\",\n        \"CARD\",\n        \"ACH\"\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "25627167-edc66923-955a-492b-ac99-0766b8aa16ef"
        },
        {
          "name": "Incorrect-Domain",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "24c720ea-7c5c-42b8-ac41-79275ce92b99",
                "exec": [
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "",
                  "pm.test(\"Matches Key\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Matches Text\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "a86fd8dc-5b7c-4cc8-b269-451df6a876a2",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"BUSINESS\",\n    \"createdTimestamp\": {{timestamp}},\n    \"legalEntity\": {\n        \"companyGeneralDetails\": {\n            \"businessIndustry\": [\n                \"Alcohol\",\n                \"Scotch\"\n            ]\n        },\n        \"companyFinancialDetails\": {\n            \"expectedTransactionAmountPerMonth\": {\n                \"amountValue\": 5160000,\n                \"amountCurrency\": \"GBP\"\n            },\n            \"expectedTurnoverPerMonth\": {\n                \"amountValue\": 30000090,\n                \"amountCurrency\": \"GBP\"\n            },\n            \"tags\": [\n                {\n                    \"key\": \"averageNumberOfPaymentsPerMonth\",\n                    \"value\": \"90\"\n                }\n            ]\n        },\n        \"companyRegistrationDetails\": {\n            \"registrationIdentifier\": \"IN22313\",\n            \"registrationCountry\": \"DK\",\n            \"dateOfRegistration\": \"2022-01-01\",\n            \"taxIdentifier\": \"BDH3N221E\",\n            \"legalEntityType\": \"Pvt Ltd\"\n        },\n        \"contactDetails\": {\n            \"websites\": [\n                \"jamieson.com\"\n            ]\n        }\n    },\n    \"linkedEntities\": {\n        \"parentUserId\": \"B-21\",\n        \"childUserIds\": [\n            \"B-1\",\n            \"B-22\",\n            \"B-20\"\n        ]\n    },\n    \"allowedPaymentMethods\": [\n        \"GENERIC_BANK_ACCOUNT\",\n        \"WALLET\",\n        \"CARD\",\n        \"ACH\"\n    ]\n}"
            },
            "url": {
              "raw": "{{incorrectDomain}}/business/users",
              "host": ["{{incorrectDomain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "25627167-a86fd8dc-5b7c-4cc8-b269-451df6a876a2"
        },
        {
          "name": "No Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c6e67d52-cc1d-44ae-a3e0-76825a156650",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[Unknown error parsing request body]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "17d792dc-31d8-4c1b-858f-3830d37f1d49",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "25627167-17d792dc-31d8-4c1b-858f-3830d37f1d49"
        },
        {
          "name": "Empty Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "df369d20-5819-4c9d-982a-0534c1ea1cc1",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"createdTimestamp\\\",\\\"legalEntity\\\",\\\"userId\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "1530c1c3-5c06-4532-b788-ccabf7747399",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "25627167-1530c1c3-5c06-4532-b788-ccabf7747399"
        }
      ],
      "id": "e1f95277-98ca-4bb4-b607-a1f25201665a",
      "uid": "25627167-e1f95277-98ca-4bb4-b607-a1f25201665a"
    },
    {
      "name": "Transaction Events",
      "item": [
        {
          "name": "200 Response",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6ee2f84d-d94a-43ba-a04d-9897fcafc019",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Check Transaction State\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.transaction.transactionState).to.eql(\"REFUNDED\");",
                  "});",
                  "",
                  "pm.test(\"Check Transaction State\", function () {",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    const data = {",
                  "        \"bankCode\": \"SBI0033921\",",
                  "        \"cardFunding\": \"DEBIT\",",
                  "        \"method\": \"CARD\",",
                  "        \"cardAuthenticated\": true,",
                  "        \"accountType\": \"Savings\",",
                  "        \"bankName\": \"State Bank of India\",",
                  "        \"accountNumber\": \"121445521\",",
                  "        \"paymentChannel\": \"Intra Bank\",",
                  "        \"cardIssuedCountry\": \"AE\",",
                  "        \"cardLast4Digits\": \"2018\",",
                  "        \"cardFingerprint\": \"cRBAUn3Vqtzpf2uq\",",
                  "        \"cardExpiry\": {",
                  "            \"month\": 12,",
                  "            \"year\": 2023",
                  "        },",
                  "        \"specialInstructions\": \"IMPS\",",
                  "        \"name\": \"Binod Ramamurthie\",",
                  "        \"cardBrand\": \"VISA\"",
                  "    }",
                  "",
                  "    pm.expect(jsonData.transaction.originPaymentDetails).to.eql(data);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"eventId\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"transaction\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"hitRules\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"executedRules\");",
                  "});",
                  "",
                  "pm.test(\"Excuted Rules Should be more then 1\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    let executedRules = jsonData.executedRules.length > 0",
                  "    pm.expect(executedRules).to.eql(true);",
                  "});",
                  "",
                  "pm.test(`Match UUID`, () => {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.eventId).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$/i);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "bd84ee58-b4d1-4117-8ddd-c612c9587960",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"transactionId\": \"{{transactionId}}\",\n    \"transactionState\": \"REFUNDED\",\n    \"updatedTransactionAttributes\": {\n        \"originPaymentDetails\": {\n            \"method\": \"CARD\",\n            \"cardAuthenticated\": true,\n            \"cardIssuedCountry\": \"AE\",\n            \"cardBrand\": \"VISA\",\n            \"cardFunding\": \"DEBIT\",\n            \"cardExpiry\": {\n                \"month\": 12,\n                \"year\": 2023\n            },\n            \"cardFingerprint\": \"cRBAUn3Vqtzpf2uq\",\n            \"cardLast4Digits\": \"2018\"\n        }\n    },\n    \"timestamp\": 1664985327329\n}"
            },
            "url": {
              "raw": "{{domain}}/events/transaction",
              "host": ["{{domain}}"],
              "path": ["events", "transaction"]
            }
          },
          "response": [],
          "uid": "25627167-bd84ee58-b4d1-4117-8ddd-c612c9587960"
        },
        {
          "name": "Transaction Id not Provided",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fb174e48-40eb-4b6d-9db5-e5d2bf8beacd",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"transactionId\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "7abd1fde-f82f-4cc9-a3f3-67428af9875a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"transactionState\": \"REFUNDED\",\n    \"updatedTransactionAttributes\": {\n        \"originPaymentDetails\": {\n            \"method\": \"CARD\",\n            \"cardAuthenticated\": true,\n            \"cardIssuedCountry\": \"AE\",\n            \"cardBrand\": \"VISA\",\n            \"cardFunding\": \"DEBIT\",\n            \"cardExpiry\": {\n                \"month\": 12,\n                \"year\": 2023\n            },\n            \"cardFingerprint\": \"cRBAUn3Vqtzpf2uq\",\n            \"cardLast4Digits\": \"2018\"\n        }\n    },\n    \"timestamp\": 1664985327329\n}"
            },
            "url": {
              "raw": "{{domain}}/events/transaction",
              "host": ["{{domain}}"],
              "path": ["events", "transaction"]
            }
          },
          "response": [],
          "uid": "25627167-7abd1fde-f82f-4cc9-a3f3-67428af9875a"
        },
        {
          "name": "Invalid Transaction State",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7a433a53-ace4-4ea0-ab86-58ad1df3f7d3",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance value (\\\"REFUND-1\\\") not found in enum (possible values: [\\\"CREATED\\\",\\\"PROCESSING\\\",\\\"SENT\\\",\\\"EXPIRED\\\",\\\"DECLINED\\\",\\\"SUSPENDED\\\",\\\"REFUNDED\\\",\\\"SUCCESSFUL\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "3d03abcc-8c8b-4e0b-bdef-29706c5e3138",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"transactionId\": \"{{transactionId}}\",\n    \"transactionState\": \"REFUND-1\",\n    \"updatedTransactionAttributes\": {\n        \"originPaymentDetails\": {\n            \"method\": \"CARD\",\n            \"cardAuthenticated\": true,\n            \"cardIssuedCountry\": \"AE\",\n            \"cardBrand\": \"VISA\",\n            \"cardFunding\": \"DEBIT\",\n            \"cardExpiry\": {\n                \"month\": 12,\n                \"year\": 2023\n            },\n            \"cardFingerprint\": \"cRBAUn3Vqtzpf2uq\",\n            \"cardLast4Digits\": \"2018\"\n        }\n    },\n    \"timestamp\": 1664985327329\n}"
            },
            "url": {
              "raw": "{{domain}}/events/transaction",
              "host": ["{{domain}}"],
              "path": ["events", "transaction"]
            }
          },
          "response": [],
          "uid": "25627167-3d03abcc-8c8b-4e0b-bdef-29706c5e3138"
        },
        {
          "name": "Invalid Country",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "74e32ce6-1dbe-472d-a455-e8dc4cc82071",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance failed to match exactly one schema (matched 0 out of 9)]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "dc610993-8066-4dbc-b72a-864419813de1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"transactionId\": \"{{transactionId}}\",\n    \"transactionState\": \"REFUNDED\",\n    \"updatedTransactionAttributes\": {\n        \"originPaymentDetails\": {\n            \"method\": \"CARD\",\n            \"cardAuthenticated\": true,\n            \"cardIssuedCountry\": \"AB\",\n            \"cardBrand\": \"VISA\",\n            \"cardFunding\": \"DEBIT\",\n            \"cardExpiry\": {\n                \"month\": 12,\n                \"year\": 2023\n            },\n            \"cardFingerprint\": \"cRBAUn3Vqtzpf2uq\",\n            \"cardLast4Digits\": \"2018\"\n        }\n    },\n    \"timestamp\": 1664985327329\n}"
            },
            "url": {
              "raw": "{{domain}}/events/transaction",
              "host": ["{{domain}}"],
              "path": ["events", "transaction"]
            }
          },
          "response": [],
          "uid": "25627167-dc610993-8066-4dbc-b72a-864419813de1"
        },
        {
          "name": "Timestamp Provided as String",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "37d3f05a-eb63-4187-b55b-6fabaa37f312",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance type (string) does not match any allowed primitive type (allowed: [\\\"integer\\\",\\\"number\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "fa7e5f6b-207d-4f8e-81d7-f4e19670c985",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"transactionId\": \"{{transactionId}}\",\n    \"transactionState\": \"REFUNDED\",\n    \"updatedTransactionAttributes\": {\n        \"originPaymentDetails\": {\n            \"method\": \"CARD\",\n            \"cardAuthenticated\": true,\n            \"cardIssuedCountry\": \"IN\",\n            \"cardBrand\": \"VISA\",\n            \"cardFunding\": \"DEBIT\",\n            \"cardExpiry\": {\n                \"month\": 12,\n                \"year\": 2023\n            },\n            \"cardFingerprint\": \"cRBAUn3Vqtzpf2uq\",\n            \"cardLast4Digits\": \"2018\"\n        }\n    },\n    \"timestamp\": \"1664985327329\"\n}"
            },
            "url": {
              "raw": "{{domain}}/events/transaction",
              "host": ["{{domain}}"],
              "path": ["events", "transaction"]
            }
          },
          "response": [],
          "uid": "25627167-fa7e5f6b-207d-4f8e-81d7-f4e19670c985"
        },
        {
          "name": "Invalid Transaction Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "828bfe0f-8e34-4c20-842e-a3627cdb10c1",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    const request = JSON.parse(pm.request.body.raw)",
                  "    const transactionId = request.transactionId",
                  "    pm.expect(jsonData.message).to.eql(`Transaction ${transactionId} not found`);",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.eql(\"NotFoundError\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"error\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "e06ebc0c-f142-4b53-8de9-8f4e6f16ffc0",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"transactionId\": \"{{transactionId}}-1-invalid\",\n    \"transactionState\": \"REFUNDED\",\n    \"updatedTransactionAttributes\": {\n        \"originPaymentDetails\": {\n            \"method\": \"CARD\",\n            \"cardAuthenticated\": true,\n            \"cardIssuedCountry\": \"AE\",\n            \"cardBrand\": \"VISA\",\n            \"cardFunding\": \"DEBIT\",\n            \"cardExpiry\": {\n                \"month\": 12,\n                \"year\": 2023\n            },\n            \"cardFingerprint\": \"cRBAUn3Vqtzpf2uq\",\n            \"cardLast4Digits\": \"2018\"\n        }\n    },\n    \"timestamp\": 1664985327329\n}"
            },
            "url": {
              "raw": "{{domain}}/events/transaction",
              "host": ["{{domain}}"],
              "path": ["events", "transaction"]
            }
          },
          "response": [],
          "uid": "25627167-e06ebc0c-f142-4b53-8de9-8f4e6f16ffc0"
        },
        {
          "name": "No Update Atrributes",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fae09f0c-2845-4c27-a363-68f243f55e88",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Check Transaction State\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.transaction.transactionState).to.eql(\"REFUNDED\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"eventId\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"hitRules\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"executedRules\");",
                  "});",
                  "",
                  "pm.test(\"Excuted Rules Should be more then 1\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    let executedRules = jsonData.executedRules.length > 0",
                  "    pm.expect(executedRules).to.eql(true);",
                  "});",
                  "",
                  "pm.test(`Match UUID`, () => {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.eventId).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$/i);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "c05093ea-5453-46d4-9794-3166fef74b64",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"transactionId\": \"{{transactionId}}\",\n    \"transactionState\": \"REFUNDED\",\n    \"timestamp\": 1664985327329\n}"
            },
            "url": {
              "raw": "{{domain}}/events/transaction",
              "host": ["{{domain}}"],
              "path": ["events", "transaction"]
            }
          },
          "response": [],
          "uid": "25627167-c05093ea-5453-46d4-9794-3166fef74b64"
        },
        {
          "name": "Transaction State not Provided",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fdd3f846-74e2-4d20-b6fc-d7af89547cfd",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"transactionState\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "375b4fea-2f9e-4d6f-9f36-a1833ccc4faf",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"transactionId\": \"{{transactionId}}\",\n    \"updatedTransactionAttributes\": {\n        \"originPaymentDetails\": {\n            \"method\": \"CARD\",\n            \"cardAuthenticated\": true,\n            \"cardIssuedCountry\": \"AE\",\n            \"cardBrand\": \"VISA\",\n            \"cardFunding\": \"DEBIT\",\n            \"cardExpiry\": {\n                \"month\": 12,\n                \"year\": 2023\n            },\n            \"cardFingerprint\": \"cRBAUn3Vqtzpf2uq\",\n            \"cardLast4Digits\": \"2018\"\n        }\n    },\n    \"timestamp\": 1664985327329\n}"
            },
            "url": {
              "raw": "{{domain}}/events/transaction",
              "host": ["{{domain}}"],
              "path": ["events", "transaction"]
            }
          },
          "response": [],
          "uid": "25627167-375b4fea-2f9e-4d6f-9f36-a1833ccc4faf"
        },
        {
          "name": "No Api Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e6763334-ed63-4542-9410-a25de9406a62",
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Should Give Unauthorized\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Unauthorized\");",
                  "});",
                  "",
                  "pm.test(\"Content-Type is present\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "a244d09c-5829-44f6-9ab9-37ed08d29e30",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"transactionId\": \"{{transactionId}}\",\n    \"transactionState\": \"REFUNDED\",\n    \"updatedTransactionAttributes\": {\n        \"originPaymentDetails\": {\n            \"method\": \"CARD\",\n            \"cardAuthenticated\": true,\n            \"cardIssuedCountry\": \"AE\",\n            \"cardBrand\": \"VISA\",\n            \"cardFunding\": \"DEBIT\",\n            \"cardExpiry\": {\n                \"month\": 12,\n                \"year\": 2023\n            },\n            \"cardFingerprint\": \"cRBAUn3Vqtzpf2uq\",\n            \"cardLast4Digits\": \"2018\"\n        }\n    },\n    \"timestamp\": 1664985327329\n}"
            },
            "url": {
              "raw": "{{domain}}/events/transaction",
              "host": ["{{domain}}"],
              "path": ["events", "transaction"]
            }
          },
          "response": [],
          "uid": "25627167-a244d09c-5829-44f6-9ab9-37ed08d29e30"
        },
        {
          "name": "Incorrect Domain",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6c307763-eb5a-4731-beb3-cb88d94721cd",
                "exec": [
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test(\"Your test name\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "61e4351d-acbf-4593-9f09-a9f0359ad5ef",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"transactionId\": \"{{transactionId}}\",\n    \"transactionState\": \"REFUNDED\",\n    \"updatedTransactionAttributes\": {\n        \"originPaymentDetails\": {\n            \"method\": \"CARD\",\n            \"cardAuthenticated\": true,\n            \"cardIssuedCountry\": \"AE\",\n            \"cardBrand\": \"VISA\",\n            \"cardFunding\": \"DEBIT\",\n            \"cardExpiry\": {\n                \"month\": 12,\n                \"year\": 2023\n            },\n            \"cardFingerprint\": \"cRBAUn3Vqtzpf2uq\",\n            \"cardLast4Digits\": \"2018\"\n        }\n    },\n    \"timestamp\": 1664985327329\n}"
            },
            "url": {
              "raw": "{{incorrectDomain}}/events/transaction",
              "host": ["{{incorrectDomain}}"],
              "path": ["events", "transaction"]
            }
          },
          "response": [],
          "uid": "25627167-61e4351d-acbf-4593-9f09-a9f0359ad5ef"
        },
        {
          "name": "No Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7af505aa-45fe-4e68-8533-9198dc620e19",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[Unknown error parsing request body]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "06838875-11b5-4d23-8bf3-60bd0de78ae1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{domain}}/events/transaction",
              "host": ["{{domain}}"],
              "path": ["events", "transaction"]
            }
          },
          "response": [],
          "uid": "25627167-06838875-11b5-4d23-8bf3-60bd0de78ae1"
        },
        {
          "name": "Empty Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8cded87c-8e03-4804-8e4f-30df4f881c3a",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"timestamp\\\",\\\"transactionId\\\",\\\"transactionState\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "3013721f-88f3-4efe-8b40-1e75de620f75",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{domain}}/events/transaction",
              "host": ["{{domain}}"],
              "path": ["events", "transaction"]
            }
          },
          "response": [],
          "uid": "25627167-3013721f-88f3-4efe-8b40-1e75de620f75"
        }
      ],
      "id": "c2b91d33-122f-4f47-9e85-d3cc758f7ce6",
      "uid": "25627167-c2b91d33-122f-4f47-9e85-d3cc758f7ce6"
    },
    {
      "name": "Consumer User Events",
      "item": [
        {
          "name": "200 Response",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1394bd26-b902-405f-9edc-edec834b8772",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Check Risk Level Is Changed\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.riskLevel).to.eql(\"HIGH\");",
                  "});",
                  "",
                  "pm.test(\"Check Transaction State\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    const request = JSON.parse(pm.request.body.raw)",
                  "",
                  "    const data = {",
                  "    \"userId\": request.userId,",
                  "    \"legalDocuments\": [",
                  "        {",
                  "            \"documentIssuedDate\": 1639939034,",
                  "            \"documentExpirationDate\": 1839939034,",
                  "            \"documentType\": \"passport\",",
                  "            \"documentNumber\": \"CB33GME6\",",
                  "            \"documentIssuedCountry\": \"US\"",
                  "        }",
                  "    ],",
                  "    \"userDetails\": {",
                  "        \"name\": {",
                  "            \"firstName\": \"Post Man\",",
                  "            \"lastName\": \"Dugar\"",
                  "        },",
                  "        \"dateOfBirth\": \"2007-01-15\",",
                  "        \"countryOfResidence\": \"US\",",
                  "        \"countryOfNationality\": \"RU\"",
                  "    },",
                  "    \"createdTimestamp\": request.timestamp,",
                  "    \"tags\": [",
                  "        {",
                  "            \"value\": \"wallet\",",
                  "            \"key\": \"hello\"",
                  "        }",
                  "    ],",
                  "    \"reasonForAccountOpening\": [",
                  "        \"Payment\",",
                  "        \"Deposits\"",
                  "    ],",
                  "    \"riskLevel\": \"HIGH\",",
                  "    \"kycStatusDetails\": {",
                  "        \"status\": \"SUCCESSFUL\"",
                  "    },",
                  "    \"userStateDetails\": {",
                  "        \"state\": \"ACTIVE\"",
                  "    },",
                  "    \"executedRules\": [],",
                  "    \"hitRules\": [],",
                  "    \"status\": \"ALLOW\"",
                  "}",
                  "",
                  "    pm.expect(jsonData).to.eql(data)",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"legalDocuments\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"userDetails\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"kycStatusDetails\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"createdTimestamp\");",
                  "});",
                  "",
                  "pm.test(\"Tags Should be more then 1\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    let executedRules = jsonData.tags.length > 0",
                  "    pm.expect(executedRules).to.eql(true);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "c43171c7-70d1-4b92-a370-0dec60f14d5a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}\",\n    \"updatedConsumerUserAttributes\": {\n        \"riskLevel\": \"HIGH\",\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE\"\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{domain}}/events/consumer/user",
              "host": ["{{domain}}"],
              "path": ["events", "consumer", "user"]
            }
          },
          "response": [],
          "uid": "25627167-c43171c7-70d1-4b92-a370-0dec60f14d5a"
        },
        {
          "name": "User Id not Provided",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f986293d-f8ac-4fef-a9a5-27c1c45fed27",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"userId\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "29aaad97-7401-42dc-bdd2-ac657aee2a91",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"updatedConsumerUserAttributes\": {\n        \"riskLevel\": \"HIGH\",\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE\"\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{domain}}/events/consumer/user",
              "host": ["{{domain}}"],
              "path": ["events", "consumer", "user"]
            }
          },
          "response": [],
          "uid": "25627167-29aaad97-7401-42dc-bdd2-ac657aee2a91"
        },
        {
          "name": "Invalid User State",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d117d6b4-dacc-487d-97f0-e332783a8d07",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance value (\\\"ACTIVE-1\\\") not found in enum (possible values: [\\\"UNACCEPTABLE\\\",\\\"TERMINATED\\\",\\\"ACTIVE\\\",\\\"DORMANT\\\",\\\"CREATED\\\",\\\"SUSPENDED\\\",\\\"BLOCKED\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "92dff790-5622-48c6-88de-9fed4bbcff23",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}\",\n    \"updatedConsumerUserAttributes\": {\n        \"riskLevel\": \"HIGH\",\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE-1\"\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{domain}}/events/consumer/user",
              "host": ["{{domain}}"],
              "path": ["events", "consumer", "user"]
            }
          },
          "response": [],
          "uid": "25627167-92dff790-5622-48c6-88de-9fed4bbcff23"
        },
        {
          "name": "Invalid Country",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6ebe99d0-98f2-49e9-9040-68cdafff4d60",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance value (\\\"AA\\\") not found in enum (possible values: [\\\"AF\\\",\\\"AL\\\",\\\"DZ\\\",\\\"AS\\\",\\\"AD\\\",\\\"AO\\\",\\\"AI\\\",\\\"AQ\\\",\\\"AG\\\",\\\"AR\\\",\\\"AM\\\",\\\"AW\\\",\\\"AU\\\",\\\"AT\\\",\\\"AZ\\\",\\\"BS\\\",\\\"BH\\\",\\\"BD\\\",\\\"BB\\\",\\\"BY\\\",\\\"BE\\\",\\\"BZ\\\",\\\"BJ\\\",\\\"BM\\\",\\\"BT\\\",\\\"BO\\\",\\\"BQ\\\",\\\"BA\\\",\\\"BW\\\",\\\"BV\\\",\\\"BR\\\",\\\"IO\\\",\\\"BN\\\",\\\"BG\\\",\\\"BF\\\",\\\"BI\\\",\\\"CV\\\",\\\"KH\\\",\\\"CM\\\",\\\"CA\\\",\\\"KY\\\",\\\"CF\\\",\\\"TD\\\",\\\"CL\\\",\\\"CN\\\",\\\"CX\\\",\\\"CC\\\",\\\"CO\\\",\\\"KM\\\",\\\"CD\\\",\\\"CG\\\",\\\"CK\\\",\\\"CR\\\",\\\"HR\\\",\\\"CU\\\",\\\"CW\\\",\\\"CY\\\",\\\"CZ\\\",\\\"CI\\\",\\\"DK\\\",\\\"DJ\\\",\\\"DM\\\",\\\"DO\\\",\\\"EC\\\",\\\"EG\\\",\\\"SV\\\",\\\"GQ\\\",\\\"ER\\\",\\\"EE\\\",\\\"SZ\\\",\\\"ET\\\",\\\"FK\\\",\\\"FO\\\",\\\"FJ\\\",\\\"FI\\\",\\\"FR\\\",\\\"GF\\\",\\\"PF\\\",\\\"TF\\\",\\\"GA\\\",\\\"GM\\\",\\\"GE\\\",\\\"DE\\\",\\\"GH\\\",\\\"GI\\\",\\\"GR\\\",\\\"GL\\\",\\\"GD\\\",\\\"GP\\\",\\\"GU\\\",\\\"GT\\\",\\\"GG\\\",\\\"GN\\\",\\\"GW\\\",\\\"GY\\\",\\\"HT\\\",\\\"HM\\\",\\\"VA\\\",\\\"HN\\\",\\\"HK\\\",\\\"HU\\\",\\\"IS\\\",\\\"IN\\\",\\\"ID\\\",\\\"IR\\\",\\\"IQ\\\",\\\"IE\\\",\\\"IM\\\",\\\"IL\\\",\\\"IT\\\",\\\"JM\\\",\\\"JP\\\",\\\"JE\\\",\\\"JO\\\",\\\"KZ\\\",\\\"KE\\\",\\\"KI\\\",\\\"KP\\\",\\\"KR\\\",\\\"KW\\\",\\\"KG\\\",\\\"LA\\\",\\\"LV\\\",\\\"LB\\\",\\\"LS\\\",\\\"LR\\\",\\\"LY\\\",\\\"LI\\\",\\\"LT\\\",\\\"LU\\\",\\\"MO\\\",\\\"MG\\\",\\\"MW\\\",\\\"MY\\\",\\\"MV\\\",\\\"ML\\\",\\\"MT\\\",\\\"MH\\\",\\\"MQ\\\",\\\"MR\\\",\\\"MU\\\",\\\"YT\\\",\\\"MX\\\",\\\"FM\\\",\\\"MD\\\",\\\"MC\\\",\\\"MN\\\",\\\"ME\\\",\\\"MS\\\",\\\"MA\\\",\\\"MZ\\\",\\\"MM\\\",\\\"NA\\\",\\\"NR\\\",\\\"NP\\\",\\\"NL\\\",\\\"NC\\\",\\\"NZ\\\",\\\"NI\\\",\\\"NE\\\",\\\"NG\\\",\\\"NU\\\",\\\"NF\\\",\\\"MK\\\",\\\"MP\\\",\\\"NO\\\",\\\"OM\\\",\\\"PK\\\",\\\"PW\\\",\\\"PS\\\",\\\"PA\\\",\\\"PG\\\",\\\"PY\\\",\\\"PE\\\",\\\"PH\\\",\\\"PN\\\",\\\"PL\\\",\\\"PT\\\",\\\"PR\\\",\\\"QA\\\",\\\"RO\\\",\\\"RU\\\",\\\"RW\\\",\\\"RE\\\",\\\"BL\\\",\\\"SH\\\",\\\"KN\\\",\\\"LC\\\",\\\"MF\\\",\\\"PM\\\",\\\"VC\\\",\\\"WS\\\",\\\"SM\\\",\\\"ST\\\",\\\"SA\\\",\\\"SN\\\",\\\"RS\\\",\\\"SC\\\",\\\"SL\\\",\\\"SG\\\",\\\"SX\\\",\\\"SK\\\",\\\"SI\\\",\\\"SB\\\",\\\"SO\\\",\\\"ZA\\\",\\\"GS\\\",\\\"SS\\\",\\\"ES\\\",\\\"LK\\\",\\\"SD\\\",\\\"SR\\\",\\\"SJ\\\",\\\"SE\\\",\\\"CH\\\",\\\"SY\\\",\\\"TW\\\",\\\"TJ\\\",\\\"TZ\\\",\\\"TH\\\",\\\"TL\\\",\\\"TG\\\",\\\"TK\\\",\\\"TO\\\",\\\"TT\\\",\\\"TN\\\",\\\"TM\\\",\\\"TC\\\",\\\"TV\\\",\\\"TR\\\",\\\"UG\\\",\\\"UA\\\",\\\"AE\\\",\\\"GB\\\",\\\"UM\\\",\\\"US\\\",\\\"UY\\\",\\\"UZ\\\",\\\"VU\\\",\\\"VE\\\",\\\"VN\\\",\\\"VG\\\",\\\"VI\\\",\\\"WF\\\",\\\"EH\\\",\\\"YE\\\",\\\"ZM\\\",\\\"ZW\\\",\\\"AX\\\",\\\"N/A\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "ea4d9540-d5d6-46e0-b533-e7b9224b73b1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}\",\n    \"updatedConsumerUserAttributes\": {\n        \"riskLevel\": \"HIGH\",\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE\"\n        },\n        \"legalDocuments\": [\n            {\n                \"documentNumber\": \"123\",\n                \"documentType\": \"Temo\",\n                \"documentIssuedCountry\": \"AA\"\n            }\n        ]\n    }\n}"
            },
            "url": {
              "raw": "{{domain}}/events/consumer/user",
              "host": ["{{domain}}"],
              "path": ["events", "consumer", "user"]
            }
          },
          "response": [],
          "uid": "25627167-ea4d9540-d5d6-46e0-b533-e7b9224b73b1"
        },
        {
          "name": "Timestamp Provided as String",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "24901122-21b2-4814-82ca-4a44f69b2f88",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance type (string) does not match any allowed primitive type (allowed: [\\\"integer\\\",\\\"number\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "b514b277-3265-4a32-8b5a-ca7dbef8babe",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": \"{{timestamp}}\",\n    \"userId\": \"{{userId}}\",\n    \"updatedConsumerUserAttributes\": {\n        \"riskLevel\": \"HIGH\",\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE\"\n        },\n        \"legalDocuments\": [\n            {\n                \"documentNumber\": \"123\",\n                \"documentType\": \"Temo\",\n                \"documentIssuedCountry\": \"AA\"\n            }\n        ]\n    }\n}"
            },
            "url": {
              "raw": "{{domain}}/events/consumer/user",
              "host": ["{{domain}}"],
              "path": ["events", "consumer", "user"]
            }
          },
          "response": [],
          "uid": "25627167-b514b277-3265-4a32-8b5a-ca7dbef8babe"
        },
        {
          "name": "Invalid User Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bcd15c6f-2f60-42f9-837a-cb9db0609951",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    const request = JSON.parse(pm.request.body.raw)",
                  "    const userId = request.userId",
                  "    pm.expect(jsonData.message).to.eql(`User ${userId} not found. Please create the user ${userId}`)",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.eql(\"NotFoundError\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"error\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "698b48de-7d44-4ee4-8d11-9c15778fa8db",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}-1\",\n    \"updatedConsumerUserAttributes\": {\n        \"riskLevel\": \"HIGH\",\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE\"\n        },\n        \"legalDocuments\": [\n            {\n                \"documentNumber\": \"123\",\n                \"documentType\": \"Temo\",\n                \"documentIssuedCountry\": \"IN\"\n            }\n        ]\n    }\n}"
            },
            "url": {
              "raw": "{{domain}}/events/consumer/user",
              "host": ["{{domain}}"],
              "path": ["events", "consumer", "user"]
            }
          },
          "response": [],
          "uid": "25627167-698b48de-7d44-4ee4-8d11-9c15778fa8db"
        },
        {
          "name": "No Update Attributes",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c53accfa-42a4-4e13-a9f0-41f693dbf85b",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"userId\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"riskLevel\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"userDetails\");",
                  "});",
                  "",
                  "pm.test(\"Payload Match\", function () {",
                  "    const request = JSON.parse(pm.request.body.raw)",
                  "    const userId = request.userId",
                  "    const timestamp = request.timestamp",
                  "",
                  "    const body = {",
                  "        \"legalDocuments\": [",
                  "            {",
                  "                \"documentIssuedDate\": 1639939034,",
                  "                \"documentExpirationDate\": 1839939034,",
                  "                \"documentType\": \"passport\",",
                  "                \"documentNumber\": \"CB33GME6\",",
                  "                \"documentIssuedCountry\": \"US\"",
                  "            }",
                  "        ],",
                  "        \"userStateDetails\": {",
                  "            \"state\": \"ACTIVE\"",
                  "        },",
                  "        \"reasonForAccountOpening\": [",
                  "            \"Payment\",",
                  "            \"Deposits\"",
                  "        ],",
                  "        \"riskLevel\": \"HIGH\",",
                  "        \"userId\": userId,",
                  "        \"kycStatusDetails\": {",
                  "            \"status\": \"SUCCESSFUL\"",
                  "        },",
                  "        \"userDetails\": {",
                  "            \"name\": {",
                  "                \"firstName\": \"Post Man\",",
                  "                \"lastName\": \"Dugar\"",
                  "            },",
                  "            \"dateOfBirth\": \"2007-01-15\",",
                  "            \"countryOfResidence\": \"US\",",
                  "            \"countryOfNationality\": \"RU\"",
                  "        },",
                  "        \"createdTimestamp\": timestamp,",
                  "        \"tags\": [",
                  "            {",
                  "                \"value\": \"wallet\",",
                  "                \"key\": \"hello\"",
                  "            }",
                  "        ],",
                  "        \"executedRules\": [],",
                  "        \"hitRules\": [],",
                  "        \"status\": \"ALLOW\"",
                  "    }",
                  "",
                  "    pm.expect(pm.response.json()).to.eql(body)",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "a9cfddbc-8280-4304-a14c-80ce6b118166",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}\"\n}"
            },
            "url": {
              "raw": "{{domain}}/events/consumer/user",
              "host": ["{{domain}}"],
              "path": ["events", "consumer", "user"]
            }
          },
          "response": [],
          "uid": "25627167-a9cfddbc-8280-4304-a14c-80ce6b118166"
        },
        {
          "name": "Incorrect Domain",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3360933-9cbe-4bfa-8c1c-b30ccd4ac682",
                "exec": [
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test(\"Your test name\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "7c727717-8166-413e-9b9e-3792505879da",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}\",\n    \"updatedConsumerUserAttributes\": {\n        \"riskLevel\": \"HIGH\",\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE\"\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{incorrectDomain}}/events/consumer/user",
              "host": ["{{incorrectDomain}}"],
              "path": ["events", "consumer", "user"]
            }
          },
          "response": [],
          "uid": "25627167-7c727717-8166-413e-9b9e-3792505879da"
        },
        {
          "name": "No API Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3829e0f3-6376-46e0-b183-0c5f888d8655",
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Should Give Unauthorized\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Unauthorized\");",
                  "});",
                  "",
                  "pm.test(\"Content-Type is present\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "630069ed-718c-44fa-9988-d2ae70afa39a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}\"\n}"
            },
            "url": {
              "raw": "{{domain}}/events/consumer/user",
              "host": ["{{domain}}"],
              "path": ["events", "consumer", "user"]
            }
          },
          "response": [],
          "uid": "25627167-630069ed-718c-44fa-9988-d2ae70afa39a"
        },
        {
          "name": "No Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "88d19822-24a4-480e-ba10-f160130dff78",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[Unknown error parsing request body]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "62f07f31-7dbb-49cb-95fe-8b02ae567155",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{domain}}/events/consumer/user",
              "host": ["{{domain}}"],
              "path": ["events", "consumer", "user"]
            }
          },
          "response": [],
          "uid": "25627167-62f07f31-7dbb-49cb-95fe-8b02ae567155"
        },
        {
          "name": "Empty Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8897224a-7b28-4c17-bc3f-a701cbc081ad",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"timestamp\\\",\\\"userId\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "840f43c4-d412-475e-9a60-43e410d35d1a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{domain}}/events/consumer/user",
              "host": ["{{domain}}"],
              "path": ["events", "consumer", "user"]
            }
          },
          "response": [],
          "uid": "25627167-840f43c4-d412-475e-9a60-43e410d35d1a"
        }
      ],
      "id": "f8893fe2-fd78-4373-ac5c-adbd1ea1cd61",
      "uid": "25627167-f8893fe2-fd78-4373-ac5c-adbd1ea1cd61"
    },
    {
      "name": "Business User Events",
      "item": [
        {
          "name": "200 Response",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bcb2a7e4-53cd-4e0b-a0ab-702474e491f1",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Check User State Is Changed\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.userStateDetails.state).to.eql(\"ACTIVE\");",
                  "});",
                  "",
                  "pm.test(\"Check Payload Full\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    const request = JSON.parse(pm.request.body.raw)",
                  "",
                  "    const data = {",
                  "        \"userId\": request.userId,",
                  "        \"createdTimestamp\": request.timestamp,",
                  "        \"allowedPaymentMethods\": [",
                  "            \"GENERIC_BANK_ACCOUNT\",",
                  "            \"WALLET\",",
                  "            \"CARD\",",
                  "            \"ACH\"",
                  "        ],",
                  "        \"legalEntity\": {",
                  "            \"companyGeneralDetails\": {",
                  "                \"legalName\": \"Mr Wu Semiconductors\"",
                  "            },",
                  "            \"contactDetails\": {",
                  "                \"addresses\": [",
                  "                    {",
                  "                        \"addressLines\": [",
                  "                            \"Klara-Franke Str 20\"",
                  "                        ],",
                  "                        \"postcode\": \"10557\",",
                  "                        \"city\": \"Berlin\",",
                  "                        \"state\": \"Berlin\",",
                  "                        \"country\": \"Germany\",",
                  "                        \"tags\": [",
                  "                            {",
                  "                                \"key\": \"customKey\",",
                  "                                \"value\": \"customValue\"",
                  "                            }",
                  "                        ]",
                  "                    }",
                  "                ]",
                  "            }",
                  "        },",
                  "        \"kycStatusDetails\": {",
                  "            \"status\": \"SUCCESSFUL\"",
                  "        },",
                  "        \"userStateDetails\": {",
                  "            \"state\": \"ACTIVE\"",
                  "        },",
                  "        \"executedRules\": [],",
                  "        \"hitRules\": [],",
                  "        \"status\": \"ALLOW\"",
                  "    }",
                  "",
                  "    pm.expect(jsonData).to.eql(data)",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"legalName\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"contactDetails\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"allowedPaymentMethods\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"createdTimestamp\");",
                  "});",
                  "",
                  "pm.test(\"allowedPaymentMethods Should be more then 1\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    let executedRules = jsonData.allowedPaymentMethods.length > 0",
                  "    pm.expect(executedRules).to.eql(true);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "07a4585f-cecd-4856-8176-7e66796b6ec9",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{businessUserId}}\",\n    \"updatedBusinessUserAttributes\": {\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE\"\n        },\n        \"legalEntity\": {\n            \"companyGeneralDetails\": {\n                \"legalName\": \"Mr Wu Semiconductors\"\n            },\n            \"contactDetails\": {\n                \"addresses\": [\n                    {\n                        \"addressLines\": [\n                            \"Klara-Franke Str 20\"\n                        ],\n                        \"postcode\": \"10557\",\n                        \"city\": \"Berlin\",\n                        \"state\": \"Berlin\",\n                        \"country\": \"Germany\",\n                        \"tags\": [\n                            {\n                                \"key\": \"customKey\",\n                                \"value\": \"customValue\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{domain}}/events/business/user",
              "host": ["{{domain}}"],
              "path": ["events", "business", "user"]
            }
          },
          "response": [],
          "uid": "25627167-07a4585f-cecd-4856-8176-7e66796b6ec9"
        },
        {
          "name": "Invalid User Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "435c1324-240a-4fd6-b5b0-5d53d32e250d",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    const request = JSON.parse(pm.request.body.raw)",
                  "    const userId = request.userId",
                  "    pm.expect(jsonData.message).to.eql(`User ${userId} not found. Please create the user ${userId}`)",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.eql(\"NotFoundError\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"error\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "8ad9d45a-84d2-4876-829e-8d08724f1cfc",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{businessUserId}}-some-random\",\n    \"updatedBusinessUserAttributes\": {\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE\"\n        },\n        \"legalEntity\": {\n            \"companyGeneralDetails\": {\n                \"legalName\": \"Mr Wu Semiconductors\"\n            },\n            \"contactDetails\": {\n                \"addresses\": [\n                    {\n                        \"addressLines\": [\n                            \"Klara-Franke Str 20\"\n                        ],\n                        \"postcode\": \"10557\",\n                        \"city\": \"Berlin\",\n                        \"state\": \"Berlin\",\n                        \"country\": \"Germany\",\n                        \"tags\": [\n                            {\n                                \"key\": \"customKey\",\n                                \"value\": \"customValue\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{domain}}/events/business/user",
              "host": ["{{domain}}"],
              "path": ["events", "business", "user"]
            }
          },
          "response": [],
          "uid": "25627167-8ad9d45a-84d2-4876-829e-8d08724f1cfc"
        },
        {
          "name": "No API Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b226c112-f915-4103-982d-5ae787fd7599",
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Should Give Unauthorized\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Unauthorized\");",
                  "});",
                  "",
                  "pm.test(\"Content-Type is present\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "714f1b13-3104-4df2-8d9f-13cbbd6c4587",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{businessUserId}}\",\n    \"updatedBusinessUserAttributes\": {\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE\"\n        },\n        \"legalEntity\": {\n            \"companyGeneralDetails\": {\n                \"legalName\": \"Mr Wu Semiconductors\"\n            },\n            \"contactDetails\": {\n                \"addresses\": [\n                    {\n                        \"addressLines\": [\n                            \"Klara-Franke Str 20\"\n                        ],\n                        \"postcode\": \"10557\",\n                        \"city\": \"Berlin\",\n                        \"state\": \"Berlin\",\n                        \"country\": \"Germany\",\n                        \"tags\": [\n                            {\n                                \"key\": \"customKey\",\n                                \"value\": \"customValue\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{domain}}/events/business/user",
              "host": ["{{domain}}"],
              "path": ["events", "business", "user"]
            }
          },
          "response": [],
          "uid": "25627167-714f1b13-3104-4df2-8d9f-13cbbd6c4587"
        },
        {
          "name": "Invalid API key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4d79a0ae-38bc-4480-baf8-8998090e34ab",
                "exec": [
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Message\");",
                  "});",
                  "",
                  "pm.test(\"Should Give Unauthorized\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.Message).to.eql(\"User is not authorized to access this resource with an explicit deny\");",
                  "});",
                  "",
                  "pm.test(\"Content-Type is present\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "c86124a6-8fbc-4011-bad1-b5a025fa2487",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "1{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{businessUserId}}\",\n    \"updatedBusinessUserAttributes\": {\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE\"\n        },\n        \"legalEntity\": {\n            \"companyGeneralDetails\": {\n                \"legalName\": \"Mr Wu Semiconductors\"\n            },\n            \"contactDetails\": {\n                \"addresses\": [\n                    {\n                        \"addressLines\": [\n                            \"Klara-Franke Str 20\"\n                        ],\n                        \"postcode\": \"10557\",\n                        \"city\": \"Berlin\",\n                        \"state\": \"Berlin\",\n                        \"country\": \"Germany\",\n                        \"tags\": [\n                            {\n                                \"key\": \"customKey\",\n                                \"value\": \"customValue\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{domain}}/events/business/user",
              "host": ["{{domain}}"],
              "path": ["events", "business", "user"]
            }
          },
          "response": [],
          "uid": "25627167-c86124a6-8fbc-4011-bad1-b5a025fa2487"
        },
        {
          "name": "Empty Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fd177dc8-cff8-40f7-bfd2-e5f93da5126e",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"timestamp\\\",\\\"userId\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "75b494f1-64a7-4082-975e-76ab39886747",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{domain}}/events/business/user",
              "host": ["{{domain}}"],
              "path": ["events", "business", "user"]
            }
          },
          "response": [],
          "uid": "25627167-75b494f1-64a7-4082-975e-76ab39886747"
        },
        {
          "name": "No Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2704e28e-3859-40d4-8d1e-e5369d069a82",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[Unknown error parsing request body]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "8fe5a235-0621-4054-9a93-65673d8f864a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{domain}}/events/business/user",
              "host": ["{{domain}}"],
              "path": ["events", "business", "user"]
            }
          },
          "response": [],
          "uid": "25627167-8fe5a235-0621-4054-9a93-65673d8f864a"
        },
        {
          "name": "Incorrect Domain",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "23058d42-a304-4c94-87cf-01b215835d50",
                "exec": [
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test(\"Your test name\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "ceb82820-a9ed-408c-9c56-3c6164d792d5",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{businessUserId}}\",\n    \"updatedBusinessUserAttributes\": {\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE\"\n        },\n        \"legalEntity\": {\n            \"companyGeneralDetails\": {\n                \"legalName\": \"Mr Wu Semiconductors\"\n            },\n            \"contactDetails\": {\n                \"addresses\": [\n                    {\n                        \"addressLines\": [\n                            \"Klara-Franke Str 20\"\n                        ],\n                        \"postcode\": \"10557\",\n                        \"city\": \"Berlin\",\n                        \"state\": \"Berlin\",\n                        \"country\": \"Germany\",\n                        \"tags\": [\n                            {\n                                \"key\": \"customKey\",\n                                \"value\": \"customValue\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{incorrectDomain}}/events/business/user",
              "host": ["{{incorrectDomain}}"],
              "path": ["events", "business", "user"]
            }
          },
          "response": [],
          "uid": "25627167-ceb82820-a9ed-408c-9c56-3c6164d792d5"
        },
        {
          "name": "No Update Attributes",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "10238c52-97cf-4c4b-a8ba-0352915293c1",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"userId\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"legalEntity\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"companyGeneralDetails\");",
                  "});",
                  "",
                  "pm.test(\"Payload Match\", function () {",
                  "    const request = JSON.parse(pm.request.body.raw)",
                  "    const userId = request.userId",
                  "    const timestamp = request.timestamp",
                  "",
                  "    const body = {",
                  "        \"userId\": userId,",
                  "        \"kycStatusDetails\": {",
                  "            \"status\": \"SUCCESSFUL\"",
                  "        },",
                  "        \"userStateDetails\": {",
                  "            \"state\": \"ACTIVE\"",
                  "        },",
                  "        \"createdTimestamp\": timestamp,",
                  "        \"allowedPaymentMethods\": [",
                  "            \"GENERIC_BANK_ACCOUNT\",",
                  "            \"WALLET\",",
                  "            \"CARD\",",
                  "            \"ACH\"",
                  "        ],",
                  "        \"legalEntity\": {",
                  "            \"contactDetails\": {",
                  "                \"addresses\": [",
                  "                    {",
                  "                        \"postcode\": \"10557\",",
                  "                        \"country\": \"Germany\",",
                  "                        \"addressLines\": [",
                  "                            \"Klara-Franke Str 20\"",
                  "                        ],",
                  "                        \"state\": \"Berlin\",",
                  "                        \"city\": \"Berlin\",",
                  "                        \"tags\": [",
                  "                            {",
                  "                                \"value\": \"customValue\",",
                  "                                \"key\": \"customKey\"",
                  "                            }",
                  "                        ]",
                  "                    }",
                  "                ]",
                  "            },",
                  "            \"companyGeneralDetails\": {",
                  "                \"legalName\": \"Mr Wu Semiconductors\"",
                  "            },",
                  "        },",
                  "        \"executedRules\": [],",
                  "        \"hitRules\": [],",
                  "        \"status\": \"ALLOW\"",
                  "    }",
                  "",
                  "    pm.expect(pm.response.json()).to.eql(body)",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "fdcd962e-87e3-4033-aa76-3805ea738aa4",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{businessUserId}}\"\n}"
            },
            "url": {
              "raw": "{{domain}}/events/business/user",
              "host": ["{{domain}}"],
              "path": ["events", "business", "user"]
            }
          },
          "response": [],
          "uid": "25627167-fdcd962e-87e3-4033-aa76-3805ea738aa4"
        },
        {
          "name": "User Id Not Provided",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "953eb5a3-2f1f-4c3e-bcc9-246e45d921fe",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"userId\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "c4d9b4dc-5604-4350-bb11-37d6140f6e3c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"updatedBusinessUserAttributes\": {\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE\"\n        },\n        \"legalEntity\": {\n            \"companyGeneralDetails\": {\n                \"legalName\": \"Mr Wu Semiconductors\"\n            },\n            \"contactDetails\": {\n                \"addresses\": [\n                    {\n                        \"addressLines\": [\n                            \"Klara-Franke Str 20\"\n                        ],\n                        \"postcode\": \"10557\",\n                        \"city\": \"Berlin\",\n                        \"state\": \"Berlin\",\n                        \"country\": \"Germany\",\n                        \"tags\": [\n                            {\n                                \"key\": \"customKey\",\n                                \"value\": \"customValue\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{domain}}/events/business/user",
              "host": ["{{domain}}"],
              "path": ["events", "business", "user"]
            }
          },
          "response": [],
          "uid": "25627167-c4d9b4dc-5604-4350-bb11-37d6140f6e3c"
        },
        {
          "name": "Invalid User State",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "14a5fc78-ff50-4648-9038-7fe0c7d32408",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance value (\\\"ACTIVE-1\\\") not found in enum (possible values: [\\\"UNACCEPTABLE\\\",\\\"TERMINATED\\\",\\\"ACTIVE\\\",\\\"DORMANT\\\",\\\"CREATED\\\",\\\"SUSPENDED\\\",\\\"BLOCKED\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "c1152f59-b39b-40ce-888a-444fd6445d1e",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{businessUserId}}\",\n    \"updatedBusinessUserAttributes\": {\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE-1\"\n        },\n        \"legalEntity\": {\n            \"companyGeneralDetails\": {\n                \"legalName\": \"Mr Wu Semiconductors\"\n            },\n            \"contactDetails\": {\n                \"addresses\": [\n                    {\n                        \"addressLines\": [\n                            \"Klara-Franke Str 20\"\n                        ],\n                        \"postcode\": \"10557\",\n                        \"city\": \"Berlin\",\n                        \"state\": \"Berlin\",\n                        \"country\": \"Germany\",\n                        \"tags\": [\n                            {\n                                \"key\": \"customKey\",\n                                \"value\": \"customValue\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{domain}}/events/business/user",
              "host": ["{{domain}}"],
              "path": ["events", "business", "user"]
            }
          },
          "response": [],
          "uid": "25627167-c1152f59-b39b-40ce-888a-444fd6445d1e"
        },
        {
          "name": "Invalid Legal Name Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d8b1a113-8315-46d3-b855-a159064a2bbc",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance type (boolean) does not match any allowed primitive type (allowed: [\\\"string\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "9751f976-c576-4b90-8579-b80e8c89c23c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{businessUserId}}\",\n    \"updatedBusinessUserAttributes\": {\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE\"\n        },\n        \"legalEntity\": {\n            \"companyGeneralDetails\": {\n                \"legalName\": true\n            },\n            \"contactDetails\": {\n                \"addresses\": [\n                    {\n                        \"addressLines\": [\n                            \"Klara-Franke Str 20\"\n                        ],\n                        \"postcode\": \"10557\",\n                        \"city\": \"Berlin\",\n                        \"state\": \"Berlin\",\n                        \"country\": \"Germany\",\n                        \"tags\": [\n                            {\n                                \"key\": \"customKey\",\n                                \"value\": \"customValue\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{domain}}/events/business/user",
              "host": ["{{domain}}"],
              "path": ["events", "business", "user"]
            }
          },
          "response": [],
          "uid": "25627167-9751f976-c576-4b90-8579-b80e8c89c23c"
        },
        {
          "name": "Invalid Country Code",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "441a3735-cfd7-40e0-b37a-ecb3b84fd858",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance value (\\\"AA\\\") not found in enum (possible values: [\\\"AF\\\",\\\"AL\\\",\\\"DZ\\\",\\\"AS\\\",\\\"AD\\\",\\\"AO\\\",\\\"AI\\\",\\\"AQ\\\",\\\"AG\\\",\\\"AR\\\",\\\"AM\\\",\\\"AW\\\",\\\"AU\\\",\\\"AT\\\",\\\"AZ\\\",\\\"BS\\\",\\\"BH\\\",\\\"BD\\\",\\\"BB\\\",\\\"BY\\\",\\\"BE\\\",\\\"BZ\\\",\\\"BJ\\\",\\\"BM\\\",\\\"BT\\\",\\\"BO\\\",\\\"BQ\\\",\\\"BA\\\",\\\"BW\\\",\\\"BV\\\",\\\"BR\\\",\\\"IO\\\",\\\"BN\\\",\\\"BG\\\",\\\"BF\\\",\\\"BI\\\",\\\"CV\\\",\\\"KH\\\",\\\"CM\\\",\\\"CA\\\",\\\"KY\\\",\\\"CF\\\",\\\"TD\\\",\\\"CL\\\",\\\"CN\\\",\\\"CX\\\",\\\"CC\\\",\\\"CO\\\",\\\"KM\\\",\\\"CD\\\",\\\"CG\\\",\\\"CK\\\",\\\"CR\\\",\\\"HR\\\",\\\"CU\\\",\\\"CW\\\",\\\"CY\\\",\\\"CZ\\\",\\\"CI\\\",\\\"DK\\\",\\\"DJ\\\",\\\"DM\\\",\\\"DO\\\",\\\"EC\\\",\\\"EG\\\",\\\"SV\\\",\\\"GQ\\\",\\\"ER\\\",\\\"EE\\\",\\\"SZ\\\",\\\"ET\\\",\\\"FK\\\",\\\"FO\\\",\\\"FJ\\\",\\\"FI\\\",\\\"FR\\\",\\\"GF\\\",\\\"PF\\\",\\\"TF\\\",\\\"GA\\\",\\\"GM\\\",\\\"GE\\\",\\\"DE\\\",\\\"GH\\\",\\\"GI\\\",\\\"GR\\\",\\\"GL\\\",\\\"GD\\\",\\\"GP\\\",\\\"GU\\\",\\\"GT\\\",\\\"GG\\\",\\\"GN\\\",\\\"GW\\\",\\\"GY\\\",\\\"HT\\\",\\\"HM\\\",\\\"VA\\\",\\\"HN\\\",\\\"HK\\\",\\\"HU\\\",\\\"IS\\\",\\\"IN\\\",\\\"ID\\\",\\\"IR\\\",\\\"IQ\\\",\\\"IE\\\",\\\"IM\\\",\\\"IL\\\",\\\"IT\\\",\\\"JM\\\",\\\"JP\\\",\\\"JE\\\",\\\"JO\\\",\\\"KZ\\\",\\\"KE\\\",\\\"KI\\\",\\\"KP\\\",\\\"KR\\\",\\\"KW\\\",\\\"KG\\\",\\\"LA\\\",\\\"LV\\\",\\\"LB\\\",\\\"LS\\\",\\\"LR\\\",\\\"LY\\\",\\\"LI\\\",\\\"LT\\\",\\\"LU\\\",\\\"MO\\\",\\\"MG\\\",\\\"MW\\\",\\\"MY\\\",\\\"MV\\\",\\\"ML\\\",\\\"MT\\\",\\\"MH\\\",\\\"MQ\\\",\\\"MR\\\",\\\"MU\\\",\\\"YT\\\",\\\"MX\\\",\\\"FM\\\",\\\"MD\\\",\\\"MC\\\",\\\"MN\\\",\\\"ME\\\",\\\"MS\\\",\\\"MA\\\",\\\"MZ\\\",\\\"MM\\\",\\\"NA\\\",\\\"NR\\\",\\\"NP\\\",\\\"NL\\\",\\\"NC\\\",\\\"NZ\\\",\\\"NI\\\",\\\"NE\\\",\\\"NG\\\",\\\"NU\\\",\\\"NF\\\",\\\"MK\\\",\\\"MP\\\",\\\"NO\\\",\\\"OM\\\",\\\"PK\\\",\\\"PW\\\",\\\"PS\\\",\\\"PA\\\",\\\"PG\\\",\\\"PY\\\",\\\"PE\\\",\\\"PH\\\",\\\"PN\\\",\\\"PL\\\",\\\"PT\\\",\\\"PR\\\",\\\"QA\\\",\\\"RO\\\",\\\"RU\\\",\\\"RW\\\",\\\"RE\\\",\\\"BL\\\",\\\"SH\\\",\\\"KN\\\",\\\"LC\\\",\\\"MF\\\",\\\"PM\\\",\\\"VC\\\",\\\"WS\\\",\\\"SM\\\",\\\"ST\\\",\\\"SA\\\",\\\"SN\\\",\\\"RS\\\",\\\"SC\\\",\\\"SL\\\",\\\"SG\\\",\\\"SX\\\",\\\"SK\\\",\\\"SI\\\",\\\"SB\\\",\\\"SO\\\",\\\"ZA\\\",\\\"GS\\\",\\\"SS\\\",\\\"ES\\\",\\\"LK\\\",\\\"SD\\\",\\\"SR\\\",\\\"SJ\\\",\\\"SE\\\",\\\"CH\\\",\\\"SY\\\",\\\"TW\\\",\\\"TJ\\\",\\\"TZ\\\",\\\"TH\\\",\\\"TL\\\",\\\"TG\\\",\\\"TK\\\",\\\"TO\\\",\\\"TT\\\",\\\"TN\\\",\\\"TM\\\",\\\"TC\\\",\\\"TV\\\",\\\"TR\\\",\\\"UG\\\",\\\"UA\\\",\\\"AE\\\",\\\"GB\\\",\\\"UM\\\",\\\"US\\\",\\\"UY\\\",\\\"UZ\\\",\\\"VU\\\",\\\"VE\\\",\\\"VN\\\",\\\"VG\\\",\\\"VI\\\",\\\"WF\\\",\\\"EH\\\",\\\"YE\\\",\\\"ZM\\\",\\\"ZW\\\",\\\"AX\\\",\\\"N/A\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "12131e75-6f5b-40ce-8218-6e66b3b2fe00",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{businessUserId}}\",\n    \"updatedBusinessUserAttributes\": {\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE\"\n        },\n        \"legalEntity\": {\n            \"companyGeneralDetails\": {\n                \"legalName\": \"Mr Postman\"\n            },\n            \"companyRegistrationDetails\": {\n                \"registrationCountry\": \"AA\",\n                \"registrationIdentifier\": \"AB\"\n            },\n            \"contactDetails\": {\n                \"addresses\": [\n                    {\n                        \"addressLines\": [\n                            \"Klara-Franke Str 20\"\n                        ],\n                        \"postcode\": \"10557\",\n                        \"city\": \"Berlin\",\n                        \"state\": \"Berlin\",\n                        \"country\": \"Germany\",\n                        \"tags\": [\n                            {\n                                \"key\": \"customKey\",\n                                \"value\": \"customValue\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{domain}}/events/business/user",
              "host": ["{{domain}}"],
              "path": ["events", "business", "user"]
            }
          },
          "response": [],
          "uid": "25627167-12131e75-6f5b-40ce-8218-6e66b3b2fe00"
        },
        {
          "name": "Timestamp Provided as String",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "365b6f54-03d5-4495-a0c0-db28d70e6a11",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance type (string) does not match any allowed primitive type (allowed: [\\\"integer\\\",\\\"number\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "4a1fbd38-fd52-4a5a-8884-7c8b0571ec16",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": \"{{timestamp}}\",\n    \"userId\": \"{{businessUserId}}\",\n    \"updatedBusinessUserAttributes\": {\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE\"\n        },\n        \"legalEntity\": {\n            \"companyGeneralDetails\": {\n                \"legalName\": \"Mr Postman\"\n            },\n            \"companyRegistrationDetails\": {\n                \"registrationCountry\": \"US\",\n                \"registrationIdentifier\": \"AB\"\n            },\n            \"contactDetails\": {\n                \"addresses\": [\n                    {\n                        \"addressLines\": [\n                            \"Klara-Franke Str 20\"\n                        ],\n                        \"postcode\": \"10557\",\n                        \"city\": \"Berlin\",\n                        \"state\": \"Berlin\",\n                        \"country\": \"Germany\",\n                        \"tags\": [\n                            {\n                                \"key\": \"customKey\",\n                                \"value\": \"customValue\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{domain}}/events/business/user",
              "host": ["{{domain}}"],
              "path": ["events", "business", "user"]
            }
          },
          "response": [],
          "uid": "25627167-4a1fbd38-fd52-4a5a-8884-7c8b0571ec16"
        }
      ],
      "id": "bedc0832-d0e3-48e8-98fb-2ecf896e00a8",
      "uid": "25627167-bedc0832-d0e3-48e8-98fb-2ecf896e00a8"
    }
  ]
}
