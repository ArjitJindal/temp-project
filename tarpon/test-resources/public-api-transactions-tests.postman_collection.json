{
  "info": {
    "_postman_id": "503b80a7-dd73-4ed0-8aa6-5eaaa06f9ea5",
    "name": "Public API Tests Collection",
    "description": "**The subesquent folders are added in a specific order please dont change it else it may create some issues with the tests**",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "updatedAt": "2023-04-07T09:14:31.000Z",
    "uid": "24163049-503b80a7-dd73-4ed0-8aa6-5eaaa06f9ea5"
  },
  "item": [
    {
      "name": "Transactions",
      "item": [
        {
          "name": "200 Response",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5493f52e-37bd-40cc-8bcd-86aca6541429",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "",
                  "pm.test(\"Test transactionId is Same\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var inputJson = JSON.parse(pm.request.body.raw)",
                  "    const inputTransactionId = inputJson.transactionId",
                  "    pm.expect(jsonData.transactionId).eq(inputTransactionId)",
                  "});",
                  "",
                  "pm.test(\"Have executed Rules\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"executedRules\");",
                  "});",
                  "",
                  "pm.test(\"Have hitRules Rules\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"hitRules\")",
                  "});",
                  "",
                  "pm.test(\"Have atleast one executedRules\", function () {",
                  "    var jsonData = pm.response.json()",
                  "    const executedRules = jsonData.executedRules.length > 0",
                  "    pm.expect(executedRules).eq(true)",
                  "})"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "79cf4c20-1b65-40e6-a97a-2091b078d496",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"{{transactionId}}\",\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": {{timestamp}},\n  \"originAmountDetails\": {\n    \"country\": \"IN\",\n    \"transactionAmount\": 100044440,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": 10033.34,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"GENERIC_BANK_ACCOUNT\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "24163049-79cf4c20-1b65-40e6-a97a-2091b078d496"
        },
        {
          "name": "No Api Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4eb48a0b-b251-4575-b314-4fa1e0efa551",
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Should Give Unauthorized\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Unauthorized\");",
                  "});",
                  "",
                  "pm.test(\"Content-Type is present\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\");",
                  "});",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "55f3420c-0450-4b9c-9973-63c6ebe98757",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"{{transactionId}}\",\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": {{timestamp}},\n  \"originAmountDetails\": {\n    \"country\": \"IN\",\n    \"transactionAmount\": 100044440,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": 10033.34,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"GENERIC_BANK_ACCOUNT\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "24163049-55f3420c-0450-4b9c-9973-63c6ebe98757"
        },
        {
          "name": "Incorrect Domain",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8541af14-c7e4-4096-aa9e-d392b0f1f6ea",
                "exec": [
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test(\"Your test name\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "b6a56512-bc67-4697-80aa-319f22aaae6a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"{{transactionId}}\",\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": {{timestamp}},\n  \"originAmountDetails\": {\n    \"country\": \"IN\",\n    \"transactionAmount\": 100044440,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": 10033.34,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"GENERIC_BANK_ACCOUNT\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{incorrectDomain}}/transactions",
              "host": ["{{incorrectDomain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "24163049-b6a56512-bc67-4697-80aa-319f22aaae6a"
        },
        {
          "name": "Incorrect API Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "46863b08-add7-420a-88fd-8647507f2cb2",
                "exec": [
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test(\"Your test name\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.Message).to.eql(\"User is not authorized to access this resource with an explicit deny\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "9da866b3-e5cf-4fbb-a660-cc12369164bb",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}1"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"{{transactionId}}\",\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": {{timestamp}},\n  \"originAmountDetails\": {\n    \"country\": \"IN\",\n    \"transactionAmount\": 100044440,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": 10033.34,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"GENERIC_BANK_ACCOUNT\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "24163049-9da866b3-e5cf-4fbb-a660-cc12369164bb"
        },
        {
          "name": "No Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d3c29c61-4681-43ea-8368-ad0267114a6a",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Invalid Request Body Test\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"timestamp\\\",\\\"transactionId\\\"])]\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "2ec6314f-635f-4bf5-8cf9-6797887ef8ed",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "24163049-2ec6314f-635f-4bf5-8cf9-6797887ef8ed"
        },
        {
          "name": "Transaction Id not Given",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b6fe03e0-63fc-4bee-b091-5059b8cb3677",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Invalid Request Body Test\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"transactionId\\\"])]\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "c4556296-baf7-4237-bdc0-14ee1ae4b37c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": {{timestamp}},\n  \"originAmountDetails\": {\n    \"country\": \"IN\",\n    \"transactionAmount\": 100044440,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": 10033.34,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"GENERIC_BANK_ACCOUNT\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "24163049-c4556296-baf7-4237-bdc0-14ee1ae4b37c"
        },
        {
          "name": "Incorrect Type Provided in Transaction Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9c2f9983-9330-41cc-a724-05cb70a95370",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Invalid Request Body Test\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance type (boolean) does not match any allowed primitive type (allowed: [\\\"string\\\"])]\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "06de28da-9558-434d-b4e0-1dd3e2f8ac72",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": true,\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": {{timestamp}},\n  \"originAmountDetails\": {\n    \"country\": \"IN\",\n    \"transactionAmount\": 100044440,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": 10033.34,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"GENERIC_BANK_ACCOUNT\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "24163049-06de28da-9558-434d-b4e0-1dd3e2f8ac72"
        },
        {
          "name": "Incorrect Timestamp",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5b38f334-95fb-41ee-8045-5a9ed4bad4d4",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Invalid Request Body Test\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[numeric instance is lower than the required minimum (minimum: 1262300400000, found: 1)]\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "94ec0f6c-5155-4764-8d77-0a960d73c33b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"{{transactionId}}\",\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": 1,\n  \"originAmountDetails\": {\n    \"country\": \"IN\",\n    \"transactionAmount\": 100044440,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": 10033.34,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"GENERIC_BANK_ACCOUNT\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "24163049-94ec0f6c-5155-4764-8d77-0a960d73c33b"
        },
        {
          "name": "Duplicate Transaction Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "54f3f499-1040-479c-8130-836d759e251c",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Test transactionId is Same\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var inputJson = JSON.parse(pm.request.body.raw)",
                  "    const inputTransactionId = inputJson.transactionId",
                  "    pm.expect(jsonData.transactionId).eq(inputTransactionId)",
                  "});",
                  "",
                  "pm.test(\"Test Message of Same transaction Id\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"The provided transactionId already exists. No rules were run. If you want to update the attributes of this transaction, please use transaction events instead.\");",
                  "});",
                  "",
                  "pm.test(\"Have executed Rules\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"executedRules\");",
                  "});",
                  "",
                  "pm.test(\"Have hitRules Rules\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"hitRules\")",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "ea5b4126-d74f-4e9d-9397-355d38b5c3df",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"{{transactionId}}\",\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": {{timestamp}},\n  \"originAmountDetails\": {\n    \"country\": \"IN\",\n    \"transactionAmount\": 100044440,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": 10033.34,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"GENERIC_BANK_ACCOUNT\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "24163049-ea5b4126-d74f-4e9d-9397-355d38b5c3df"
        },
        {
          "name": "Invalid Method",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c2442a1f-faf8-490a-9c84-a32643bfbb8e",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Invalid Request Body Test\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance failed to match exactly one schema (matched 0 out of 9)]\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "bc38c401-f80a-4bca-938d-fc0aff8197fd",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"{{transactionId}}\",\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": {{timestamp}},\n  \"originAmountDetails\": {\n    \"country\": \"IN\",\n    \"transactionAmount\": 100044440,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": 10033.34,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"AMAN\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "24163049-bc38c401-f80a-4bca-938d-fc0aff8197fd"
        },
        {
          "name": "Invalid Country Code Given",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e57be525-5260-4d9c-90c3-6b7a1f2dad95",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Invalid Request Body Test\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance value (\\\"AB\\\") not found in enum (possible values: [\\\"AF\\\",\\\"AL\\\",\\\"DZ\\\",\\\"AS\\\",\\\"AD\\\",\\\"AO\\\",\\\"AI\\\",\\\"AQ\\\",\\\"AG\\\",\\\"AR\\\",\\\"AM\\\",\\\"AW\\\",\\\"AU\\\",\\\"AT\\\",\\\"AZ\\\",\\\"BS\\\",\\\"BH\\\",\\\"BD\\\",\\\"BB\\\",\\\"BY\\\",\\\"BE\\\",\\\"BZ\\\",\\\"BJ\\\",\\\"BM\\\",\\\"BT\\\",\\\"BO\\\",\\\"BQ\\\",\\\"BA\\\",\\\"BW\\\",\\\"BV\\\",\\\"BR\\\",\\\"IO\\\",\\\"BN\\\",\\\"BG\\\",\\\"BF\\\",\\\"BI\\\",\\\"CV\\\",\\\"KH\\\",\\\"CM\\\",\\\"CA\\\",\\\"KY\\\",\\\"CF\\\",\\\"TD\\\",\\\"CL\\\",\\\"CN\\\",\\\"CX\\\",\\\"CC\\\",\\\"CO\\\",\\\"KM\\\",\\\"CD\\\",\\\"CG\\\",\\\"CK\\\",\\\"CR\\\",\\\"HR\\\",\\\"CU\\\",\\\"CW\\\",\\\"CY\\\",\\\"CZ\\\",\\\"CI\\\",\\\"DK\\\",\\\"DJ\\\",\\\"DM\\\",\\\"DO\\\",\\\"EC\\\",\\\"EG\\\",\\\"SV\\\",\\\"GQ\\\",\\\"ER\\\",\\\"EE\\\",\\\"SZ\\\",\\\"ET\\\",\\\"FK\\\",\\\"FO\\\",\\\"FJ\\\",\\\"FI\\\",\\\"FR\\\",\\\"GF\\\",\\\"PF\\\",\\\"TF\\\",\\\"GA\\\",\\\"GM\\\",\\\"GE\\\",\\\"DE\\\",\\\"GH\\\",\\\"GI\\\",\\\"GR\\\",\\\"GL\\\",\\\"GD\\\",\\\"GP\\\",\\\"GU\\\",\\\"GT\\\",\\\"GG\\\",\\\"GN\\\",\\\"GW\\\",\\\"GY\\\",\\\"HT\\\",\\\"HM\\\",\\\"VA\\\",\\\"HN\\\",\\\"HK\\\",\\\"HU\\\",\\\"IS\\\",\\\"IN\\\",\\\"ID\\\",\\\"IR\\\",\\\"IQ\\\",\\\"IE\\\",\\\"IM\\\",\\\"IL\\\",\\\"IT\\\",\\\"JM\\\",\\\"JP\\\",\\\"JE\\\",\\\"JO\\\",\\\"KZ\\\",\\\"KE\\\",\\\"KI\\\",\\\"KP\\\",\\\"KR\\\",\\\"KW\\\",\\\"KG\\\",\\\"LA\\\",\\\"LV\\\",\\\"LB\\\",\\\"LS\\\",\\\"LR\\\",\\\"LY\\\",\\\"LI\\\",\\\"LT\\\",\\\"LU\\\",\\\"MO\\\",\\\"MG\\\",\\\"MW\\\",\\\"MY\\\",\\\"MV\\\",\\\"ML\\\",\\\"MT\\\",\\\"MH\\\",\\\"MQ\\\",\\\"MR\\\",\\\"MU\\\",\\\"YT\\\",\\\"MX\\\",\\\"FM\\\",\\\"MD\\\",\\\"MC\\\",\\\"MN\\\",\\\"ME\\\",\\\"MS\\\",\\\"MA\\\",\\\"MZ\\\",\\\"MM\\\",\\\"NA\\\",\\\"NR\\\",\\\"NP\\\",\\\"NL\\\",\\\"NC\\\",\\\"NZ\\\",\\\"NI\\\",\\\"NE\\\",\\\"NG\\\",\\\"NU\\\",\\\"NF\\\",\\\"MK\\\",\\\"MP\\\",\\\"NO\\\",\\\"OM\\\",\\\"PK\\\",\\\"PW\\\",\\\"PS\\\",\\\"PA\\\",\\\"PG\\\",\\\"PY\\\",\\\"PE\\\",\\\"PH\\\",\\\"PN\\\",\\\"PL\\\",\\\"PT\\\",\\\"PR\\\",\\\"QA\\\",\\\"RO\\\",\\\"RU\\\",\\\"RW\\\",\\\"RE\\\",\\\"BL\\\",\\\"SH\\\",\\\"KN\\\",\\\"LC\\\",\\\"MF\\\",\\\"PM\\\",\\\"VC\\\",\\\"WS\\\",\\\"SM\\\",\\\"ST\\\",\\\"SA\\\",\\\"SN\\\",\\\"RS\\\",\\\"SC\\\",\\\"SL\\\",\\\"SG\\\",\\\"SX\\\",\\\"SK\\\",\\\"SI\\\",\\\"SB\\\",\\\"SO\\\",\\\"ZA\\\",\\\"GS\\\",\\\"SS\\\",\\\"ES\\\",\\\"LK\\\",\\\"SD\\\",\\\"SR\\\",\\\"SJ\\\",\\\"SE\\\",\\\"CH\\\",\\\"SY\\\",\\\"TW\\\",\\\"TJ\\\",\\\"TZ\\\",\\\"TH\\\",\\\"TL\\\",\\\"TG\\\",\\\"TK\\\",\\\"TO\\\",\\\"TT\\\",\\\"TN\\\",\\\"TM\\\",\\\"TC\\\",\\\"TV\\\",\\\"TR\\\",\\\"UG\\\",\\\"UA\\\",\\\"AE\\\",\\\"GB\\\",\\\"UM\\\",\\\"US\\\",\\\"UY\\\",\\\"UZ\\\",\\\"VU\\\",\\\"VE\\\",\\\"VN\\\",\\\"VG\\\",\\\"VI\\\",\\\"WF\\\",\\\"EH\\\",\\\"YE\\\",\\\"ZM\\\",\\\"ZW\\\",\\\"AX\\\",\\\"N/A\\\"])]\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "0dec913d-6c23-4931-b0b1-75c6dd322afd",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"{{transactionId}}\",\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": {{timestamp}},\n  \"originAmountDetails\": {\n    \"country\": \"AB\",\n    \"transactionAmount\": 100044440,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": 10033.34,\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"GENERIC_BANK_ACCOUNT\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "24163049-0dec913d-6c23-4931-b0b1-75c6dd322afd"
        },
        {
          "name": "Only Transaction Id and Timestamp Given",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c02622f4-6b05-4e97-aced-d2ad4661bd64",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "",
                  "pm.test(\"Test transactionId is Same\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var inputJson = JSON.parse(pm.request.body.raw)",
                  "    const inputTransactionId = inputJson.transactionId",
                  "    pm.expect(jsonData.transactionId).eq(inputTransactionId)",
                  "});",
                  "",
                  "pm.test(\"Have executed Rules\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"executedRules\");",
                  "});",
                  "",
                  "pm.test(\"Have hitRules Rules\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"hitRules\")",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "d85b6016-5130-4479-ac20-d31394a288e0",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"{{transactionId}}-12\",\n  \"timestamp\": {{timestamp}}\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "24163049-d85b6016-5130-4479-ac20-d31394a288e0"
        },
        {
          "name": "Amount Provided as String",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f00f1b66-462d-4740-8571-4de6a980f27d",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Invalid Request Body Test\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance type (string) does not match any allowed primitive type (allowed: [\\\"integer\\\",\\\"number\\\"])]\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "0aa76e64-8c85-4260-9b5d-ede674406d09",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"{{transactionId}}\",\n  \"type\": \"TRANSFER\",\n  \"originUserId\": \"1\",\n  \"destinationUserId\": \"3\",\n  \"timestamp\": {{timestamp}},\n  \"originAmountDetails\": {\n    \"country\": \"IN\",\n    \"transactionAmount\": \"100044440\",\n    \"transactionCurrency\": \"USD\"\n  },\n  \"destinationAmountDetails\": {\n    \"country\": \"DE\",\n    \"transactionAmount\": \"10033.34\",\n    \"transactionCurrency\": \"USD\"\n  },\n  \"promotionCodeUsed\": true,\n  \"originPaymentDetails\": {\n    \"method\": \"GENERIC_BANK_ACCOUNT\",\n    \"accountType\": \"Savings\",\n    \"accountNumber\": \"121445521\",\n    \"bankName\": \"State Bank of India\",\n    \"name\": \"Binod Ramamurthie\",\n    \"bankCode\": \"SBI0033921\",\n    \"specialInstructions\": \"IMPS\",\n    \"paymentChannel\": \"Intra Bank\" \n  },\n  \"destinationPaymentDetails\": {\n    \"method\": \"CARD\",\n    \"cardFingerprint\": \"000000000000\",\n    \"cardIssuedCountry\": \"CN\",\n    \"cardAuthenticated\": false,\n    \"cardLast4Digits\": \"0019\",\n    \"cardBrand\": \"DISCOVER\",\n    \"cardFunding\": \"CREDIT\"\n  },\n  \"reference\": \"dog\",\n  \"tags\": [{\"key\": \"flowType\", \"value\": \"wallet\"}]\n}"
            },
            "url": {
              "raw": "{{domain}}/transactions",
              "host": ["{{domain}}"],
              "path": ["transactions"]
            }
          },
          "response": [],
          "uid": "24163049-0aa76e64-8c85-4260-9b5d-ede674406d09"
        }
      ],
      "id": "4d1b842a-c27f-427d-b7af-e09ebc923e55",
      "uid": "24163049-4d1b842a-c27f-427d-b7af-e09ebc923e55"
    },
    {
      "name": "Consumer Users",
      "item": [
        {
          "name": "Create Consumer User 200",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Your test name\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var inputJson = JSON.parse(pm.request.body.raw)",
                  "    const userId = inputJson.userId",
                  "    ",
                  "    pm.expect(jsonData.userId).to.eql(userId);",
                  "});",
                  "",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"userId\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "5019659e-695d-4ff0-ad85-ef999a07a01f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"CONSUMER\",\n    \"createdTimestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}\",\n    \"reasonForAccountOpening\": [\n        \"Payment\",\n        \"Deposits\"\n    ],\n    \"userDetails\": {\n        \"name\": {\n            \"firstName\": \"Post Man\",\n            \"lastName\": \"Dugar\"\n        },\n        \"dateOfBirth\": \"2007-01-15\",\n        \"countryOfResidence\": \"US\",\n        \"countryOfNationality\": \"RU\"\n    },\n    \"legalDocuments\": [\n        {\n            \"documentType\": \"passport\",\n            \"documentNumber\": \"CB33GME6\",\n            \"documentIssuedDate\": 1639939034,\n            \"documentExpirationDate\": 1839939034,\n            \"documentIssuedCountry\": \"US\"\n        }\n    ],\n    \"tags\": [\n        {\n            \"key\": \"hello\",\n            \"value\": \"wallet\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/consumer/users",
              "host": ["{{domain}}"],
              "path": ["consumer", "users"]
            }
          },
          "response": [],
          "uid": "24163049-5019659e-695d-4ff0-ad85-ef999a07a01f"
        },
        {
          "name": "Duplicate User Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Check UserId\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var inputJson = JSON.parse(pm.request.body.raw)",
                  "    const userId = inputJson.userId",
                  "    ",
                  "    pm.expect(jsonData.userId).to.eql(userId);",
                  "});",
                  "",
                  "pm.test(\"Check Message in Duplicate UserId\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"The provided userId already exists. The user attribute updates are not saved. If you want to update the attributes of this user, please use user events instead.\");",
                  "});",
                  "",
                  "",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"userId\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "29d3f46a-99ee-42b7-aea3-ec19739d29d7",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"CONSUMER\",\n    \"createdTimestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}\",\n    \"reasonForAccountOpening\": [\n        \"Payment\",\n        \"Deposits\"\n    ],\n    \"userDetails\": {\n        \"name\": {\n            \"firstName\": \"Post Man\",\n            \"lastName\": \"Dugar\"\n        },\n        \"dateOfBirth\": \"2007-01-15\",\n        \"countryOfResidence\": \"US\",\n        \"countryOfNationality\": \"RU\"\n    },\n    \"legalDocuments\": [\n        {\n            \"documentType\": \"passport\",\n            \"documentNumber\": \"CB33GME6\",\n            \"documentIssuedDate\": 1639939034,\n            \"documentExpirationDate\": 1839939034,\n            \"documentIssuedCountry\": \"US\"\n        }\n    ],\n    \"tags\": [\n        {\n            \"key\": \"hello\",\n            \"value\": \"wallet\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/consumer/users",
              "host": ["{{domain}}"],
              "path": ["consumer", "users"]
            }
          },
          "response": [],
          "uid": "24163049-29d3f46a-99ee-42b7-aea3-ec19739d29d7"
        },
        {
          "name": "Incorrect Type in First Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance type (boolean) does not match any allowed primitive type (allowed: [\\\"string\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "70eef699-56d0-4f1a-bfe4-00a52f0bb1d3",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"CONSUMER\",\n    \"createdTimestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}-2\",\n    \"reasonForAccountOpening\": [\n        \"Payment\",\n        \"Deposits\"\n    ],\n    \"userDetails\": {\n        \"name\": {\n            \"firstName\": true,\n            \"lastName\": \"Dugar\"\n        },\n        \"dateOfBirth\": \"2007-01-15\",\n        \"countryOfResidence\": \"US\",\n        \"countryOfNationality\": \"RU\"\n    },\n    \"legalDocuments\": [\n        {\n            \"documentType\": \"passport\",\n            \"documentNumber\": \"CB33GME6\",\n            \"documentIssuedDate\": 1639939034,\n            \"documentExpirationDate\": 1839939034,\n            \"documentIssuedCountry\": \"US\"\n        }\n    ],\n    \"tags\": [\n        {\n            \"key\": \"hello\",\n            \"value\": \"wallet\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/consumer/users",
              "host": ["{{domain}}"],
              "path": ["consumer", "users"]
            }
          },
          "response": [],
          "uid": "24163049-70eef699-56d0-4f1a-bfe4-00a52f0bb1d3"
        },
        {
          "name": "First Name Not Provided",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"firstName\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "1bdf4796-1ebe-4202-863b-c8e064b5d7a7",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"CONSUMER\",\n    \"createdTimestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}\",\n    \"reasonForAccountOpening\": [\n        \"Payment\",\n        \"Deposits\"\n    ],\n    \"userDetails\": {\n        \"name\": {\n            \"lastName\": \"Test\"\n        },\n        \"dateOfBirth\": \"2007-01-15\",\n        \"countryOfResidence\": \"US\",\n        \"countryOfNationality\": \"RU\"\n    },\n    \"legalDocuments\": [\n        {\n            \"documentType\": \"passport\",\n            \"documentNumber\": \"CB33GME6\",\n            \"documentIssuedDate\": 1639939034,\n            \"documentExpirationDate\": 1839939034,\n            \"documentIssuedCountry\": \"US\"\n        }\n    ],\n    \"tags\": [\n        {\n            \"key\": \"hello\",\n            \"value\": \"test\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/consumer/users",
              "host": ["{{domain}}"],
              "path": ["consumer", "users"]
            }
          },
          "response": [],
          "uid": "24163049-1bdf4796-1ebe-4202-863b-c8e064b5d7a7"
        },
        {
          "name": "Value not Provided in Tags",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"value\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "a9b7e9ee-07f2-47d0-8765-78a239f20a63",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"CONSUMER\",\n    \"createdTimestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}\",\n    \"reasonForAccountOpening\": [\n        \"Payment\",\n        \"Deposits\"\n    ],\n    \"userDetails\": {\n        \"name\": {\n            \"firstName\": \"Post man\",\n            \"lastName\": \"Test\"\n        },\n        \"dateOfBirth\": \"2007-01-15\",\n        \"countryOfResidence\": \"US\",\n        \"countryOfNationality\": \"RU\"\n    },\n    \"legalDocuments\": [\n        {\n            \"documentType\": \"passport\",\n            \"documentNumber\": \"CB33GME6\",\n            \"documentIssuedDate\": 1639939034,\n            \"documentExpirationDate\": 1839939034,\n            \"documentIssuedCountry\": \"US\"\n        }\n    ],\n    \"tags\": [\n        {\n            \"key\": \"hello\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/consumer/users",
              "host": ["{{domain}}"],
              "path": ["consumer", "users"]
            }
          },
          "response": [],
          "uid": "24163049-a9b7e9ee-07f2-47d0-8765-78a239f20a63"
        },
        {
          "name": "User Id not givern",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"userId\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "f8d88c23-64c8-4390-92ca-e046766a43dc",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"CONSUMER\",\n    \"createdTimestamp\": {{timestamp}},\n    \"reasonForAccountOpening\": [\n        \"Payment\",\n        \"Deposits\"\n    ],\n    \"userDetails\": {\n        \"name\": {\n            \"firstName\": \"Post Man\",\n            \"lastName\": \"Test\"\n        },\n        \"dateOfBirth\": \"2007-01-15\",\n        \"countryOfResidence\": \"US\",\n        \"countryOfNationality\": \"RU\"\n    },\n    \"legalDocuments\": [\n        {\n            \"documentType\": \"passport\",\n            \"documentNumber\": \"CB33GME6\",\n            \"documentIssuedDate\": 1639939034,\n            \"documentExpirationDate\": 1839939034,\n            \"documentIssuedCountry\": \"US\"\n        }\n    ],\n    \"tags\": [\n        {\n            \"key\": \"hello\",\n            \"value\": \"wallet\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/consumer/users",
              "host": ["{{domain}}"],
              "path": ["consumer", "users"]
            }
          },
          "response": [],
          "uid": "24163049-f8d88c23-64c8-4390-92ca-e046766a43dc"
        },
        {
          "name": "No Api Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Unauthorized\");",
                  "});",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "c587528e-708e-4e28-b82e-603870a3666b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"CONSUMER\",\n    \"createdTimestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}\",\n    \"reasonForAccountOpening\": [\n        \"Payment\",\n        \"Deposits\"\n    ],\n    \"userDetails\": {\n        \"name\": {\n            \"firstName\": \"Post Man\",\n            \"lastName\": \"Test\"\n        },\n        \"dateOfBirth\": \"2007-01-15\",\n        \"countryOfResidence\": \"US\",\n        \"countryOfNationality\": \"RU\"\n    },\n    \"legalDocuments\": [\n        {\n            \"documentType\": \"passport\",\n            \"documentNumber\": \"CB33GME6\",\n            \"documentIssuedDate\": 1639939034,\n            \"documentExpirationDate\": 1839939034,\n            \"documentIssuedCountry\": \"US\"\n        }\n    ],\n    \"tags\": [\n        {\n            \"key\": \"hello\",\n            \"value\": \"wallet\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/consumer/users",
              "host": ["{{domain}}"],
              "path": ["consumer", "users"]
            }
          },
          "response": [],
          "uid": "24163049-c587528e-708e-4e28-b82e-603870a3666b"
        },
        {
          "name": "Incorrect-Domain",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "",
                  "pm.test(\"Matches Key\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Matches Text\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "c09bba7c-068f-431e-b7fb-d2e53bdff618",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"CONSUMER\",\n    \"createdTimestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}\",\n    \"reasonForAccountOpening\": [\n        \"Payment\",\n        \"Deposits\"\n    ],\n    \"userDetails\": {\n        \"name\": {\n            \"firstName\": \"Post Man\",\n            \"lastName\": \"Test\"\n        },\n        \"dateOfBirth\": \"2007-01-15\",\n        \"countryOfResidence\": \"US\",\n        \"countryOfNationality\": \"RU\"\n    },\n    \"legalDocuments\": [\n        {\n            \"documentType\": \"passport\",\n            \"documentNumber\": \"CB33GME6\",\n            \"documentIssuedDate\": 1639939034,\n            \"documentExpirationDate\": 1839939034,\n            \"documentIssuedCountry\": \"US\"\n        }\n    ],\n    \"tags\": [\n        {\n            \"key\": \"hello\",\n            \"value\": \"wallet\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{incorrectDomain}}/consumer/users",
              "host": ["{{incorrectDomain}}"],
              "path": ["consumer", "users"]
            }
          },
          "response": [],
          "uid": "24163049-c09bba7c-068f-431e-b7fb-d2e53bdff618"
        },
        {
          "name": "No Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[Unknown error parsing request body]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "86c52ad2-7288-4d8f-9314-dada2a6dc286",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{domain}}/consumer/users",
              "host": ["{{domain}}"],
              "path": ["consumer", "users"]
            }
          },
          "response": [],
          "uid": "24163049-86c52ad2-7288-4d8f-9314-dada2a6dc286"
        },
        {
          "name": "Empty Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"createdTimestamp\\\",\\\"userId\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "482986ad-46b3-4345-9542-dfcaf03dd65c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{domain}}/consumer/users",
              "host": ["{{domain}}"],
              "path": ["consumer", "users"]
            }
          },
          "response": [],
          "uid": "24163049-482986ad-46b3-4345-9542-dfcaf03dd65c"
        }
      ],
      "id": "bbd47037-d9fb-4727-be02-43a93facffcf",
      "uid": "24163049-bbd47037-d9fb-4727-be02-43a93facffcf"
    },
    {
      "name": "Business Users",
      "item": [
        {
          "name": "Create Business User 200",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Match Business Name\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    const data = JSON.parse(pm.request.body.raw)",
                  "    const businessUserId = data.userId",
                  "    pm.expect(jsonData.userId).to.eql(businessUserId)",
                  "});",
                  "",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"userId\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "ceeaafd1-98c3-4112-928d-9d7b949b3815",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{businessUserId}}\",\n  \"createdTimestamp\": {{timestamp}},\n  \"legalEntity\": {\n    \"companyGeneralDetails\": {\n      \"legalName\": \"Jameson Breweries\",\n      \"businessIndustry\": [\n        \"Alcohol\", \"Scotch\"\n      ]\n    },\n    \"companyFinancialDetails\": {\n      \"expectedTransactionAmountPerMonth\": {\n        \"amountValue\": 5160000,\n        \"amountCurrency\": \"GBP\"\n      },\n      \"expectedTurnoverPerMonth\": {\n        \"amountValue\": 30000090,\n        \"amountCurrency\": \"GBP\"\n      },\n      \"tags\": [\n        {\n          \"key\": \"averageNumberOfPaymentsPerMonth\",\n          \"value\": \"90\"\n        }\n      ]\n    },\n    \"companyRegistrationDetails\": {\n      \"registrationIdentifier\": \"IN22313\",\n      \"registrationCountry\": \"DK\",\n      \"dateOfRegistration\": \"2022-01-01\",\n      \"taxIdentifier\": \"BDH3N221E\",\n      \"legalEntityType\": \"Pvt Ltd\"\n    },\n    \"contactDetails\": {\n      \"websites\": [\n        \"jamieson.com\"\n      ]\n    }\n  },\n  \"allowedPaymentMethods\": [\n    \"GENERIC_BANK_ACCOUNT\", \"WALLET\", \"CARD\", \"ACH\"\n  ]\n}"
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "24163049-ceeaafd1-98c3-4112-928d-9d7b949b3815"
        },
        {
          "name": "Duplicate Business",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Check UserId\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var inputJson = JSON.parse(pm.request.body.raw)",
                  "    const userId = inputJson.userId",
                  "    ",
                  "    pm.expect(jsonData.userId).to.eql(userId);",
                  "});",
                  "",
                  "pm.test(\"Check Message in Duplicate UserId\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"The provided userId already exists. The user attribute updates are not saved. If you want to update the attributes of this user, please use user events instead.\");",
                  "});",
                  "",
                  "",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"userId\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "56339335-3260-49fb-8ce3-888af4520f66",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{businessUserId}}\",\n  \"createdTimestamp\": {{timestamp}},\n  \"legalEntity\": {\n    \"companyGeneralDetails\": {\n      \"legalName\": \"Jameson Breweries\",\n      \"businessIndustry\": [\n        \"Alcohol\", \"Scotch\"\n      ]\n    },\n    \"companyFinancialDetails\": {\n      \"expectedTransactionAmountPerMonth\": {\n        \"amountValue\": 5160000,\n        \"amountCurrency\": \"GBP\"\n      },\n      \"expectedTurnoverPerMonth\": {\n        \"amountValue\": 30000090,\n        \"amountCurrency\": \"GBP\"\n      },\n      \"tags\": [\n        {\n          \"key\": \"averageNumberOfPaymentsPerMonth\",\n          \"value\": \"90\"\n        }\n      ]\n    },\n    \"companyRegistrationDetails\": {\n      \"registrationIdentifier\": \"IN22313\",\n      \"registrationCountry\": \"DK\",\n      \"dateOfRegistration\": \"2022-01-01\",\n      \"taxIdentifier\": \"BDH3N221E\",\n      \"legalEntityType\": \"Pvt Ltd\"\n    },\n    \"contactDetails\": {\n      \"websites\": [\n        \"jamieson.com\"\n      ]\n    }\n  },\n  \"allowedPaymentMethods\": [\n    \"GENERIC_BANK_ACCOUNT\", \"WALLET\", \"CARD\", \"ACH\"\n  ]\n}"
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "24163049-56339335-3260-49fb-8ce3-888af4520f66"
        },
        {
          "name": "Linked Entity Does not Exists",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Check Error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    ",
                  "    pm.expect(jsonData.error).to.eql(\"BadRequestError\");",
                  "});",
                  "",
                  "pm.test(\"Check Message in Duplicate UserId\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Parent user ID : B-21 passed in linkedEntities does not exist. Please create the entitiy before linking it\");",
                  "});",
                  "",
                  "",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"error\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "8227015d-b703-462f-a46c-76f16da0b8e1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{businessUserId}}-12qq\",\n  \"createdTimestamp\": {{timestamp}},\n  \"legalEntity\": {\n    \"companyGeneralDetails\": {\n      \"legalName\": \"Jameson Breweries\",\n      \"businessIndustry\": [\n        \"Alcohol\", \"Scotch\"\n      ]\n    },\n    \"companyFinancialDetails\": {\n      \"expectedTransactionAmountPerMonth\": {\n        \"amountValue\": 5160000,\n        \"amountCurrency\": \"GBP\"\n      },\n      \"expectedTurnoverPerMonth\": {\n        \"amountValue\": 30000090,\n        \"amountCurrency\": \"GBP\"\n      },\n      \"tags\": [\n        {\n          \"key\": \"averageNumberOfPaymentsPerMonth\",\n          \"value\": \"90\"\n        }\n      ]\n    },\n    \"companyRegistrationDetails\": {\n      \"registrationIdentifier\": \"IN22313\",\n      \"registrationCountry\": \"DK\",\n      \"dateOfRegistration\": \"2022-01-01\",\n      \"taxIdentifier\": \"BDH3N221E\",\n      \"legalEntityType\": \"Pvt Ltd\"\n    },\n    \"contactDetails\": {\n      \"websites\": [\n        \"jamieson.com\"\n      ]\n    }\n  },\n  \"linkedEntities\": {\n      \"parentUserId\": \"B-21\",\n      \"childUserIds\": [\"B-1\", \"B-22\", \"B-20\"]\n  },\n  \"allowedPaymentMethods\": [\n    \"GENERIC_BANK_ACCOUNT\", \"WALLET\", \"CARD\", \"ACH\"\n  ]\n}"
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "24163049-8227015d-b703-462f-a46c-76f16da0b8e1"
        },
        {
          "name": "Legal Name Not Provided",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"legalName\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "b2e81c21-4094-4c39-8ed6-a1419b68cb4e",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{businessUserId}}\",\n  \"createdTimestamp\": {{timestamp}},\n  \"legalEntity\": {\n    \"companyGeneralDetails\": {\n      \"businessIndustry\": [\n        \"Alcohol\", \"Scotch\"\n      ]\n    },\n    \"companyFinancialDetails\": {\n      \"expectedTransactionAmountPerMonth\": {\n        \"amountValue\": 5160000,\n        \"amountCurrency\": \"GBP\"\n      },\n      \"expectedTurnoverPerMonth\": {\n        \"amountValue\": 30000090,\n        \"amountCurrency\": \"GBP\"\n      },\n      \"tags\": [\n        {\n          \"key\": \"averageNumberOfPaymentsPerMonth\",\n          \"value\": \"90\"\n        }\n      ]\n    },\n    \"companyRegistrationDetails\": {\n      \"registrationIdentifier\": \"IN22313\",\n      \"registrationCountry\": \"DK\",\n      \"dateOfRegistration\": \"2022-01-01\",\n      \"taxIdentifier\": \"BDH3N221E\",\n      \"legalEntityType\": \"Pvt Ltd\"\n    },\n    \"contactDetails\": {\n      \"websites\": [\n        \"jamieson.com\"\n      ]\n    }\n  },\n  \"allowedPaymentMethods\": [\n    \"GENERIC_BANK_ACCOUNT\", \"WALLET\", \"CARD\", \"ACH\"\n  ]\n}"
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "24163049-b2e81c21-4094-4c39-8ed6-a1419b68cb4e"
        },
        {
          "name": "Incorrect Type of Legal Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance type (integer) does not match any allowed primitive type (allowed: [\\\"string\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "38162d6e-27df-4628-9514-3cb8793697fd",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{businessUserId}}\",\n  \"createdTimestamp\": {{timestamp}},\n  \"legalEntity\": {\n    \"companyGeneralDetails\": {\n      \"legalName\": 123,\n      \"businessIndustry\": [\n        \"Alcohol\", \"Scotch\"\n      ]\n    },\n    \"companyFinancialDetails\": {\n      \"expectedTransactionAmountPerMonth\": {\n        \"amountValue\": 5160000,\n        \"amountCurrency\": \"GBP\"\n      },\n      \"expectedTurnoverPerMonth\": {\n        \"amountValue\": 30000090,\n        \"amountCurrency\": \"GBP\"\n      },\n      \"tags\": [\n        {\n          \"key\": \"averageNumberOfPaymentsPerMonth\",\n          \"value\": \"90\"\n        }\n      ]\n    },\n    \"companyRegistrationDetails\": {\n      \"registrationIdentifier\": \"IN22313\",\n      \"registrationCountry\": \"DK\",\n      \"dateOfRegistration\": \"2022-01-01\",\n      \"taxIdentifier\": \"BDH3N221E\",\n      \"legalEntityType\": \"Pvt Ltd\"\n    },\n    \"contactDetails\": {\n      \"websites\": [\n        \"jamieson.com\"\n      ]\n    }\n  },\n  \"allowedPaymentMethods\": [\n    \"GENERIC_BANK_ACCOUNT\", \"WALLET\", \"CARD\", \"ACH\"\n  ]\n}"
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "24163049-38162d6e-27df-4628-9514-3cb8793697fd"
        },
        {
          "name": "Company General Details Not Provided",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"companyGeneralDetails\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "9fc5d81c-101e-491f-bfbd-539f124671a4",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"BUSINESS\",\n    \"userId\": \"{{businessUserId}}\",\n    \"createdTimestamp\": {{timestamp}},\n    \"legalEntity\": {\n        \"companyFinancialDetails\": {\n            \"expectedTransactionAmountPerMonth\": {\n                \"amountValue\": 5160000,\n                \"amountCurrency\": \"GBP\"\n            },\n            \"expectedTurnoverPerMonth\": {\n                \"amountValue\": 30000090,\n                \"amountCurrency\": \"GBP\"\n            },\n            \"tags\": [\n                {\n                    \"key\": \"averageNumberOfPaymentsPerMonth\",\n                    \"value\": \"90\"\n                }\n            ]\n        },\n        \"companyRegistrationDetails\": {\n            \"registrationIdentifier\": \"IN22313\",\n            \"registrationCountry\": \"DK\",\n            \"dateOfRegistration\": \"2022-01-01\",\n            \"taxIdentifier\": \"BDH3N221E\",\n            \"legalEntityType\": \"Pvt Ltd\"\n        },\n        \"contactDetails\": {\n            \"websites\": [\n                \"jamieson.com\"\n            ]\n        }\n    },\n    \"linkedEntities\": {\n        \"parentUserId\": \"B-21\",\n        \"childUserIds\": [\n            \"B-1\",\n            \"B-22\",\n            \"B-20\"\n        ]\n    },\n    \"allowedPaymentMethods\": [\n        \"GENERIC_BANK_ACCOUNT\",\n        \"WALLET\",\n        \"CARD\",\n        \"ACH\"\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "24163049-9fc5d81c-101e-491f-bfbd-539f124671a4"
        },
        {
          "name": "Value not Provided in Tags",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"value\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "68b94f30-4f0e-4a89-8586-43075acf89dd",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"userId\": \"{{businessUserId}}\",\n    \"createdTimestamp\": {{timestamp}},\n    \"legalEntity\": {\n        \"companyGeneralDetails\": {\n            \"legalName\": \"Jameson Breweries\",\n            \"businessIndustry\": [\n                \"Alcohol\",\n                \"Scotch\"\n            ]\n        },\n        \"companyFinancialDetails\": {\n            \"expectedTransactionAmountPerMonth\": {\n                \"amountValue\": 5160000,\n                \"amountCurrency\": \"GBP\"\n            },\n            \"expectedTurnoverPerMonth\": {\n                \"amountValue\": 30000090,\n                \"amountCurrency\": \"GBP\"\n            },\n            \"tags\": [\n                {\n                    \"key\": \"averageNumberOfPaymentsPerMonth\"\n                }\n            ]\n        },\n        \"companyRegistrationDetails\": {\n            \"registrationIdentifier\": \"IN22313\",\n            \"registrationCountry\": \"DK\",\n            \"dateOfRegistration\": \"2022-01-01\",\n            \"taxIdentifier\": \"BDH3N221E\",\n            \"legalEntityType\": \"Pvt Ltd\"\n        },\n        \"contactDetails\": {\n            \"websites\": [\n                \"jamieson.com\"\n            ]\n        }\n    },\n    \"linkedEntities\": {\n        \"parentUserId\": \"B-21\",\n        \"childUserIds\": [\n            \"B-1\",\n            \"B-22\",\n            \"B-20\"\n        ]\n    },\n    \"allowedPaymentMethods\": [\n        \"GENERIC_BANK_ACCOUNT\",\n        \"WALLET\",\n        \"CARD\",\n        \"ACH\"\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "24163049-68b94f30-4f0e-4a89-8586-43075acf89dd"
        },
        {
          "name": "User Id not givern",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"userId\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "614b531b-77fd-4891-9557-76b69c1bae77",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"BUSINESS\",\n    \"createdTimestamp\": {{timestamp}},\n    \"legalEntity\": {\n        \"companyGeneralDetails\": {\n            \"businessIndustry\": [\n                \"Alcohol\",\n                \"Scotch\"\n            ]\n        },\n        \"companyFinancialDetails\": {\n            \"expectedTransactionAmountPerMonth\": {\n                \"amountValue\": 5160000,\n                \"amountCurrency\": \"GBP\"\n            },\n            \"expectedTurnoverPerMonth\": {\n                \"amountValue\": 30000090,\n                \"amountCurrency\": \"GBP\"\n            },\n            \"tags\": [\n                {\n                    \"key\": \"averageNumberOfPaymentsPerMonth\",\n                    \"value\": \"90\"\n                }\n            ]\n        },\n        \"companyRegistrationDetails\": {\n            \"registrationIdentifier\": \"IN22313\",\n            \"registrationCountry\": \"DK\",\n            \"dateOfRegistration\": \"2022-01-01\",\n            \"taxIdentifier\": \"BDH3N221E\",\n            \"legalEntityType\": \"Pvt Ltd\"\n        },\n        \"contactDetails\": {\n            \"websites\": [\n                \"jamieson.com\"\n            ]\n        }\n    },\n    \"linkedEntities\": {\n        \"parentUserId\": \"B-21\",\n        \"childUserIds\": [\n            \"B-1\",\n            \"B-22\",\n            \"B-20\"\n        ]\n    },\n    \"allowedPaymentMethods\": [\n        \"GENERIC_BANK_ACCOUNT\",\n        \"WALLET\",\n        \"CARD\",\n        \"ACH\"\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "24163049-614b531b-77fd-4891-9557-76b69c1bae77"
        },
        {
          "name": "No Api Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Unauthorized\");",
                  "});",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "e7b1d3c9-652b-4487-9e0a-be1ecbe31125",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"BUSINESS\",\n    \"userId\": \"{{businessUserId}}\",\n    \"createdTimestamp\": {{timestamp}},\n    \"legalEntity\": {\n        \"companyGeneralDetails\": {\n            \"businessIndustry\": [\n                \"Alcohol\",\n                \"Scotch\"\n            ]\n        },\n        \"companyFinancialDetails\": {\n            \"expectedTransactionAmountPerMonth\": {\n                \"amountValue\": 5160000,\n                \"amountCurrency\": \"GBP\"\n            },\n            \"expectedTurnoverPerMonth\": {\n                \"amountValue\": 30000090,\n                \"amountCurrency\": \"GBP\"\n            },\n            \"tags\": [\n                {\n                    \"key\": \"averageNumberOfPaymentsPerMonth\",\n                    \"value\": \"90\"\n                }\n            ]\n        },\n        \"companyRegistrationDetails\": {\n            \"registrationIdentifier\": \"IN22313\",\n            \"registrationCountry\": \"DK\",\n            \"dateOfRegistration\": \"2022-01-01\",\n            \"taxIdentifier\": \"BDH3N221E\",\n            \"legalEntityType\": \"Pvt Ltd\"\n        },\n        \"contactDetails\": {\n            \"websites\": [\n                \"jamieson.com\"\n            ]\n        }\n    },\n    \"linkedEntities\": {\n        \"parentUserId\": \"B-21\",\n        \"childUserIds\": [\n            \"B-1\",\n            \"B-22\",\n            \"B-20\"\n        ]\n    },\n    \"allowedPaymentMethods\": [\n        \"GENERIC_BANK_ACCOUNT\",\n        \"WALLET\",\n        \"CARD\",\n        \"ACH\"\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "24163049-e7b1d3c9-652b-4487-9e0a-be1ecbe31125"
        },
        {
          "name": "Incorrect-Domain",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "",
                  "pm.test(\"Matches Key\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Matches Text\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "015c311a-d0ab-4a02-8fea-a30c89bf6e05",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"BUSINESS\",\n    \"createdTimestamp\": {{timestamp}},\n    \"legalEntity\": {\n        \"companyGeneralDetails\": {\n            \"businessIndustry\": [\n                \"Alcohol\",\n                \"Scotch\"\n            ]\n        },\n        \"companyFinancialDetails\": {\n            \"expectedTransactionAmountPerMonth\": {\n                \"amountValue\": 5160000,\n                \"amountCurrency\": \"GBP\"\n            },\n            \"expectedTurnoverPerMonth\": {\n                \"amountValue\": 30000090,\n                \"amountCurrency\": \"GBP\"\n            },\n            \"tags\": [\n                {\n                    \"key\": \"averageNumberOfPaymentsPerMonth\",\n                    \"value\": \"90\"\n                }\n            ]\n        },\n        \"companyRegistrationDetails\": {\n            \"registrationIdentifier\": \"IN22313\",\n            \"registrationCountry\": \"DK\",\n            \"dateOfRegistration\": \"2022-01-01\",\n            \"taxIdentifier\": \"BDH3N221E\",\n            \"legalEntityType\": \"Pvt Ltd\"\n        },\n        \"contactDetails\": {\n            \"websites\": [\n                \"jamieson.com\"\n            ]\n        }\n    },\n    \"linkedEntities\": {\n        \"parentUserId\": \"B-21\",\n        \"childUserIds\": [\n            \"B-1\",\n            \"B-22\",\n            \"B-20\"\n        ]\n    },\n    \"allowedPaymentMethods\": [\n        \"GENERIC_BANK_ACCOUNT\",\n        \"WALLET\",\n        \"CARD\",\n        \"ACH\"\n    ]\n}"
            },
            "url": {
              "raw": "{{incorrectDomain}}/business/users",
              "host": ["{{incorrectDomain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "24163049-015c311a-d0ab-4a02-8fea-a30c89bf6e05"
        },
        {
          "name": "No Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[Unknown error parsing request body]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "def827de-bc8b-42b6-86bb-f160ee66bae1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "24163049-def827de-bc8b-42b6-86bb-f160ee66bae1"
        },
        {
          "name": "Empty Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe7e581-24b3-4170-ac7c-fa8312693637",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string validationerrors\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"ValidationError Message Checker\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"createdTimestamp\\\",\\\"legalEntity\\\",\\\"userId\\\"])]\");",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "22e21f82-7398-4cc1-9483-b77bb999e729",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{domain}}/business/users",
              "host": ["{{domain}}"],
              "path": ["business", "users"]
            }
          },
          "response": [],
          "uid": "24163049-22e21f82-7398-4cc1-9483-b77bb999e729"
        }
      ],
      "id": "d23e8ddf-1588-4c91-b363-cd4851e63a19",
      "uid": "24163049-d23e8ddf-1588-4c91-b363-cd4851e63a19"
    },
    {
      "name": "Transaction Events",
      "item": [
        {
          "name": "200 Response",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7ec9793d-b27b-49d6-abf3-a21c2ee43b10",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Check Transaction State\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.transaction.transactionState).to.eql(\"REFUNDED\");",
                  "});",
                  "",
                  "pm.test(\"Check Transaction State\", function () {",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    const data = {",
                  "        \"bankCode\": \"SBI0033921\",",
                  "        \"cardFunding\": \"DEBIT\",",
                  "        \"method\": \"CARD\",",
                  "        \"cardAuthenticated\": true,",
                  "        \"accountType\": \"Savings\",",
                  "        \"bankName\": \"State Bank of India\",",
                  "        \"accountNumber\": \"121445521\",",
                  "        \"paymentChannel\": \"Intra Bank\",",
                  "        \"cardIssuedCountry\": \"AE\",",
                  "        \"cardLast4Digits\": \"2018\",",
                  "        \"cardFingerprint\": \"cRBAUn3Vqtzpf2uq\",",
                  "        \"cardExpiry\": {",
                  "            \"month\": 12,",
                  "            \"year\": 2023",
                  "        },",
                  "        \"specialInstructions\": \"IMPS\",",
                  "        \"name\": \"Binod Ramamurthie\",",
                  "        \"cardBrand\": \"VISA\"",
                  "    }",
                  "",
                  "    pm.expect(jsonData.transaction.originPaymentDetails).to.eql(data);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"eventId\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"transaction\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"hitRules\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"executedRules\");",
                  "});",
                  "",
                  "pm.test(\"Excuted Rules Should be more then 1\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    let executedRules = jsonData.executedRules.length > 0",
                  "    pm.expect(executedRules).to.eql(true);",
                  "});",
                  "",
                  "pm.test(`Match UUID`, () => {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.eventId).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$/i);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "02da4b52-57f6-4524-906d-fdeffe6881ea",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"transactionId\": \"{{transactionId}}\",\n    \"transactionState\": \"REFUNDED\",\n    \"updatedTransactionAttributes\": {\n        \"originPaymentDetails\": {\n            \"method\": \"CARD\",\n            \"cardAuthenticated\": true,\n            \"cardIssuedCountry\": \"AE\",\n            \"cardBrand\": \"VISA\",\n            \"cardFunding\": \"DEBIT\",\n            \"cardExpiry\": {\n                \"month\": 12,\n                \"year\": 2023\n            },\n            \"cardFingerprint\": \"cRBAUn3Vqtzpf2uq\",\n            \"cardLast4Digits\": \"2018\"\n        }\n    },\n    \"timestamp\": 1664985327329\n}"
            },
            "url": {
              "raw": "{{domain}}/events/transaction",
              "host": ["{{domain}}"],
              "path": ["events", "transaction"]
            }
          },
          "response": [],
          "uid": "24163049-02da4b52-57f6-4524-906d-fdeffe6881ea"
        },
        {
          "name": "Transaction Id not Provided",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7ec9793d-b27b-49d6-abf3-a21c2ee43b10",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"transactionId\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "47d6bfe1-406e-4fbc-bd35-160e3a0d32a6",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"transactionState\": \"REFUNDED\",\n    \"updatedTransactionAttributes\": {\n        \"originPaymentDetails\": {\n            \"method\": \"CARD\",\n            \"cardAuthenticated\": true,\n            \"cardIssuedCountry\": \"AE\",\n            \"cardBrand\": \"VISA\",\n            \"cardFunding\": \"DEBIT\",\n            \"cardExpiry\": {\n                \"month\": 12,\n                \"year\": 2023\n            },\n            \"cardFingerprint\": \"cRBAUn3Vqtzpf2uq\",\n            \"cardLast4Digits\": \"2018\"\n        }\n    },\n    \"timestamp\": 1664985327329\n}"
            },
            "url": {
              "raw": "{{domain}}/events/transaction",
              "host": ["{{domain}}"],
              "path": ["events", "transaction"]
            }
          },
          "response": [],
          "uid": "24163049-47d6bfe1-406e-4fbc-bd35-160e3a0d32a6"
        },
        {
          "name": "Invalid Transaction State",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7ec9793d-b27b-49d6-abf3-a21c2ee43b10",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance value (\\\"REFUND-1\\\") not found in enum (possible values: [\\\"CREATED\\\",\\\"PROCESSING\\\",\\\"SENT\\\",\\\"EXPIRED\\\",\\\"DECLINED\\\",\\\"SUSPENDED\\\",\\\"REFUNDED\\\",\\\"SUCCESSFUL\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "ff741916-54ca-460e-a9db-0c612d69ac43",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"transactionId\": \"{{transactionId}}\",\n    \"transactionState\": \"REFUND-1\",\n    \"updatedTransactionAttributes\": {\n        \"originPaymentDetails\": {\n            \"method\": \"CARD\",\n            \"cardAuthenticated\": true,\n            \"cardIssuedCountry\": \"AE\",\n            \"cardBrand\": \"VISA\",\n            \"cardFunding\": \"DEBIT\",\n            \"cardExpiry\": {\n                \"month\": 12,\n                \"year\": 2023\n            },\n            \"cardFingerprint\": \"cRBAUn3Vqtzpf2uq\",\n            \"cardLast4Digits\": \"2018\"\n        }\n    },\n    \"timestamp\": 1664985327329\n}"
            },
            "url": {
              "raw": "{{domain}}/events/transaction",
              "host": ["{{domain}}"],
              "path": ["events", "transaction"]
            }
          },
          "response": [],
          "uid": "24163049-ff741916-54ca-460e-a9db-0c612d69ac43"
        },
        {
          "name": "Invalid Country",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7ec9793d-b27b-49d6-abf3-a21c2ee43b10",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance failed to match exactly one schema (matched 0 out of 9)]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "f747b5b9-02fe-44b4-9917-b73430fce82b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"transactionId\": \"{{transactionId}}\",\n    \"transactionState\": \"REFUNDED\",\n    \"updatedTransactionAttributes\": {\n        \"originPaymentDetails\": {\n            \"method\": \"CARD\",\n            \"cardAuthenticated\": true,\n            \"cardIssuedCountry\": \"AB\",\n            \"cardBrand\": \"VISA\",\n            \"cardFunding\": \"DEBIT\",\n            \"cardExpiry\": {\n                \"month\": 12,\n                \"year\": 2023\n            },\n            \"cardFingerprint\": \"cRBAUn3Vqtzpf2uq\",\n            \"cardLast4Digits\": \"2018\"\n        }\n    },\n    \"timestamp\": 1664985327329\n}"
            },
            "url": {
              "raw": "{{domain}}/events/transaction",
              "host": ["{{domain}}"],
              "path": ["events", "transaction"]
            }
          },
          "response": [],
          "uid": "24163049-f747b5b9-02fe-44b4-9917-b73430fce82b"
        },
        {
          "name": "Timestamp Provided as String",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7ec9793d-b27b-49d6-abf3-a21c2ee43b10",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance type (string) does not match any allowed primitive type (allowed: [\\\"integer\\\",\\\"number\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "03731fdd-da9b-4ee0-aa62-5c2b52bf113b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"transactionId\": \"{{transactionId}}\",\n    \"transactionState\": \"REFUNDED\",\n    \"updatedTransactionAttributes\": {\n        \"originPaymentDetails\": {\n            \"method\": \"CARD\",\n            \"cardAuthenticated\": true,\n            \"cardIssuedCountry\": \"IN\",\n            \"cardBrand\": \"VISA\",\n            \"cardFunding\": \"DEBIT\",\n            \"cardExpiry\": {\n                \"month\": 12,\n                \"year\": 2023\n            },\n            \"cardFingerprint\": \"cRBAUn3Vqtzpf2uq\",\n            \"cardLast4Digits\": \"2018\"\n        }\n    },\n    \"timestamp\": \"1664985327329\"\n}"
            },
            "url": {
              "raw": "{{domain}}/events/transaction",
              "host": ["{{domain}}"],
              "path": ["events", "transaction"]
            }
          },
          "response": [],
          "uid": "24163049-03731fdd-da9b-4ee0-aa62-5c2b52bf113b"
        },
        {
          "name": "Invalid Transaction Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7ec9793d-b27b-49d6-abf3-a21c2ee43b10",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    const request = JSON.parse(pm.request.body.raw)",
                  "    const transactionId = request.transactionId",
                  "    pm.expect(jsonData.message).to.eql(`Transaction ${transactionId} not found`);",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.eql(\"NotFoundError\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"error\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "a98cbb27-a360-460f-a4d2-a69f0696a383",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"transactionId\": \"{{transactionId}}-1-invalid\",\n    \"transactionState\": \"REFUNDED\",\n    \"updatedTransactionAttributes\": {\n        \"originPaymentDetails\": {\n            \"method\": \"CARD\",\n            \"cardAuthenticated\": true,\n            \"cardIssuedCountry\": \"AE\",\n            \"cardBrand\": \"VISA\",\n            \"cardFunding\": \"DEBIT\",\n            \"cardExpiry\": {\n                \"month\": 12,\n                \"year\": 2023\n            },\n            \"cardFingerprint\": \"cRBAUn3Vqtzpf2uq\",\n            \"cardLast4Digits\": \"2018\"\n        }\n    },\n    \"timestamp\": 1664985327329\n}"
            },
            "url": {
              "raw": "{{domain}}/events/transaction",
              "host": ["{{domain}}"],
              "path": ["events", "transaction"]
            }
          },
          "response": [],
          "uid": "24163049-a98cbb27-a360-460f-a4d2-a69f0696a383"
        },
        {
          "name": "No Update Atrributes",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7ec9793d-b27b-49d6-abf3-a21c2ee43b10",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Check Transaction State\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.transaction.transactionState).to.eql(\"REFUNDED\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"eventId\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"hitRules\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"executedRules\");",
                  "});",
                  "",
                  "pm.test(\"Excuted Rules Should be more then 1\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    let executedRules = jsonData.executedRules.length > 0",
                  "    pm.expect(executedRules).to.eql(true);",
                  "});",
                  "",
                  "pm.test(`Match UUID`, () => {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.eventId).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$/i);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "dd7a4759-db4b-4d5d-a97b-07705f73e396",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"transactionId\": \"{{transactionId}}\",\n    \"transactionState\": \"REFUNDED\",\n    \"timestamp\": 1664985327329\n}"
            },
            "url": {
              "raw": "{{domain}}/events/transaction",
              "host": ["{{domain}}"],
              "path": ["events", "transaction"]
            }
          },
          "response": [],
          "uid": "24163049-dd7a4759-db4b-4d5d-a97b-07705f73e396"
        },
        {
          "name": "Transaction State not Provided",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7ec9793d-b27b-49d6-abf3-a21c2ee43b10",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"transactionState\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "21d8d4f7-c865-4a13-9333-ff83c41d7591",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"transactionId\": \"{{transactionId}}\",\n    \"updatedTransactionAttributes\": {\n        \"originPaymentDetails\": {\n            \"method\": \"CARD\",\n            \"cardAuthenticated\": true,\n            \"cardIssuedCountry\": \"AE\",\n            \"cardBrand\": \"VISA\",\n            \"cardFunding\": \"DEBIT\",\n            \"cardExpiry\": {\n                \"month\": 12,\n                \"year\": 2023\n            },\n            \"cardFingerprint\": \"cRBAUn3Vqtzpf2uq\",\n            \"cardLast4Digits\": \"2018\"\n        }\n    },\n    \"timestamp\": 1664985327329\n}"
            },
            "url": {
              "raw": "{{domain}}/events/transaction",
              "host": ["{{domain}}"],
              "path": ["events", "transaction"]
            }
          },
          "response": [],
          "uid": "24163049-21d8d4f7-c865-4a13-9333-ff83c41d7591"
        },
        {
          "name": "No Api Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7ec9793d-b27b-49d6-abf3-a21c2ee43b10",
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Should Give Unauthorized\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Unauthorized\");",
                  "});",
                  "",
                  "pm.test(\"Content-Type is present\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "4c7b0093-29a3-4e94-90ca-a03af36e0e83",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"transactionId\": \"{{transactionId}}\",\n    \"transactionState\": \"REFUNDED\",\n    \"updatedTransactionAttributes\": {\n        \"originPaymentDetails\": {\n            \"method\": \"CARD\",\n            \"cardAuthenticated\": true,\n            \"cardIssuedCountry\": \"AE\",\n            \"cardBrand\": \"VISA\",\n            \"cardFunding\": \"DEBIT\",\n            \"cardExpiry\": {\n                \"month\": 12,\n                \"year\": 2023\n            },\n            \"cardFingerprint\": \"cRBAUn3Vqtzpf2uq\",\n            \"cardLast4Digits\": \"2018\"\n        }\n    },\n    \"timestamp\": 1664985327329\n}"
            },
            "url": {
              "raw": "{{domain}}/events/transaction",
              "host": ["{{domain}}"],
              "path": ["events", "transaction"]
            }
          },
          "response": [],
          "uid": "24163049-4c7b0093-29a3-4e94-90ca-a03af36e0e83"
        },
        {
          "name": "Incorrect Domain",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7ec9793d-b27b-49d6-abf3-a21c2ee43b10",
                "exec": [
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test(\"Your test name\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "1dd83bcf-7d8e-4997-b056-2d0a23e3b381",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"transactionId\": \"{{transactionId}}\",\n    \"transactionState\": \"REFUNDED\",\n    \"updatedTransactionAttributes\": {\n        \"originPaymentDetails\": {\n            \"method\": \"CARD\",\n            \"cardAuthenticated\": true,\n            \"cardIssuedCountry\": \"AE\",\n            \"cardBrand\": \"VISA\",\n            \"cardFunding\": \"DEBIT\",\n            \"cardExpiry\": {\n                \"month\": 12,\n                \"year\": 2023\n            },\n            \"cardFingerprint\": \"cRBAUn3Vqtzpf2uq\",\n            \"cardLast4Digits\": \"2018\"\n        }\n    },\n    \"timestamp\": 1664985327329\n}"
            },
            "url": {
              "raw": "{{incorrectDomain}}/events/transaction",
              "host": ["{{incorrectDomain}}"],
              "path": ["events", "transaction"]
            }
          },
          "response": [],
          "uid": "24163049-1dd83bcf-7d8e-4997-b056-2d0a23e3b381"
        },
        {
          "name": "No Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7ec9793d-b27b-49d6-abf3-a21c2ee43b10",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[Unknown error parsing request body]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "c2b7326f-8117-46d9-b2d2-9c56cfc54ead",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{domain}}/events/transaction",
              "host": ["{{domain}}"],
              "path": ["events", "transaction"]
            }
          },
          "response": [],
          "uid": "24163049-c2b7326f-8117-46d9-b2d2-9c56cfc54ead"
        },
        {
          "name": "Empty Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7ec9793d-b27b-49d6-abf3-a21c2ee43b10",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"timestamp\\\",\\\"transactionId\\\",\\\"transactionState\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "e373133f-445d-4176-bba6-609119fe0fd8",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "tenant-id",
                "value": "flagright"
              },
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{domain}}/events/transaction",
              "host": ["{{domain}}"],
              "path": ["events", "transaction"]
            }
          },
          "response": [],
          "uid": "24163049-e373133f-445d-4176-bba6-609119fe0fd8"
        }
      ],
      "id": "57e65ad9-2597-4391-8e1d-c1a3e2c97152",
      "uid": "24163049-57e65ad9-2597-4391-8e1d-c1a3e2c97152"
    },
    {
      "name": "Consumer User Events",
      "item": [
        {
          "name": "200 Response",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2ebcc671-ec03-47c3-81a7-0981c0a94997",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Check Risk Level Is Changed\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.riskLevel).to.eql(\"HIGH\");",
                  "});",
                  "",
                  "pm.test(\"Check Transaction State\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    const request = JSON.parse(pm.request.body.raw)",
                  "",
                  "    const data = {",
                  "    \"userId\": request.userId,",
                  "    \"legalDocuments\": [",
                  "        {",
                  "            \"documentIssuedDate\": 1639939034,",
                  "            \"documentExpirationDate\": 1839939034,",
                  "            \"documentType\": \"passport\",",
                  "            \"documentNumber\": \"CB33GME6\",",
                  "            \"documentIssuedCountry\": \"US\"",
                  "        }",
                  "    ],",
                  "    \"userDetails\": {",
                  "        \"name\": {",
                  "            \"firstName\": \"Post Man\",",
                  "            \"lastName\": \"Dugar\"",
                  "        },",
                  "        \"dateOfBirth\": \"2007-01-15\",",
                  "        \"countryOfResidence\": \"US\",",
                  "        \"countryOfNationality\": \"RU\"",
                  "    },",
                  "    \"createdTimestamp\": request.timestamp,",
                  "    \"tags\": [",
                  "        {",
                  "            \"value\": \"wallet\",",
                  "            \"key\": \"hello\"",
                  "        }",
                  "    ],",
                  "    \"reasonForAccountOpening\": [",
                  "        \"Payment\",",
                  "        \"Deposits\"",
                  "    ],",
                  "    \"riskLevel\": \"HIGH\",",
                  "    \"kycStatusDetails\": {",
                  "        \"status\": \"SUCCESSFUL\"",
                  "    },",
                  "    \"userStateDetails\": {",
                  "        \"state\": \"ACTIVE\"",
                  "    },",
                  "    \"executedRules\": [],",
                  "    \"hitRules\": []",
                  "}",
                  "",
                  "    pm.expect(jsonData).to.eql(data)",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"legalDocuments\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"userDetails\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"kycStatusDetails\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"createdTimestamp\");",
                  "});",
                  "",
                  "pm.test(\"Tags Should be more then 1\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    let executedRules = jsonData.tags.length > 0",
                  "    pm.expect(executedRules).to.eql(true);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "e8c11667-d0dd-4d06-9230-f1a83ec3315b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}\",\n    \"updatedConsumerUserAttributes\": {\n        \"riskLevel\": \"HIGH\",\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE\"\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{domain}}/events/consumer/user",
              "host": ["{{domain}}"],
              "path": ["events", "consumer", "user"]
            }
          },
          "response": [],
          "uid": "24163049-e8c11667-d0dd-4d06-9230-f1a83ec3315b"
        },
        {
          "name": "User Id not Provided",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2ebcc671-ec03-47c3-81a7-0981c0a94997",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"userId\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "27db15ca-da2f-4e70-90ce-1f1cf5a08281",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"updatedConsumerUserAttributes\": {\n        \"riskLevel\": \"HIGH\",\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE\"\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{domain}}/events/consumer/user",
              "host": ["{{domain}}"],
              "path": ["events", "consumer", "user"]
            }
          },
          "response": [],
          "uid": "24163049-27db15ca-da2f-4e70-90ce-1f1cf5a08281"
        },
        {
          "name": "Invalid User State",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2ebcc671-ec03-47c3-81a7-0981c0a94997",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance value (\\\"ACTIVE-1\\\") not found in enum (possible values: [\\\"UNACCEPTABLE\\\",\\\"TERMINATED\\\",\\\"ACTIVE\\\",\\\"DORMANT\\\",\\\"CREATED\\\",\\\"SUSPENDED\\\",\\\"BLOCKED\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "bf3384d6-034d-4c7c-88a4-04077bfbff61",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}\",\n    \"updatedConsumerUserAttributes\": {\n        \"riskLevel\": \"HIGH\",\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE-1\"\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{domain}}/events/consumer/user",
              "host": ["{{domain}}"],
              "path": ["events", "consumer", "user"]
            }
          },
          "response": [],
          "uid": "24163049-bf3384d6-034d-4c7c-88a4-04077bfbff61"
        },
        {
          "name": "Invalid Country",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2ebcc671-ec03-47c3-81a7-0981c0a94997",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance value (\\\"AA\\\") not found in enum (possible values: [\\\"AF\\\",\\\"AL\\\",\\\"DZ\\\",\\\"AS\\\",\\\"AD\\\",\\\"AO\\\",\\\"AI\\\",\\\"AQ\\\",\\\"AG\\\",\\\"AR\\\",\\\"AM\\\",\\\"AW\\\",\\\"AU\\\",\\\"AT\\\",\\\"AZ\\\",\\\"BS\\\",\\\"BH\\\",\\\"BD\\\",\\\"BB\\\",\\\"BY\\\",\\\"BE\\\",\\\"BZ\\\",\\\"BJ\\\",\\\"BM\\\",\\\"BT\\\",\\\"BO\\\",\\\"BQ\\\",\\\"BA\\\",\\\"BW\\\",\\\"BV\\\",\\\"BR\\\",\\\"IO\\\",\\\"BN\\\",\\\"BG\\\",\\\"BF\\\",\\\"BI\\\",\\\"CV\\\",\\\"KH\\\",\\\"CM\\\",\\\"CA\\\",\\\"KY\\\",\\\"CF\\\",\\\"TD\\\",\\\"CL\\\",\\\"CN\\\",\\\"CX\\\",\\\"CC\\\",\\\"CO\\\",\\\"KM\\\",\\\"CD\\\",\\\"CG\\\",\\\"CK\\\",\\\"CR\\\",\\\"HR\\\",\\\"CU\\\",\\\"CW\\\",\\\"CY\\\",\\\"CZ\\\",\\\"CI\\\",\\\"DK\\\",\\\"DJ\\\",\\\"DM\\\",\\\"DO\\\",\\\"EC\\\",\\\"EG\\\",\\\"SV\\\",\\\"GQ\\\",\\\"ER\\\",\\\"EE\\\",\\\"SZ\\\",\\\"ET\\\",\\\"FK\\\",\\\"FO\\\",\\\"FJ\\\",\\\"FI\\\",\\\"FR\\\",\\\"GF\\\",\\\"PF\\\",\\\"TF\\\",\\\"GA\\\",\\\"GM\\\",\\\"GE\\\",\\\"DE\\\",\\\"GH\\\",\\\"GI\\\",\\\"GR\\\",\\\"GL\\\",\\\"GD\\\",\\\"GP\\\",\\\"GU\\\",\\\"GT\\\",\\\"GG\\\",\\\"GN\\\",\\\"GW\\\",\\\"GY\\\",\\\"HT\\\",\\\"HM\\\",\\\"VA\\\",\\\"HN\\\",\\\"HK\\\",\\\"HU\\\",\\\"IS\\\",\\\"IN\\\",\\\"ID\\\",\\\"IR\\\",\\\"IQ\\\",\\\"IE\\\",\\\"IM\\\",\\\"IL\\\",\\\"IT\\\",\\\"JM\\\",\\\"JP\\\",\\\"JE\\\",\\\"JO\\\",\\\"KZ\\\",\\\"KE\\\",\\\"KI\\\",\\\"KP\\\",\\\"KR\\\",\\\"KW\\\",\\\"KG\\\",\\\"LA\\\",\\\"LV\\\",\\\"LB\\\",\\\"LS\\\",\\\"LR\\\",\\\"LY\\\",\\\"LI\\\",\\\"LT\\\",\\\"LU\\\",\\\"MO\\\",\\\"MG\\\",\\\"MW\\\",\\\"MY\\\",\\\"MV\\\",\\\"ML\\\",\\\"MT\\\",\\\"MH\\\",\\\"MQ\\\",\\\"MR\\\",\\\"MU\\\",\\\"YT\\\",\\\"MX\\\",\\\"FM\\\",\\\"MD\\\",\\\"MC\\\",\\\"MN\\\",\\\"ME\\\",\\\"MS\\\",\\\"MA\\\",\\\"MZ\\\",\\\"MM\\\",\\\"NA\\\",\\\"NR\\\",\\\"NP\\\",\\\"NL\\\",\\\"NC\\\",\\\"NZ\\\",\\\"NI\\\",\\\"NE\\\",\\\"NG\\\",\\\"NU\\\",\\\"NF\\\",\\\"MK\\\",\\\"MP\\\",\\\"NO\\\",\\\"OM\\\",\\\"PK\\\",\\\"PW\\\",\\\"PS\\\",\\\"PA\\\",\\\"PG\\\",\\\"PY\\\",\\\"PE\\\",\\\"PH\\\",\\\"PN\\\",\\\"PL\\\",\\\"PT\\\",\\\"PR\\\",\\\"QA\\\",\\\"RO\\\",\\\"RU\\\",\\\"RW\\\",\\\"RE\\\",\\\"BL\\\",\\\"SH\\\",\\\"KN\\\",\\\"LC\\\",\\\"MF\\\",\\\"PM\\\",\\\"VC\\\",\\\"WS\\\",\\\"SM\\\",\\\"ST\\\",\\\"SA\\\",\\\"SN\\\",\\\"RS\\\",\\\"SC\\\",\\\"SL\\\",\\\"SG\\\",\\\"SX\\\",\\\"SK\\\",\\\"SI\\\",\\\"SB\\\",\\\"SO\\\",\\\"ZA\\\",\\\"GS\\\",\\\"SS\\\",\\\"ES\\\",\\\"LK\\\",\\\"SD\\\",\\\"SR\\\",\\\"SJ\\\",\\\"SE\\\",\\\"CH\\\",\\\"SY\\\",\\\"TW\\\",\\\"TJ\\\",\\\"TZ\\\",\\\"TH\\\",\\\"TL\\\",\\\"TG\\\",\\\"TK\\\",\\\"TO\\\",\\\"TT\\\",\\\"TN\\\",\\\"TM\\\",\\\"TC\\\",\\\"TV\\\",\\\"TR\\\",\\\"UG\\\",\\\"UA\\\",\\\"AE\\\",\\\"GB\\\",\\\"UM\\\",\\\"US\\\",\\\"UY\\\",\\\"UZ\\\",\\\"VU\\\",\\\"VE\\\",\\\"VN\\\",\\\"VG\\\",\\\"VI\\\",\\\"WF\\\",\\\"EH\\\",\\\"YE\\\",\\\"ZM\\\",\\\"ZW\\\",\\\"AX\\\",\\\"N/A\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "e4a7d1fe-f07c-4167-bd49-fc46ce9779fa",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}\",\n    \"updatedConsumerUserAttributes\": {\n        \"riskLevel\": \"HIGH\",\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE\"\n        },\n        \"legalDocuments\": [\n            {\n                \"documentNumber\": \"123\",\n                \"documentType\": \"Temo\",\n                \"documentIssuedCountry\": \"AA\"\n            }\n        ]\n    }\n}"
            },
            "url": {
              "raw": "{{domain}}/events/consumer/user",
              "host": ["{{domain}}"],
              "path": ["events", "consumer", "user"]
            }
          },
          "response": [],
          "uid": "24163049-e4a7d1fe-f07c-4167-bd49-fc46ce9779fa"
        },
        {
          "name": "Timestamp Provided as String",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2ebcc671-ec03-47c3-81a7-0981c0a94997",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance type (string) does not match any allowed primitive type (allowed: [\\\"integer\\\",\\\"number\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "7226d157-0465-4ad2-b053-2820afa1e9cc",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": \"{{timestamp}}\",\n    \"userId\": \"{{userId}}\",\n    \"updatedConsumerUserAttributes\": {\n        \"riskLevel\": \"HIGH\",\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE\"\n        },\n        \"legalDocuments\": [\n            {\n                \"documentNumber\": \"123\",\n                \"documentType\": \"Temo\",\n                \"documentIssuedCountry\": \"AA\"\n            }\n        ]\n    }\n}"
            },
            "url": {
              "raw": "{{domain}}/events/consumer/user",
              "host": ["{{domain}}"],
              "path": ["events", "consumer", "user"]
            }
          },
          "response": [],
          "uid": "24163049-7226d157-0465-4ad2-b053-2820afa1e9cc"
        },
        {
          "name": "Invalid User Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "17468f64-2e17-4508-b0ed-e1d89f2b58f6",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    const request = JSON.parse(pm.request.body.raw)",
                  "    const userId = request.userId",
                  "    pm.expect(jsonData.message).to.eql(`User ${userId} not found. Please create the user ${userId}`)",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.eql(\"NotFoundError\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"error\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "6ee1f67a-1a73-419a-b4b4-3dbd5db0bc61",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}-1\",\n    \"updatedConsumerUserAttributes\": {\n        \"riskLevel\": \"HIGH\",\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE\"\n        },\n        \"legalDocuments\": [\n            {\n                \"documentNumber\": \"123\",\n                \"documentType\": \"Temo\",\n                \"documentIssuedCountry\": \"IN\"\n            }\n        ]\n    }\n}"
            },
            "url": {
              "raw": "{{domain}}/events/consumer/user",
              "host": ["{{domain}}"],
              "path": ["events", "consumer", "user"]
            }
          },
          "response": [],
          "uid": "24163049-6ee1f67a-1a73-419a-b4b4-3dbd5db0bc61"
        },
        {
          "name": "No Update Attributes",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2ebcc671-ec03-47c3-81a7-0981c0a94997",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"userId\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"riskLevel\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"userDetails\");",
                  "});",
                  "",
                  "pm.test(\"Payload Match\", function () {",
                  "    const request = JSON.parse(pm.request.body.raw)",
                  "    const userId = request.userId",
                  "    const timestamp = request.timestamp",
                  "",
                  "    const body = {",
                  "        \"legalDocuments\": [",
                  "            {",
                  "                \"documentIssuedDate\": 1639939034,",
                  "                \"documentExpirationDate\": 1839939034,",
                  "                \"documentType\": \"passport\",",
                  "                \"documentNumber\": \"CB33GME6\",",
                  "                \"documentIssuedCountry\": \"US\"",
                  "            }",
                  "        ],",
                  "        \"userStateDetails\": {",
                  "            \"state\": \"ACTIVE\"",
                  "        },",
                  "        \"reasonForAccountOpening\": [",
                  "            \"Payment\",",
                  "            \"Deposits\"",
                  "        ],",
                  "        \"riskLevel\": \"HIGH\",",
                  "        \"userId\": userId,",
                  "        \"kycStatusDetails\": {",
                  "            \"status\": \"SUCCESSFUL\"",
                  "        },",
                  "        \"userDetails\": {",
                  "            \"name\": {",
                  "                \"firstName\": \"Post Man\",",
                  "                \"lastName\": \"Dugar\"",
                  "            },",
                  "            \"dateOfBirth\": \"2007-01-15\",",
                  "            \"countryOfResidence\": \"US\",",
                  "            \"countryOfNationality\": \"RU\"",
                  "        },",
                  "        \"createdTimestamp\": timestamp,",
                  "        \"tags\": [",
                  "            {",
                  "                \"value\": \"wallet\",",
                  "                \"key\": \"hello\"",
                  "            }",
                  "        ],",
                  "        \"executedRules\": [],",
                  "        \"hitRules\": []",
                  "    }",
                  "",
                  "    pm.expect(pm.response.json()).to.eql(body)",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "cded0914-9612-484d-8afc-24c688931f88",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}\"\n}"
            },
            "url": {
              "raw": "{{domain}}/events/consumer/user",
              "host": ["{{domain}}"],
              "path": ["events", "consumer", "user"]
            }
          },
          "response": [],
          "uid": "24163049-cded0914-9612-484d-8afc-24c688931f88"
        },
        {
          "name": "Incorrect Domain",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2ebcc671-ec03-47c3-81a7-0981c0a94997",
                "exec": [
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test(\"Your test name\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "2f88cd8c-1004-4b01-98d5-73be24903007",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}\",\n    \"updatedConsumerUserAttributes\": {\n        \"riskLevel\": \"HIGH\",\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE\"\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{incorrectDomain}}/events/consumer/user",
              "host": ["{{incorrectDomain}}"],
              "path": ["events", "consumer", "user"]
            }
          },
          "response": [],
          "uid": "24163049-2f88cd8c-1004-4b01-98d5-73be24903007"
        },
        {
          "name": "No API Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2ebcc671-ec03-47c3-81a7-0981c0a94997",
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Should Give Unauthorized\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Unauthorized\");",
                  "});",
                  "",
                  "pm.test(\"Content-Type is present\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "0a4b50c2-c9f4-47d3-9fd3-f8414ef41aaa",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{userId}}\"\n}"
            },
            "url": {
              "raw": "{{domain}}/events/consumer/user",
              "host": ["{{domain}}"],
              "path": ["events", "consumer", "user"]
            }
          },
          "response": [],
          "uid": "24163049-0a4b50c2-c9f4-47d3-9fd3-f8414ef41aaa"
        },
        {
          "name": "No Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2ebcc671-ec03-47c3-81a7-0981c0a94997",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[Unknown error parsing request body]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "b6b3719c-cc3f-4cab-beff-677c4029f2f3",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{domain}}/events/consumer/user",
              "host": ["{{domain}}"],
              "path": ["events", "consumer", "user"]
            }
          },
          "response": [],
          "uid": "24163049-b6b3719c-cc3f-4cab-beff-677c4029f2f3"
        },
        {
          "name": "Empty Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2ebcc671-ec03-47c3-81a7-0981c0a94997",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"timestamp\\\",\\\"userId\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "cda7b5f1-e301-4ba8-b5da-1b7cc059ab22",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{domain}}/events/consumer/user",
              "host": ["{{domain}}"],
              "path": ["events", "consumer", "user"]
            }
          },
          "response": [],
          "uid": "24163049-cda7b5f1-e301-4ba8-b5da-1b7cc059ab22"
        }
      ],
      "id": "75858a98-3f1e-4baf-b641-14285c50adbc",
      "uid": "24163049-75858a98-3f1e-4baf-b641-14285c50adbc"
    },
    {
      "name": "Business User Events",
      "item": [
        {
          "name": "200 Response",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3909390-2937-435f-9403-02a067a3d0ea",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Check User State Is Changed\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.userStateDetails.state).to.eql(\"ACTIVE\");",
                  "});",
                  "",
                  "pm.test(\"Check Payload Full\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    const request = JSON.parse(pm.request.body.raw)",
                  "",
                  "    const data = {",
                  "        \"userId\": request.userId,",
                  "        \"createdTimestamp\": request.timestamp,",
                  "        \"allowedPaymentMethods\": [",
                  "            \"GENERIC_BANK_ACCOUNT\",",
                  "            \"WALLET\",",
                  "            \"CARD\",",
                  "            \"ACH\"",
                  "        ],",
                  "        \"legalEntity\": {",
                  "            \"companyGeneralDetails\": {",
                  "                \"legalName\": \"Mr Wu Semiconductors\"",
                  "            },",
                  "            \"contactDetails\": {",
                  "                \"addresses\": [",
                  "                    {",
                  "                        \"addressLines\": [",
                  "                            \"Klara-Franke Str 20\"",
                  "                        ],",
                  "                        \"postcode\": \"10557\",",
                  "                        \"city\": \"Berlin\",",
                  "                        \"state\": \"Berlin\",",
                  "                        \"country\": \"Germany\",",
                  "                        \"tags\": [",
                  "                            {",
                  "                                \"key\": \"customKey\",",
                  "                                \"value\": \"customValue\"",
                  "                            }",
                  "                        ]",
                  "                    }",
                  "                ]",
                  "            }",
                  "        },",
                  "        \"kycStatusDetails\": {",
                  "            \"status\": \"SUCCESSFUL\"",
                  "        },",
                  "        \"userStateDetails\": {",
                  "            \"state\": \"ACTIVE\"",
                  "        },",
                  "        \"executedRules\": [],",
                  "        \"hitRules\": []",
                  "    }",
                  "",
                  "    pm.expect(jsonData).to.eql(data)",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"legalName\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"contactDetails\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"allowedPaymentMethods\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"createdTimestamp\");",
                  "});",
                  "",
                  "pm.test(\"allowedPaymentMethods Should be more then 1\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    let executedRules = jsonData.allowedPaymentMethods.length > 0",
                  "    pm.expect(executedRules).to.eql(true);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "370397ea-1a3d-44f7-bf15-ec437d3e6825",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{businessUserId}}\",\n    \"updatedBusinessUserAttributes\": {\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE\"\n        },\n        \"legalEntity\": {\n            \"companyGeneralDetails\": {\n                \"legalName\": \"Mr Wu Semiconductors\"\n            },\n            \"contactDetails\": {\n                \"addresses\": [\n                    {\n                        \"addressLines\": [\n                            \"Klara-Franke Str 20\"\n                        ],\n                        \"postcode\": \"10557\",\n                        \"city\": \"Berlin\",\n                        \"state\": \"Berlin\",\n                        \"country\": \"Germany\",\n                        \"tags\": [\n                            {\n                                \"key\": \"customKey\",\n                                \"value\": \"customValue\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{domain}}/events/business/user",
              "host": ["{{domain}}"],
              "path": ["events", "business", "user"]
            }
          },
          "response": [],
          "uid": "24163049-370397ea-1a3d-44f7-bf15-ec437d3e6825"
        },
        {
          "name": "Invalid User Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3909390-2937-435f-9403-02a067a3d0ea",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    const request = JSON.parse(pm.request.body.raw)",
                  "    const userId = request.userId",
                  "    pm.expect(jsonData.message).to.eql(`User ${userId} not found. Please create the user ${userId}`)",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.eql(\"NotFoundError\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"error\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "a8858ae0-6d0a-4feb-afbe-d01eb11039b1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{businessUserId}}-some-random\",\n    \"updatedBusinessUserAttributes\": {\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE\"\n        },\n        \"legalEntity\": {\n            \"companyGeneralDetails\": {\n                \"legalName\": \"Mr Wu Semiconductors\"\n            },\n            \"contactDetails\": {\n                \"addresses\": [\n                    {\n                        \"addressLines\": [\n                            \"Klara-Franke Str 20\"\n                        ],\n                        \"postcode\": \"10557\",\n                        \"city\": \"Berlin\",\n                        \"state\": \"Berlin\",\n                        \"country\": \"Germany\",\n                        \"tags\": [\n                            {\n                                \"key\": \"customKey\",\n                                \"value\": \"customValue\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{domain}}/events/business/user",
              "host": ["{{domain}}"],
              "path": ["events", "business", "user"]
            }
          },
          "response": [],
          "uid": "24163049-a8858ae0-6d0a-4feb-afbe-d01eb11039b1"
        },
        {
          "name": "No API Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3909390-2937-435f-9403-02a067a3d0ea",
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Should Give Unauthorized\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Unauthorized\");",
                  "});",
                  "",
                  "pm.test(\"Content-Type is present\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "fc5d2a61-064f-406a-a8c8-1475280a788c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{businessUserId}}\",\n    \"updatedBusinessUserAttributes\": {\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE\"\n        },\n        \"legalEntity\": {\n            \"companyGeneralDetails\": {\n                \"legalName\": \"Mr Wu Semiconductors\"\n            },\n            \"contactDetails\": {\n                \"addresses\": [\n                    {\n                        \"addressLines\": [\n                            \"Klara-Franke Str 20\"\n                        ],\n                        \"postcode\": \"10557\",\n                        \"city\": \"Berlin\",\n                        \"state\": \"Berlin\",\n                        \"country\": \"Germany\",\n                        \"tags\": [\n                            {\n                                \"key\": \"customKey\",\n                                \"value\": \"customValue\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{domain}}/events/business/user",
              "host": ["{{domain}}"],
              "path": ["events", "business", "user"]
            }
          },
          "response": [],
          "uid": "24163049-fc5d2a61-064f-406a-a8c8-1475280a788c"
        },
        {
          "name": "Invalid API key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3909390-2937-435f-9403-02a067a3d0ea",
                "exec": [
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Message\");",
                  "});",
                  "",
                  "pm.test(\"Should Give Unauthorized\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.Message).to.eql(\"User is not authorized to access this resource with an explicit deny\");",
                  "});",
                  "",
                  "pm.test(\"Content-Type is present\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "f6a0f7cf-fbd6-4c29-9793-443cd995a323",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "1{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{businessUserId}}\",\n    \"updatedBusinessUserAttributes\": {\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE\"\n        },\n        \"legalEntity\": {\n            \"companyGeneralDetails\": {\n                \"legalName\": \"Mr Wu Semiconductors\"\n            },\n            \"contactDetails\": {\n                \"addresses\": [\n                    {\n                        \"addressLines\": [\n                            \"Klara-Franke Str 20\"\n                        ],\n                        \"postcode\": \"10557\",\n                        \"city\": \"Berlin\",\n                        \"state\": \"Berlin\",\n                        \"country\": \"Germany\",\n                        \"tags\": [\n                            {\n                                \"key\": \"customKey\",\n                                \"value\": \"customValue\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{domain}}/events/business/user",
              "host": ["{{domain}}"],
              "path": ["events", "business", "user"]
            }
          },
          "response": [],
          "uid": "24163049-f6a0f7cf-fbd6-4c29-9793-443cd995a323"
        },
        {
          "name": "Empty Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3909390-2937-435f-9403-02a067a3d0ea",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"timestamp\\\",\\\"userId\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "1c9f21e9-a2bc-4eb2-baf4-cab6cb772fd5",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{domain}}/events/business/user",
              "host": ["{{domain}}"],
              "path": ["events", "business", "user"]
            }
          },
          "response": [],
          "uid": "24163049-1c9f21e9-a2bc-4eb2-baf4-cab6cb772fd5"
        },
        {
          "name": "No Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3909390-2937-435f-9403-02a067a3d0ea",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[Unknown error parsing request body]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "00602cfb-b068-41d5-b715-50b01a14cb00",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{domain}}/events/business/user",
              "host": ["{{domain}}"],
              "path": ["events", "business", "user"]
            }
          },
          "response": [],
          "uid": "24163049-00602cfb-b068-41d5-b715-50b01a14cb00"
        },
        {
          "name": "Incorrect Domain",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3909390-2937-435f-9403-02a067a3d0ea",
                "exec": [
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test(\"Your test name\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "ed99c9f3-4533-4833-85e3-691fa82e0ab2",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{businessUserId}}\",\n    \"updatedBusinessUserAttributes\": {\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE\"\n        },\n        \"legalEntity\": {\n            \"companyGeneralDetails\": {\n                \"legalName\": \"Mr Wu Semiconductors\"\n            },\n            \"contactDetails\": {\n                \"addresses\": [\n                    {\n                        \"addressLines\": [\n                            \"Klara-Franke Str 20\"\n                        ],\n                        \"postcode\": \"10557\",\n                        \"city\": \"Berlin\",\n                        \"state\": \"Berlin\",\n                        \"country\": \"Germany\",\n                        \"tags\": [\n                            {\n                                \"key\": \"customKey\",\n                                \"value\": \"customValue\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{incorrectDomain}}/events/business/user",
              "host": ["{{incorrectDomain}}"],
              "path": ["events", "business", "user"]
            }
          },
          "response": [],
          "uid": "24163049-ed99c9f3-4533-4833-85e3-691fa82e0ab2"
        },
        {
          "name": "No Update Attributes",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3909390-2937-435f-9403-02a067a3d0ea",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"userId\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"legalEntity\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"companyGeneralDetails\");",
                  "});",
                  "",
                  "pm.test(\"Payload Match\", function () {",
                  "    const request = JSON.parse(pm.request.body.raw)",
                  "    const userId = request.userId",
                  "    const timestamp = request.timestamp",
                  "",
                  "    const body = {",
                  "        \"userId\": userId,",
                  "        \"kycStatusDetails\": {",
                  "            \"status\": \"SUCCESSFUL\"",
                  "        },",
                  "        \"userStateDetails\": {",
                  "            \"state\": \"ACTIVE\"",
                  "        },",
                  "        \"createdTimestamp\": timestamp,",
                  "        \"allowedPaymentMethods\": [",
                  "            \"GENERIC_BANK_ACCOUNT\",",
                  "            \"WALLET\",",
                  "            \"CARD\",",
                  "            \"ACH\"",
                  "        ],",
                  "        \"legalEntity\": {",
                  "            \"contactDetails\": {",
                  "                \"addresses\": [",
                  "                    {",
                  "                        \"postcode\": \"10557\",",
                  "                        \"country\": \"Germany\",",
                  "                        \"addressLines\": [",
                  "                            \"Klara-Franke Str 20\"",
                  "                        ],",
                  "                        \"state\": \"Berlin\",",
                  "                        \"city\": \"Berlin\",",
                  "                        \"tags\": [",
                  "                            {",
                  "                                \"value\": \"customValue\",",
                  "                                \"key\": \"customKey\"",
                  "                            }",
                  "                        ]",
                  "                    }",
                  "                ]",
                  "            },",
                  "            \"companyGeneralDetails\": {",
                  "                \"legalName\": \"Mr Wu Semiconductors\"",
                  "            },",
                  "        },",
                  "        \"executedRules\": [],",
                  "        \"hitRules\": []",
                  "    }",
                  "",
                  "    pm.expect(pm.response.json()).to.eql(body)",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "5c3147de-b120-4603-9314-9939921f82b9",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{businessUserId}}\"\n}"
            },
            "url": {
              "raw": "{{domain}}/events/business/user",
              "host": ["{{domain}}"],
              "path": ["events", "business", "user"]
            }
          },
          "response": [],
          "uid": "24163049-5c3147de-b120-4603-9314-9939921f82b9"
        },
        {
          "name": "User Id Not Provided",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3909390-2937-435f-9403-02a067a3d0ea",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[object has missing required properties ([\\\"userId\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "e1501a20-c122-4df6-950f-eed696048a68",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"updatedBusinessUserAttributes\": {\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE\"\n        },\n        \"legalEntity\": {\n            \"companyGeneralDetails\": {\n                \"legalName\": \"Mr Wu Semiconductors\"\n            },\n            \"contactDetails\": {\n                \"addresses\": [\n                    {\n                        \"addressLines\": [\n                            \"Klara-Franke Str 20\"\n                        ],\n                        \"postcode\": \"10557\",\n                        \"city\": \"Berlin\",\n                        \"state\": \"Berlin\",\n                        \"country\": \"Germany\",\n                        \"tags\": [\n                            {\n                                \"key\": \"customKey\",\n                                \"value\": \"customValue\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{domain}}/events/business/user",
              "host": ["{{domain}}"],
              "path": ["events", "business", "user"]
            }
          },
          "response": [],
          "uid": "24163049-e1501a20-c122-4df6-950f-eed696048a68"
        },
        {
          "name": "Invalid User State",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3909390-2937-435f-9403-02a067a3d0ea",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance value (\\\"ACTIVE-1\\\") not found in enum (possible values: [\\\"UNACCEPTABLE\\\",\\\"TERMINATED\\\",\\\"ACTIVE\\\",\\\"DORMANT\\\",\\\"CREATED\\\",\\\"SUSPENDED\\\",\\\"BLOCKED\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "4c2f459d-53ec-419b-a9ca-609cdcbb0661",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{businessUserId}}\",\n    \"updatedBusinessUserAttributes\": {\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE-1\"\n        },\n        \"legalEntity\": {\n            \"companyGeneralDetails\": {\n                \"legalName\": \"Mr Wu Semiconductors\"\n            },\n            \"contactDetails\": {\n                \"addresses\": [\n                    {\n                        \"addressLines\": [\n                            \"Klara-Franke Str 20\"\n                        ],\n                        \"postcode\": \"10557\",\n                        \"city\": \"Berlin\",\n                        \"state\": \"Berlin\",\n                        \"country\": \"Germany\",\n                        \"tags\": [\n                            {\n                                \"key\": \"customKey\",\n                                \"value\": \"customValue\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{domain}}/events/business/user",
              "host": ["{{domain}}"],
              "path": ["events", "business", "user"]
            }
          },
          "response": [],
          "uid": "24163049-4c2f459d-53ec-419b-a9ca-609cdcbb0661"
        },
        {
          "name": "Invalid Legal Name Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3909390-2937-435f-9403-02a067a3d0ea",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance type (boolean) does not match any allowed primitive type (allowed: [\\\"string\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "d4057c7b-864f-4934-8ee0-a06001579727",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{businessUserId}}\",\n    \"updatedBusinessUserAttributes\": {\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE\"\n        },\n        \"legalEntity\": {\n            \"companyGeneralDetails\": {\n                \"legalName\": true\n            },\n            \"contactDetails\": {\n                \"addresses\": [\n                    {\n                        \"addressLines\": [\n                            \"Klara-Franke Str 20\"\n                        ],\n                        \"postcode\": \"10557\",\n                        \"city\": \"Berlin\",\n                        \"state\": \"Berlin\",\n                        \"country\": \"Germany\",\n                        \"tags\": [\n                            {\n                                \"key\": \"customKey\",\n                                \"value\": \"customValue\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{domain}}/events/business/user",
              "host": ["{{domain}}"],
              "path": ["events", "business", "user"]
            }
          },
          "response": [],
          "uid": "24163049-d4057c7b-864f-4934-8ee0-a06001579727"
        },
        {
          "name": "Invalid Country Code",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3909390-2937-435f-9403-02a067a3d0ea",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance value (\\\"AA\\\") not found in enum (possible values: [\\\"AF\\\",\\\"AL\\\",\\\"DZ\\\",\\\"AS\\\",\\\"AD\\\",\\\"AO\\\",\\\"AI\\\",\\\"AQ\\\",\\\"AG\\\",\\\"AR\\\",\\\"AM\\\",\\\"AW\\\",\\\"AU\\\",\\\"AT\\\",\\\"AZ\\\",\\\"BS\\\",\\\"BH\\\",\\\"BD\\\",\\\"BB\\\",\\\"BY\\\",\\\"BE\\\",\\\"BZ\\\",\\\"BJ\\\",\\\"BM\\\",\\\"BT\\\",\\\"BO\\\",\\\"BQ\\\",\\\"BA\\\",\\\"BW\\\",\\\"BV\\\",\\\"BR\\\",\\\"IO\\\",\\\"BN\\\",\\\"BG\\\",\\\"BF\\\",\\\"BI\\\",\\\"CV\\\",\\\"KH\\\",\\\"CM\\\",\\\"CA\\\",\\\"KY\\\",\\\"CF\\\",\\\"TD\\\",\\\"CL\\\",\\\"CN\\\",\\\"CX\\\",\\\"CC\\\",\\\"CO\\\",\\\"KM\\\",\\\"CD\\\",\\\"CG\\\",\\\"CK\\\",\\\"CR\\\",\\\"HR\\\",\\\"CU\\\",\\\"CW\\\",\\\"CY\\\",\\\"CZ\\\",\\\"CI\\\",\\\"DK\\\",\\\"DJ\\\",\\\"DM\\\",\\\"DO\\\",\\\"EC\\\",\\\"EG\\\",\\\"SV\\\",\\\"GQ\\\",\\\"ER\\\",\\\"EE\\\",\\\"SZ\\\",\\\"ET\\\",\\\"FK\\\",\\\"FO\\\",\\\"FJ\\\",\\\"FI\\\",\\\"FR\\\",\\\"GF\\\",\\\"PF\\\",\\\"TF\\\",\\\"GA\\\",\\\"GM\\\",\\\"GE\\\",\\\"DE\\\",\\\"GH\\\",\\\"GI\\\",\\\"GR\\\",\\\"GL\\\",\\\"GD\\\",\\\"GP\\\",\\\"GU\\\",\\\"GT\\\",\\\"GG\\\",\\\"GN\\\",\\\"GW\\\",\\\"GY\\\",\\\"HT\\\",\\\"HM\\\",\\\"VA\\\",\\\"HN\\\",\\\"HK\\\",\\\"HU\\\",\\\"IS\\\",\\\"IN\\\",\\\"ID\\\",\\\"IR\\\",\\\"IQ\\\",\\\"IE\\\",\\\"IM\\\",\\\"IL\\\",\\\"IT\\\",\\\"JM\\\",\\\"JP\\\",\\\"JE\\\",\\\"JO\\\",\\\"KZ\\\",\\\"KE\\\",\\\"KI\\\",\\\"KP\\\",\\\"KR\\\",\\\"KW\\\",\\\"KG\\\",\\\"LA\\\",\\\"LV\\\",\\\"LB\\\",\\\"LS\\\",\\\"LR\\\",\\\"LY\\\",\\\"LI\\\",\\\"LT\\\",\\\"LU\\\",\\\"MO\\\",\\\"MG\\\",\\\"MW\\\",\\\"MY\\\",\\\"MV\\\",\\\"ML\\\",\\\"MT\\\",\\\"MH\\\",\\\"MQ\\\",\\\"MR\\\",\\\"MU\\\",\\\"YT\\\",\\\"MX\\\",\\\"FM\\\",\\\"MD\\\",\\\"MC\\\",\\\"MN\\\",\\\"ME\\\",\\\"MS\\\",\\\"MA\\\",\\\"MZ\\\",\\\"MM\\\",\\\"NA\\\",\\\"NR\\\",\\\"NP\\\",\\\"NL\\\",\\\"NC\\\",\\\"NZ\\\",\\\"NI\\\",\\\"NE\\\",\\\"NG\\\",\\\"NU\\\",\\\"NF\\\",\\\"MK\\\",\\\"MP\\\",\\\"NO\\\",\\\"OM\\\",\\\"PK\\\",\\\"PW\\\",\\\"PS\\\",\\\"PA\\\",\\\"PG\\\",\\\"PY\\\",\\\"PE\\\",\\\"PH\\\",\\\"PN\\\",\\\"PL\\\",\\\"PT\\\",\\\"PR\\\",\\\"QA\\\",\\\"RO\\\",\\\"RU\\\",\\\"RW\\\",\\\"RE\\\",\\\"BL\\\",\\\"SH\\\",\\\"KN\\\",\\\"LC\\\",\\\"MF\\\",\\\"PM\\\",\\\"VC\\\",\\\"WS\\\",\\\"SM\\\",\\\"ST\\\",\\\"SA\\\",\\\"SN\\\",\\\"RS\\\",\\\"SC\\\",\\\"SL\\\",\\\"SG\\\",\\\"SX\\\",\\\"SK\\\",\\\"SI\\\",\\\"SB\\\",\\\"SO\\\",\\\"ZA\\\",\\\"GS\\\",\\\"SS\\\",\\\"ES\\\",\\\"LK\\\",\\\"SD\\\",\\\"SR\\\",\\\"SJ\\\",\\\"SE\\\",\\\"CH\\\",\\\"SY\\\",\\\"TW\\\",\\\"TJ\\\",\\\"TZ\\\",\\\"TH\\\",\\\"TL\\\",\\\"TG\\\",\\\"TK\\\",\\\"TO\\\",\\\"TT\\\",\\\"TN\\\",\\\"TM\\\",\\\"TC\\\",\\\"TV\\\",\\\"TR\\\",\\\"UG\\\",\\\"UA\\\",\\\"AE\\\",\\\"GB\\\",\\\"UM\\\",\\\"US\\\",\\\"UY\\\",\\\"UZ\\\",\\\"VU\\\",\\\"VE\\\",\\\"VN\\\",\\\"VG\\\",\\\"VI\\\",\\\"WF\\\",\\\"EH\\\",\\\"YE\\\",\\\"ZM\\\",\\\"ZW\\\",\\\"AX\\\",\\\"N/A\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "0c3eb471-bef5-43bd-8c44-199f3c532f8a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": {{timestamp}},\n    \"userId\": \"{{businessUserId}}\",\n    \"updatedBusinessUserAttributes\": {\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE\"\n        },\n        \"legalEntity\": {\n            \"companyGeneralDetails\": {\n                \"legalName\": \"Mr Postman\"\n            },\n            \"companyRegistrationDetails\": {\n                \"registrationCountry\": \"AA\",\n                \"registrationIdentifier\": \"AB\"\n            },\n            \"contactDetails\": {\n                \"addresses\": [\n                    {\n                        \"addressLines\": [\n                            \"Klara-Franke Str 20\"\n                        ],\n                        \"postcode\": \"10557\",\n                        \"city\": \"Berlin\",\n                        \"state\": \"Berlin\",\n                        \"country\": \"Germany\",\n                        \"tags\": [\n                            {\n                                \"key\": \"customKey\",\n                                \"value\": \"customValue\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{domain}}/events/business/user",
              "host": ["{{domain}}"],
              "path": ["events", "business", "user"]
            }
          },
          "response": [],
          "uid": "24163049-0c3eb471-bef5-43bd-8c44-199f3c532f8a"
        },
        {
          "name": "Timestamp Provided as String",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3909390-2937-435f-9403-02a067a3d0ea",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation Error Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.validationErrors).to.eql(\"[instance type (string) does not match any allowed primitive type (allowed: [\\\"integer\\\",\\\"number\\\"])]\");",
                  "});",
                  "",
                  "pm.test(\"Message Check\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"message\");",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"validationErrors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "a279c32a-347d-4823-8121-e797bdb5fc26",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timestamp\": \"{{timestamp}}\",\n    \"userId\": \"{{businessUserId}}\",\n    \"updatedBusinessUserAttributes\": {\n        \"kycStatusDetails\": {\n            \"status\": \"SUCCESSFUL\"\n        },\n        \"userStateDetails\": {\n            \"state\": \"ACTIVE\"\n        },\n        \"legalEntity\": {\n            \"companyGeneralDetails\": {\n                \"legalName\": \"Mr Postman\"\n            },\n            \"companyRegistrationDetails\": {\n                \"registrationCountry\": \"US\",\n                \"registrationIdentifier\": \"AB\"\n            },\n            \"contactDetails\": {\n                \"addresses\": [\n                    {\n                        \"addressLines\": [\n                            \"Klara-Franke Str 20\"\n                        ],\n                        \"postcode\": \"10557\",\n                        \"city\": \"Berlin\",\n                        \"state\": \"Berlin\",\n                        \"country\": \"Germany\",\n                        \"tags\": [\n                            {\n                                \"key\": \"customKey\",\n                                \"value\": \"customValue\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{domain}}/events/business/user",
              "host": ["{{domain}}"],
              "path": ["events", "business", "user"]
            }
          },
          "response": [],
          "uid": "24163049-a279c32a-347d-4823-8121-e797bdb5fc26"
        }
      ],
      "id": "32c1fd48-07d0-4ea7-aeaf-f56d2b0b459a",
      "uid": "24163049-32c1fd48-07d0-4ea7-aeaf-f56d2b0b459a"
    }
  ]
}
