import {
  BATCH_JOB_PAYLOAD_RESULT_KEY,
  BATCH_JOB_RUN_TYPE_RESULT_KEY,
  BatchRunType,
} from '@lib/cdk/constants'
import { BatchJob, BatchJobWithId } from '@/@types/batch-job'
import { LONG_RUNNING_MIGRATION_TENANT_ID } from '@/utils/batch-job'
import { tenantSettings } from '@/core/utils/context'

export const jobDecisionHandler = async (
  job: BatchJobWithId
): Promise<{
  [BATCH_JOB_RUN_TYPE_RESULT_KEY]: BatchRunType
  [BATCH_JOB_PAYLOAD_RESULT_KEY]: any
}> => {
  const settings =
    job.tenantId === LONG_RUNNING_MIGRATION_TENANT_ID
      ? {}
      : await tenantSettings(job.tenantId)

  const BATCH_JOB_AND_RUN_TYPE_MAP: {
    [key in BatchJob['type']]: BatchRunType
  } = {
    DASHBOARD_REFRESH: settings.features?.includes('MANUAL_DASHBOARD_REFRESH')
      ? 'FARGATE'
      : 'LAMBDA',
    PNB_PULL_USERS_DATA: 'FARGATE',
    API_USAGE_METRICS: 'LAMBDA',
    GO_CARDLESS_BACKFILL: 'FARGATE',
    DEMO_MODE_DATA_LOAD: 'LAMBDA',
    GLOBAL_RULE_AGGREGATION_REBUILD: 'LAMBDA',
    ONGOING_SCREENING_USER_RULE: 'FARGATE',
    PNB_TRANSACTION_UPDATES: 'FARGATE',
    CLICKHOUSE_DATA_BACKFILL: 'FARGATE',
    BACKFILL_TRANSACTIONS_DESC: 'FARGATE',
    WEBHOOK_RETRY: 'LAMBDA',
    SIMULATION_BEACON: 'FARGATE',
    SIMULATION_PULSE: 'LAMBDA',
    SYNC_DATABASES: 'LAMBDA',
    TEST_FARGATE: 'FARGATE',
    BACKFILL_ASYNC_RULE_RUNS: 'FARGATE',
    BACKFILL_ENTITIES_JSONL: 'FARGATE',
    PNB_BACKFILL_TRANSACTIONS: 'FARGATE',
    PNB_BACKFILL_KRS: 'FARGATE',
    PNB_BACKFILL_CRA: 'FARGATE',
    PNB_BACKFILL_HAMMERHEAD: 'FARGATE',
    PNB_BACKFILL_ARS: 'FARGATE',
    PNB_BACKFILL_WEBHOOK_DELIVERIES: 'FARGATE',
    TENANT_DELETION: 'FARGATE',
    RULE_PRE_AGGREGATION: 'FARGATE',
    MANUAL_RULE_PRE_AGGREGATION: 'FARGATE',
    FILES_AI_SUMMARY: 'LAMBDA',
    ALERT_SLA_STATUS_REFRESH: 'LAMBDA',
    REVERIFY_TRANSACTIONS: 'FARGATE',
    SANCTIONS_DATA_FETCH: 'FARGATE',
    BACKFILL_AVERAGE_TRS: 'LAMBDA',
    RISK_SCORING_RECALCULATION: 'FARGATE',
    SIMULATION_RISK_FACTORS_V8: 'FARGATE',
    CASE_SLA_STATUS_REFRESH: 'LAMBDA',
    FIX_RISK_SCORES_FOR_PNB_USERS: 'FARGATE',
    NANGO_DATA_FETCH: 'FARGATE',
    FINCEN_REPORT_STATUS_REFRESH: 'LAMBDA',
    AGGREGATION_CLEANUP: 'FARGATE',
    SYNC_AUTH0_DATA: 'LAMBDA',
    IN_HOUSE_SCREENING_MIGRATION: 'FARGATE',
    FAILING_BATCH_JOB: 'LAMBDA',
    FIX_LOCKS_FOR_KRS: 'FARGATE',
    FIX_ARS_BREAKDOWN: 'FARGATE',
    DELTA_SANCTIONS_DATA_FETCH: 'FARGATE',
    BACKFILL_ACTION_PROCESSING: 'LAMBDA',
    CASES_DYNAMO_BACKFILL: 'FARGATE',
    PERIODIC_SCREENING_USER_RULE: 'FARGATE',
    QA_CLEANUP: 'LAMBDA',
    DYNAMODB_CLICKHOUSE_BACKFILL: 'FARGATE',
    MANUAL_TRANSACTION_REVERIFICATION: 'FARGATE',
    FLAT_FILES_VALIDATION: 'FARGATE',
    FLAT_FILES_RUNNER: 'FARGATE',
    USER_RULE_RE_RUN: 'FARGATE',
    SANCTIONS_SCREENING_DETAILS_MIGRATION: 'FARGATE',
    BATCH_RERUN_USERS: 'FARGATE',
    EDD_REVIEW: 'LAMBDA',
    SCREENING_PROFILE_DATA_FETCH: 'FARGATE',
    SCREENING_ALERTS_EXPORT: 'FARGATE',
    UPDATE_TRANSACTION_STATUS: 'FARGATE',
  }

  return {
    [BATCH_JOB_RUN_TYPE_RESULT_KEY]: BATCH_JOB_AND_RUN_TYPE_MAP[job.type],
    [BATCH_JOB_PAYLOAD_RESULT_KEY]:
      BATCH_JOB_AND_RUN_TYPE_MAP[job.type] == 'LAMBDA'
        ? job
        : {
            jobId: job.jobId,
            type: job.type,
            tenantId: job.tenantId,
            awsCredentials: job['awsCredentials'],
          },
  }
}
