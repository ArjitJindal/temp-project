import { pick } from 'lodash'
import { migrateAllTenants } from '../utils/tenant'
import { getMongoDbClient } from '@/utils/mongodb-utils'
import { Tenant } from '@/services/accounts/repository'
import {
  USER_EVENTS_COLLECTION,
  USERS_COLLECTION,
} from '@/utils/mongodb-definitions'
import { getDynamoDbClient } from '@/utils/dynamodb'
import { ConsumerUserEvent } from '@/@types/openapi-internal/ConsumerUserEvent'
import { UserRepository } from '@/services/users/repositories/user-repository'
import { UserWithRulesResult } from '@/@types/openapi-internal/UserWithRulesResult'

// fetched from the list mentioned in ticket
const impactedUserIds = [
  '000001712383',
  '000002993263',
  '000004479232',
  '000004799335',
  '000006598410',
  '000007799702',
  '000005023116',
  '000003935409',
  '000002599077',
  '000008172510',
  '000009080858',
  '000011868967',
  '000013027368',
  '000013456042',
  '000015077151',
  '000012811145',
  '000010958358',
  '000008234791',
  '000001844005',
  '000000018235',
  '000003022494',
  '000003147942',
  '000004176649',
  '000005201357',
  '000005519286',
  '000007643965',
  '000002867539',
  '000002201145',
  '000008338341',
  '000009792675',
  '000010002258',
  '000010025565',
  '000012309800',
  '000012603021',
  '000012624432',
  '000015138538',
  '000013422587',
  '000013798085',
  '000011947880',
  '000002399063',
  '000002903465',
  '000005700804',
  '000011863038',
  '000004704785',
  '000003909158',
  '000002792044',
  '000003424056',
  '000001382110',
  '000005754709',
  '000001128187',
  '000005051855',
  '000014444641',
  '000005287678',
  '000007708702',
  '000010852010',
  '000003094799',
  '000010562409',
  '000000014534',
  '000000473633',
  '000011132839',
  '000014302738',
  '000000553924',
  '000003754094',
  '000000889527',
  '000001432575',
  '000001796290',
  '000002212698',
  '000002438133',
  '000000467883',
  '000009939911',
  '000007495342',
  '000003852281',
  '000004991112',
  '000002359829',
  '000002762325',
  '000000942585',
  '000000981337',
  '000001168530',
  '000000055992',
  '000012155774',
  '000009794523',
  '000005664905',
  '000010230667',
  '000010338609',
  '000004465251',
  '000002808272',
  '000001348274',
  '000009824991',
  '000011713238',
  '000011040415',
  '000007798184',
  '000002728518',
  '000003190311',
  '000003833447',
  '000005113683',
  '000011435806',
  '000001426648',
  '000003419844',
  '000000030422',
  '000000906712',
  '000002557105',
  '000004693799',
  '000011931411',
  '000011923996',
  '000005634072',
  '000000777798',
  '000009400767',
  '000015330853',
  '000015248299',
  '000005129175',
  '000006108036',
  '000003314117',
  '000003417681',
  '000003585533',
  '000000998503',
  '000015047559',
  '000003773707',
  '000012023847',
  '000012201664',
  '000014678967',
  '000007613235',
  '000006306956',
  '000004629041',
  '000000654758',
  '000004989554',
  '000006072862',
  '000007754059',
  '000002277988',
  '000005755871',
  '000005034220',
  '000012172554',
  '000005493963',
  '000006311026',
  '000012647153',
  '000008315233',
  '000010212275',
  '000004267385',
  '000012448886',
  '000014955438',
  '000001267292',
  '000000690090',
  '000005817177',
  '000010124088',
  '000003177812',
  '000005407296',
  '000005600812',
  '000005812737',
  '000008238875',
  '000003117947',
  '000000015840',
  '000015202050',
  '000015345311',
  '000010838745',
  '000011960292',
  '000004511913',
  '000000381208',
  '000002492965',
  '000012699330',
  '000015365354',
  '000012587344',
  '000011084530',
  '000000566995',
  '000006194277',
  '000005566316',
  '000007216385',
  '000010826931',
  '000014770168',
  '000002565013',
  '000002560599',
  '000013172630',
  '000012259958',
  '000012535831',
  '000010292071',
  '000005679346',
  '000007498976',
  '000009901480',
  '000010436827',
  '000013456074',
  '000013633602',
  '000013616213',
  '000008822921',
  '000007461532',
  '000000409887',
  '000002829022',
  '000010397806',
  '000011016970',
  '000002591870',
  '000003447675',
  '000003212709',
  '000004073940',
  '000000747819',
  '000009998789',
  '000005699077',
  '000011293874',
  '000005129767',
  '000012030030',
  '000012025004',
  '000012861387',
  '000011922073',
  '000005748502',
  '000001216086',
  '000002487244',
  '000000727983',
  '000000233590',
  '000004055918',
  '000004944981',
  '000007081931',
  '000009123480',
  '000010852285',
  '000011192399',
  '000014657761',
  '000006732365',
  '000000379829',
  '000003701614',
  '000000474115',
  '000004889575',
  '000012740488',
  '000007433930',
  '000001248760',
  '000003219403',
  '000005244748',
  '000010405428',
  '000005280107',
  '000004976377',
  '000001757038',
  '000003154386',
  '000009730721',
  '000004959929',
  '000007494386',
  '000005024987',
  '000015535163',
  '000006373729',
  '000003805620',
  '000012329054',
  '000012557923',
  '000015508358',
  '000015535095',
  '000003147061',
  '000003801494',
  '000005035492',
  '000000019938',
  '000012864297',
  '000012870095',
  '000015291405',
  '000015611648',
  '000010118754',
  '000001940846',
  '000004470260',
  '000005170263',
  '000013264820',
  '000015353506',
  '000004944489',
  '000007474834',
  '000010203292',
  '000005205215',
  '000005799749',
  '000002551314',
  '000003936050',
  '000011069065',
  '000012346533',
  '000012641886',
  '000012780978',
  '000003817235',
  '000003453232',
  '000005609162',
  '000006465913',
  '000007840135',
  '000008571662',
  '000004411569',
  '000002676912',
  '000000290018',
  '000011920125',
  '000015579704',
  '000007212176',
  '000005056727',
  '000015606291',
  '000005093736',
  '000009197726',
  '000000627845',
  '000004680157',
  '000006152052',
  '000005641308',
  '000011046699',
  '000011879043',
  '000005076836',
  '000004933333',
  '000006815525',
  '000010425045',
  '000000678713',
  '000001307903',
  '000001336579',
  '000000305121',
  '000002733483',
  '000004608119',
  '000002473067',
  '000004357321',
  '000003515076',
  '000003733196',
  '000002561213',
  '000010949182',
  '000010090113',
  '000007740182',
  '000004990302',
  '000013325118',
  '000015608222',
  '000015157480',
  '000015595104',
  '000015546175',
  '000015570297',
  '000015591306',
  '000013481343',
  '000012005460',
  '000012239978',
  '000003865236',
  '000004910413',
  '000002993121',
  '000000349774',
  '000000022129',
  '000001451548',
  '000007455152',
  '000005033104',
  '000004699739',
  '000014906550',
  '000007361668',
  '000000486801',
  '000008242874',
  '000003096103',
  '000006460062',
  '000010178621',
  '000003117902',
  '000001947094',
  '000004898721',
  '000005079210',
  '000004191254',
  '000003314711',
  '000003356771',
  '000002889018',
  '000006531316',
  '000009973990',
  '000014742263',
  '000006372323',
  '000001910196',
  '000011864117',
  '000012939890',
  '000003105226',
  '000014149701',
  '000004383831',
]

async function migrateTenant(tenant: Tenant) {
  if (tenant.id === 'pnb') {
    const mongoDb = await getMongoDbClient()
    const db = mongoDb.db()
    const collection = db.collection<UserWithRulesResult>(
      USERS_COLLECTION(tenant.id)
    )
    const users = collection.find({
      userId: {
        $in: impactedUserIds,
      },
    })
    const userEventsCollection = db.collection<ConsumerUserEvent>(
      USER_EVENTS_COLLECTION(tenant.id)
    )
    const dynamoDb = getDynamoDbClient()
    const userRepository = new UserRepository(tenant.id, { dynamoDb, mongoDb })
    for await (const user of users) {
      const userEvents = await userEventsCollection
        .find({
          userId: user.userId,
        })
        .toArray()
      const shouldUpdateUser =
        userEvents.length === 0 ||
        !userEvents.some((e) =>
          e.updatedConsumerUserAttributes?.tags?.some(
            (t) => t.key === 'RISK_LEVEL_STATUS'
          )
        )
      if (shouldUpdateUser) {
        const oldTags =
          user.tags?.filter((t) => t.key !== 'RISK_LEVEL_STATUS') ?? []
        const newTag = {
          key: 'RISK_LEVEL_STATUS',
          value: user.lastTransactionTimestamp ? 'Complete' : 'Incomplete',
        }
        const userToSave = pick(
          user,
          UserWithRulesResult.attributeTypeMap.map((a) => a.name)
        ) as UserWithRulesResult
        await userRepository.saveUser(
          {
            ...userToSave,
            tags: [...oldTags, newTag],
          },
          'CONSUMER'
        )
      }
    }
  }
}

export const up = async () => {
  await migrateAllTenants(migrateTenant)
}
export const down = async () => {
  // skip
}
