#!/usr/bin/env ts-node
/* eslint-disable @typescript-eslint/no-explicit-any */

/**
 * This script injects AWS API Gateway specific settings into our internal openapi and output to dist/openapi/openapi-internal-autogenerated.yaml
 */

import * as fs from 'fs'
import * as yaml from 'js-yaml'
import _ from 'lodash'
import mkdirp from 'mkdirp'
import { StackConstants } from '../constants'
import { getAugmentedOpenapi } from './openapi-augmentor-util'
import { ALLOWED_ORIGINS } from './openapi-internal-constants'

// We don't care about region
const env = (process.env.ENV || 'prod').split(':')[0]

export const ConsoleApiPathToLambda: any = {
  '/tenants': StackConstants.CONSOLE_API_TENANT_FUNCTION_NAME,
  '/tenants/settings': StackConstants.CONSOLE_API_TENANT_FUNCTION_NAME,
  '/accounts': StackConstants.CONSOLE_API_ACCOUNT_FUNCTION_NAME,
  '/accounts/{accountId}/change_role':
    StackConstants.CONSOLE_API_ACCOUNT_FUNCTION_NAME,
  '/accounts/{accountId}/change_tenant':
    StackConstants.CONSOLE_API_ACCOUNT_FUNCTION_NAME,
  '/accounts/{accountId}/settings':
    StackConstants.CONSOLE_API_ACCOUNT_FUNCTION_NAME,
  '/accounts/{accountId}': StackConstants.CONSOLE_API_ACCOUNT_FUNCTION_NAME,
  '/me': StackConstants.CONSOLE_API_ACCOUNT_FUNCTION_NAME,
  '/roles': StackConstants.CONSOLE_API_ROLE_FUNCTION_NAME,
  '/roles/{roleId}': StackConstants.CONSOLE_API_ROLE_FUNCTION_NAME,
  '/apikey': StackConstants.API_KEY_GENERATOR_FUNCTION_NAME,
  '/iam/rules': StackConstants.CONSOLE_API_RULE_FUNCTION_NAME,
  '/rules': StackConstants.CONSOLE_API_RULE_FUNCTION_NAME,
  '/rule-filters': StackConstants.CONSOLE_API_RULE_FUNCTION_NAME,
  '/rules/{ruleId}': StackConstants.CONSOLE_API_RULE_FUNCTION_NAME,
  '/iam/rule_instances': StackConstants.CONSOLE_API_RULE_INSTANCE_FUNCTION_NAME,
  '/rule_instances': StackConstants.CONSOLE_API_RULE_INSTANCE_FUNCTION_NAME,
  '/rule_instances/{ruleInstanceId}':
    StackConstants.CONSOLE_API_RULE_INSTANCE_FUNCTION_NAME,
  '/import': StackConstants.CONSOLE_API_FILE_IMPORT_FUNCTION_NAME,
  '/import/{importId}': StackConstants.CONSOLE_API_FILE_IMPORT_FUNCTION_NAME,
  '/files/getPresignedUrl':
    StackConstants.CONSOLE_API_GET_PRESIGNED_URL_FUNCTION_NAME,
  '/lists': StackConstants.CONSOLE_API_LISTS_FUNCTION_NAME,
  '/lists/{listId}': StackConstants.CONSOLE_API_LISTS_FUNCTION_NAME,
  '/lists/{listId}/items': StackConstants.CONSOLE_API_LISTS_FUNCTION_NAME,
  '/lists/{listId}/items/{key}': StackConstants.CONSOLE_API_LISTS_FUNCTION_NAME,
  '/transactions': StackConstants.CONSOLE_API_TRANSACTIONS_VIEW_FUNCTION_NAME,
  '/transactions/stats/by-types':
    StackConstants.CONSOLE_API_TRANSACTIONS_VIEW_FUNCTION_NAME,
  '/transactions/stats/by-time':
    StackConstants.CONSOLE_API_TRANSACTIONS_VIEW_FUNCTION_NAME,
  '/transactions/export':
    StackConstants.CONSOLE_API_TRANSACTIONS_VIEW_FUNCTION_NAME,
  '/transactions/uniques':
    StackConstants.CONSOLE_API_TRANSACTIONS_VIEW_FUNCTION_NAME,
  '/transactions/{transactionId}':
    StackConstants.CONSOLE_API_TRANSACTIONS_VIEW_FUNCTION_NAME,
  '/consumer/users':
    StackConstants.CONSOLE_API_CONSUMER_USERS_VIEW_FUNCTION_NAME,
  '/consumer/users/{userId}':
    StackConstants.CONSOLE_API_CONSUMER_USERS_VIEW_FUNCTION_NAME,
  '/consumer/users/{userId}/files':
    StackConstants.CONSOLE_API_CONSUMER_USERS_VIEW_FUNCTION_NAME,
  '/consumer/users/{userId}/files/{fileId}':
    StackConstants.CONSOLE_API_CONSUMER_USERS_VIEW_FUNCTION_NAME,
  '/business/users':
    StackConstants.CONSOLE_API_BUSINESS_USERS_VIEW_FUNCTION_NAME,
  '/business/users/{userId}':
    StackConstants.CONSOLE_API_BUSINESS_USERS_VIEW_FUNCTION_NAME,
  '/business/users/{userId}/files':
    StackConstants.CONSOLE_API_BUSINESS_USERS_VIEW_FUNCTION_NAME,
  '/business/users/{userId}/files/{fileId}':
    StackConstants.CONSOLE_API_BUSINESS_USERS_VIEW_FUNCTION_NAME,
  '/business/users/uniques':
    StackConstants.CONSOLE_API_BUSINESS_USERS_VIEW_FUNCTION_NAME,
  '/users': StackConstants.CONSOLE_API_ALL_USERS_VIEW_FUNCTION_NAME,
  '/dashboard_stats/transactions':
    StackConstants.CONSOLE_API_DASHBOARD_STATS_FUNCTION_NAME,
  '/dashboard_stats/drs-distribution':
    StackConstants.CONSOLE_API_DASHBOARD_STATS_FUNCTION_NAME,
  '/dashboard_stats/hits_per_user':
    StackConstants.CONSOLE_API_DASHBOARD_STATS_FUNCTION_NAME,
  '/transactions/{transactionId}/comments':
    StackConstants.CONSOLE_API_TRANSACTIONS_VIEW_FUNCTION_NAME,
  '/transactions/{transactionId}/comments/{commentId}':
    StackConstants.CONSOLE_API_TRANSACTIONS_VIEW_FUNCTION_NAME,
  '/dashboard_stats/rule_hit':
    StackConstants.CONSOLE_API_DASHBOARD_STATS_FUNCTION_NAME,
  '/slack/oauth_redirect': StackConstants.SLACK_APP_FUNCTION_NAME,
  '/webhooks': StackConstants.CONSOLE_API_WEBHOOK_CONFIGURATION_FUNCTION_NAME,
  '/webhooks/{webhookId}':
    StackConstants.CONSOLE_API_WEBHOOK_CONFIGURATION_FUNCTION_NAME,
  '/webhooks/{webhookId}/secret':
    StackConstants.CONSOLE_API_WEBHOOK_CONFIGURATION_FUNCTION_NAME,
  '/webhooks/{webhookId}/deliveries':
    StackConstants.CONSOLE_API_WEBHOOK_CONFIGURATION_FUNCTION_NAME,
  '/pulse/risk-classification':
    StackConstants.CONSOLE_API_RISK_CLASSIFICATION_FUNCTION_NAME,
  '/pulse/risk-assignment':
    StackConstants.CONSOLE_API_MANUAL_USER_RISK_ASSIGNMENT_FUNCTION_NAME,
  '/pulse/risk-parameter':
    StackConstants.CONSOLE_API_PARAMETER_RISK_ASSIGNMENT_FUNCTION_NAME,
  '/pulse/krs-value':
    StackConstants.CONSOLE_API_RISK_LEVEL_AND_SCORE_FUNCTION_NAME,
  '/pulse/ars-value':
    StackConstants.CONSOLE_API_RISK_LEVEL_AND_SCORE_FUNCTION_NAME,
  '/pulse/drs-value':
    StackConstants.CONSOLE_API_RISK_LEVEL_AND_SCORE_FUNCTION_NAME,
  '/auditlog': StackConstants.AUDIT_LOG_FUNCTION_NAME,
  '/cases': StackConstants.CONSOLE_API_CASE_FUNCTION_NAME,
  '/alerts': StackConstants.CONSOLE_API_CASE_FUNCTION_NAME,
  '/alerts/new-case': StackConstants.CONSOLE_API_CASE_FUNCTION_NAME,
  '/cases/{caseId}': StackConstants.CONSOLE_API_CASE_FUNCTION_NAME,
  '/cases/{caseId}/transactions': StackConstants.CONSOLE_API_CASE_FUNCTION_NAME,
  '/cases/{caseId}/rules': StackConstants.CONSOLE_API_CASE_FUNCTION_NAME,
  '/cases/{caseId}/comments': StackConstants.CONSOLE_API_CASE_FUNCTION_NAME,
  '/cases/{caseId}/comments/{commentId}':
    StackConstants.CONSOLE_API_CASE_FUNCTION_NAME,
  '/cases/{caseId}/rule/{rulesInstanceId}/transactions':
    StackConstants.CONSOLE_API_CASE_FUNCTION_NAME,
  '/users/{userId}/comments':
    StackConstants.CONSOLE_API_ALL_USERS_VIEW_FUNCTION_NAME,
  '/users/{userId}/comments/{commentId}':
    StackConstants.CONSOLE_API_ALL_USERS_VIEW_FUNCTION_NAME,
  '/sanctions/search': StackConstants.SANCTIONS_FUNCTION_NAME,
  '/sanctions/search/{searchId}': StackConstants.SANCTIONS_FUNCTION_NAME,
  '/simulation': StackConstants.CONSOLE_API_SIMULATION_FUNCTION_NAME,
  '/simulation/{jobId}': StackConstants.CONSOLE_API_SIMULATION_FUNCTION_NAME,
  '/simulation/{taskId}/results':
    StackConstants.CONSOLE_API_SIMULATION_FUNCTION_NAME,
}

const openapi = getAugmentedOpenapi(
  './lib/openapi/internal/openapi-internal-original.yaml',
  ConsoleApiPathToLambda,
  'JWT',
  {
    iamAuthorizedPaths: ['/apikey', '/iam/rules', '/iam/rule_instances'],
    publicPaths: ['/slack/oauth_redirect'],
    allowedOrigins: ['dev', 'local'].includes(env as string)
      ? ALLOWED_ORIGINS.dev
      : env === 'sandbox'
      ? ALLOWED_ORIGINS.sandbox
      : ALLOWED_ORIGINS.prod,
  }
)

// Inject public API schemas and replace external URL with relative path
// because exporting 'Bundled References' in stoplight doesn't deference recursively
// and openapi-generator doesn't build for the 'Bundled References' version.
// TODO: This workaround should be removed after stoplight fixes this issue.
const publicOpenapi = yaml.load(
  fs.readFileSync('./lib/openapi/public/openapi-public-original.yaml', 'utf8')
) as any
openapi['components']['schemas'] = {
  ...openapi['components']['schemas'],
  ...publicOpenapi['components']['schemas'],
}
const autogeneratedYaml = yaml
  .dump(openapi)
  .replace(/(>-\n\s+)*[^\s]+\.yaml.*(\/components\/schemas\/.*)/g, "'#$2'")

mkdirp.sync(`./dist/openapi`)
fs.writeFileSync(
  `./dist/openapi/openapi-internal-autogenerated-${env}.yaml`,
  autogeneratedYaml
)
