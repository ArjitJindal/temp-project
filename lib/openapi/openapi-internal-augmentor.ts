/* eslint-disable @typescript-eslint/no-explicit-any */

/**
 * This script injects AWS API Gateway specific settings into our internal openapi and output to lib/openapi-internal-autogenerated.yaml
 */

import * as fs from 'fs'
import * as yaml from 'js-yaml'
import { TarponStackConstants } from '../constants'

const CORS_ALLOW_ORIGINS = [
  'http://localhost:8001',
  'https://localhost:8001',
  'https://dev.console.flagright.com',
  'https://sandbox.console.flagright.com',
  'https://demo.console.flagright.com',
  'https://console.flagright.com',
]
const CORS_ALLOW_ORIGINS_STRING =
  '[' + CORS_ALLOW_ORIGINS.map((v) => `"${v}"`).join(',') + ']'

const PathToLambda: any = {
  '/apikey': TarponStackConstants.API_KEY_GENERATOR_FUNCTION_NAME,
  '/rule_instances': TarponStackConstants.RULE_INSTANCE_FUNCTION_NAME,
  '/rule_instances/{ruleInstanceId}':
    TarponStackConstants.RULE_INSTANCE_FUNCTION_NAME,
  '/transactions/import': TarponStackConstants.FILE_IMPORT_FUNCTION_NAME,
  '/transactions/import/getPresignedUrl':
    TarponStackConstants.GET_PRESIGNED_URL_FUNCTION_NAME,
  '/lists': TarponStackConstants.LIST_IMPORTER_FUNCTION_NAME,
}

function assertValidLambdaMappings(openapi: any) {
  const pathsLocal = Object.keys(PathToLambda)
  const pathsRemote = Object.keys(openapi.paths)
  if (
    pathsLocal.length !== pathsRemote.length ||
    new Set([...pathsLocal, ...pathsRemote]).size !== pathsRemote.length
  ) {
    console.log('Local paths: ', pathsLocal)
    console.log('Remote paths: ', pathsRemote)
    throw new Error(
      'paths in PathToLambda are not in sync with remote openapi paths. Please update PathToLambda'
    )
  }
}

const openapi = yaml.load(
  fs.readFileSync('./lib/openapi/openapi-internal-original.yaml', 'utf8')
) as any

assertValidLambdaMappings(openapi)

// Request validator setting
openapi['x-amazon-apigateway-request-validators'] = {
  all: {
    validateRequestBody: true,
    validateRequestParameters: true,
  },
}

// Labmda authorizer setting
openapi['components']['securitySchemes']['lambda-authorizer'] = {
  type: 'apiKey',
  name: 'Authorization',
  in: 'header',
  'x-amazon-apigateway-authorizer': {
    type: 'request',
    identitySource: 'method.request.header.authorization',
    authorizerUri: {
      'Fn::Sub': `arn:aws:apigateway:\${AWS::Region}:lambda:path/2015-03-31/functions/\${${TarponStackConstants.JWT_AUTHORIZER_FUNCTION_NAME}.Arn}/invocations`,
    },
    authorizerResultTtlInSeconds: 600,
    enableSimpleResponses: false,
  },
  'x-amazon-apigateway-authtype': 'Custom scheme with tenant claims',
}

// Labmda integrations
for (const path in openapi.paths) {
  for (const method in openapi.paths[path]) {
    const methodSetting = openapi.paths[path][method]
    const lambdaFunctionName = PathToLambda[path]

    methodSetting['x-amazon-apigateway-request-validator'] = 'all'
    methodSetting['x-amazon-apigateway-integration'] = {
      uri: {
        'Fn::Sub': `arn:aws:apigateway:$\{AWS::Region}:lambda:path/2015-03-31/functions/$\{${lambdaFunctionName}.Arn}/invocations`,
      },
      httpMethod: 'POST',
      type: 'aws_proxy',
      passthroughBehavior: 'never',
    }
    methodSetting['security'] = [{ 'lambda-authorizer': [] }]
  }

  // CORS handling (because we use SpecRestApi, so we need to create OPTIONS method for all child resources by ourselves)
  openapi.paths[path]['options'] = {
    parameters: [],
    responses: {
      '200': {
        description: 'Default response',
        headers: {
          'Access-Control-Allow-Headers': {
            schema: {
              type: 'string',
            },
          },
          'Access-Control-Allow-Methods': {
            schema: {
              type: 'string',
            },
          },
          'Access-Control-Allow-Origin': {
            schema: {
              type: 'string',
            },
          },
        },
      },
    },
    'x-amazon-apigateway-integration': {
      type: 'mock',
      responseTemplates: {
        'application/json': `
          {"statusCode":200}
          #set($domains = ${CORS_ALLOW_ORIGINS_STRING})
          #set($origin = $input.params("origin"))
          #if($domains.contains($origin))
          #set($context.responseOverride.header.Access-Control-Allow-Origin="$origin")
          #set($context.responseOverride.header.Access-Control-Allow-Methods="*")
          #set($context.responseOverride.header.Access-Control-Allow-Headers="*")
          #end
        `,
      },
    },
  }
}

fs.writeFileSync(
  './lib/openapi/openapi-internal-autogenerated.yaml',
  yaml.dump(openapi)
)
