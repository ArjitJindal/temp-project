openapi: 3.0.0
info:
  title: Tarpon Console API
  version: '1.0'
servers:
  - url: http://localhost:3000
paths:
  /apikey:
    parameters: []
    post:
      summary: Tarpon API Key - Create
      operationId: post-apikey
      responses:
        '200':
          description: New API Key
      parameters:
        - schema:
            type: string
          in: query
          name: tenantId
          description: Tenant ID
        - schema:
            type: string
          in: query
          name: usagePlanId
          description: AWS Gateway usage plan ID
      description: Generate a new Tarpon API key for a tenant
  /rules:
    get:
      summary: Rules - List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rule'
              examples: {}
      operationId: get-rules
      description: ''
      parameters:
        - schema:
            type: string
          in: query
          name: ruleId
    parameters: []
    post:
      summary: Rules - Create
      operationId: post-rules
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
  /rule-filters:
    get:
      summary: Rule Filters - List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              examples: {}
      operationId: get-rule-filters
      description: ''
      parameters:
        - schema:
            type: string
          in: query
          name: ruleId
    parameters: []
  /iam/rules:
    parameters: []
    post:
      summary: Rules - Create
      operationId: post-iam-rules
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
      parameters:
        - schema:
            type: string
          in: query
          name: tenantId
          description: Tenant ID
  '/rules/{ruleId}':
    parameters:
      - schema:
          type: string
        name: ruleId
        in: path
        required: true
    put:
      summary: Rule - Update
      operationId: put-rule-ruleId
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
    delete:
      summary: Rule - Delete
      operationId: delete-rules-ruleId
      responses:
        '200':
          description: OK
  /rule_instances:
    post:
      summary: Rule Instance - Create
      operationId: post-rule_instances
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleInstance'
              examples:
                example-1:
                  value:
                    id: string
                    ruleId: string
                    action: FLAG
                    parameters: {}
                    status: ACTIVE
                    createdAt: 0
                    updatedAt: 0
                    runCount: 0
                    hitCount: 0
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleInstance'
    get:
      summary: Rule Instance - List
      operationId: get-rule_instances
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RuleInstance'
  /iam/rule_instances:
    post:
      summary: Rule Instance - Create
      operationId: post-iam-rule_instances
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleInstance'
              examples:
                example-1:
                  value:
                    id: string
                    ruleId: string
                    action: FLAG
                    parameters: {}
                    status: ACTIVE
                    createdAt: 0
                    updatedAt: 0
                    runCount: 0
                    hitCount: 0
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleInstance'
      parameters:
        - schema:
            type: string
          in: query
          name: tenantId
          description: Tenant ID
    parameters: []
  '/rule_instances/{ruleInstanceId}':
    parameters:
      - schema:
          type: string
        name: ruleInstanceId
        in: path
        required: true
    delete:
      summary: Rule Instance - Delete
      operationId: delete-rule_instances-ruleInstanceId
      responses:
        '200':
          description: OK
    put:
      summary: Rule Instance - Update
      operationId: put-rule_instances-ruleInstanceId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleInstance'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleInstance'
  /import:
    parameters: []
    post:
      summary: Import - Start to Import
      operationId: post-import
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportResponse'
              examples:
                example-1:
                  value:
                    importedCount: 100
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportRequest'
            examples:
              example-1:
                value:
                  type: TRANSACTION
                  format: flagright
                  filename: filename
                  s3Key: s3-key-in-a-bucket
  '/import/{importId}':
    parameters:
      - schema:
          type: string
        name: importId
        in: path
        required: true
    get:
      summary: Import - Get Import Info
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileImport'
      operationId: get-import-importId
  /files/getPresignedUrl:
    parameters: []
    post:
      summary: Files - Get Presigned URL
      operationId: post-getPresignedUrl
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresignedUrlResponse'
              examples: {}
      description: Get a presigned URL for uploading a file
  '/lists/{listType}':
    parameters:
      - schema:
          $ref: ../public/openapi-public-original.yaml#/components/schemas/ListType
        name: listType
        in: path
        required: true
    get:
      summary: Lists - Get All
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../public/openapi-public-original.yaml#/components/schemas/ListHeader
      operationId: get-lists
    post:
      summary: Lists - Post
      tags: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../public/openapi-public-original.yaml#/components/schemas/ListData
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../public/openapi-public-original.yaml#/components/schemas/ListExisted
      operationId: post-list
  '/lists/{listType}/{listId}':
    parameters:
      - schema:
          $ref: ../public/openapi-public-original.yaml#/components/schemas/ListType
        name: listType
        in: path
        required: true
      - schema:
          type: string
        name: listId
        in: path
        required: true
    delete:
      summary: Lists - Delete
      tags: []
      responses:
        '200':
          description: OK
      operationId: delete-list
    patch:
      summary: Lists - Path
      tags: []
      operationId: patch-list
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../public/openapi-public-original.yaml#/components/schemas/ListData
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../public/openapi-public-original.yaml#/components/schemas/ListExisted
    get:
      summary: Lists - Item header
      tags: []
      operationId: get-list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../public/openapi-public-original.yaml#/components/schemas/ListHeader
        '404':
          description: Not found
  '/lists/{listType}/{listId}/items':
    parameters:
      - schema:
          $ref: ../public/openapi-public-original.yaml#/components/schemas/ListType
        name: listType
        in: path
        required: true
      - schema:
          type: string
        name: listId
        in: path
        required: true
    get:
      summary: Lists - Items
      tags: []
      operationId: get-list-items
      parameters:
        - schema:
            type: number
          name: page
          in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../public/openapi-public-original.yaml#/components/schemas/ListItem
        '404':
          description: Not found
    post:
      summary: Lists - Post Item
      tags: []
      operationId: post-list-item
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../public/openapi-public-original.yaml#/components/schemas/ListItem
      responses:
        '200':
          description: OK
  '/lists/{listType}/{listId}/items/{key}':
    parameters:
      - schema:
          $ref: ../public/openapi-public-original.yaml#/components/schemas/ListType
        name: listType
        in: path
        required: true
      - schema:
          type: string
        name: listId
        in: path
        required: true
      - schema:
          type: string
        name: key
        in: path
        required: true
    delete:
      summary: Lists - Items - delete
      tags: []
      operationId: delete-list-item
      responses:
        '200':
          description: OK
  /transactions:
    get:
      summary: Transaction - List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsListResponse'
              examples: {}
      operationId: get-transactions-list
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          required: true
        - schema:
            type: number
          in: query
          name: skip
          required: true
        - schema:
            type: number
          in: query
          name: afterTimestamp
        - schema:
            type: number
          in: query
          name: beforeTimestamp
        - schema:
            type: string
          in: query
          name: filterId
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterIdList
        - schema:
            $ref: '#/components/schemas/RuleAction'
          in: query
          name: filterOutStatus
        - schema:
            $ref: '#/components/schemas/CaseStatus'
          in: query
          name: filterOutCaseStatus
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterRulesExecuted
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterRulesHit
        - schema:
            type: string
          in: query
          name: transactionType
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterOriginCurrencies
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterDestinationCurrencies
        - schema:
            type: string
          in: query
          name: sortField
        - schema:
            type: string
          in: query
          name: sortOrder
        - schema:
            type: string
          in: query
          name: filterUserId
        - schema:
            type: string
          in: query
          name: filterOriginUserId
        - schema:
            type: string
          in: query
          name: filterDestinationUserId
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/RuleAction'
          in: query
          name: filterStatus
        - schema:
            $ref: '#/components/schemas/CaseStatus'
          in: query
          name: filterCaseStatus
        - schema:
            type: string
          in: query
          name: filterTagKey
        - schema:
            type: string
          in: query
          name: filterTagValue
        - schema:
            type: boolean
          in: query
          name: includeUsers
        - schema:
            type: boolean
          in: query
          name: includeEvents
        - schema:
            type: string
          in: query
          name: filterOriginPaymentMethod
        - schema:
            type: string
          in: query
          name: filterDestinationPaymentMethod
        - schema:
            type: array
            items:
              $ref: ../public/openapi-public-original.yaml#/components/schemas/TransactionState
          in: query
          name: filterTransactionState
    post:
      summary: Transactions - Update
      operationId: post-transactions
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionsUpdateRequest'
  /transactions/export:
    get:
      summary: Transaction - Export
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  downloadUrl:
                    type: string
                required:
                  - downloadUrl
              examples: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                example-1:
                  value: {}
      operationId: get-transactions-list-export
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          required: true
        - schema:
            type: number
          in: query
          name: skip
          required: true
        - schema:
            type: number
          in: query
          name: afterTimestamp
        - schema:
            type: number
          in: query
          name: beforeTimestamp
          required: true
        - schema:
            type: string
          in: query
          name: filterId
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterRulesExecuted
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterRulesHit
        - schema:
            $ref: '#/components/schemas/RuleAction'
          in: query
          name: filterOutStatus
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/RuleAction'
          in: query
          name: filterStatus
        - schema:
            $ref: '#/components/schemas/CaseStatus'
          in: query
          name: filterCaseStatus
        - schema:
            type: string
          in: query
          name: filterTagKey
        - schema:
            type: string
          in: query
          name: filterTagValue
        - schema:
            type: string
          in: query
          name: sortField
        - schema:
            type: string
          in: query
          name: sortOrder
      x-internal: false
    parameters: []
  /transactions/uniques:
    get:
      summary: Transaction - Unique values for different fields
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsUniquesResponse'
      operationId: get-transactions-uniques
  '/transactions/{transactionId}':
    parameters:
      - schema:
          type: string
        name: transactionId
        in: path
        required: true
    get:
      summary: Transaction - Get
      operationId: get-transaction
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCaseManagement'
        '404':
          description: Not Found
      description: ''
  /transactions/stats/by-types:
    get:
      summary: Transaction - Stats
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsStatsByTypesResponse'
              examples: {}
      operationId: get-transactions-stats-by-type
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          required: false
        - schema:
            type: number
          in: query
          name: skip
          required: false
        - schema:
            type: number
          in: query
          name: afterTimestamp
        - schema:
            type: number
          in: query
          name: beforeTimestamp
        - schema:
            type: string
          in: query
          name: filterId
        - schema:
            $ref: '#/components/schemas/RuleAction'
          in: query
          name: filterOutStatus
        - schema:
            $ref: '#/components/schemas/CaseStatus'
          in: query
          name: filterOutCaseStatus
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterRulesExecuted
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterRulesHit
        - schema:
            type: string
          in: query
          name: transactionType
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterOriginCurrencies
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterDestinationCurrencies
        - schema:
            type: string
          in: query
          name: sortField
        - schema:
            type: string
          in: query
          name: sortOrder
        - schema:
            type: string
          in: query
          name: filterUserId
        - schema:
            type: string
          in: query
          name: filterOriginUserId
        - schema:
            type: string
          in: query
          name: filterDestinationUserId
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/RuleAction'
          in: query
          name: filterStatus
        - schema:
            $ref: '#/components/schemas/CaseStatus'
          in: query
          name: filterCaseStatus
        - schema:
            type: string
          in: query
          name: filterTagKey
        - schema:
            type: string
          in: query
          name: filterTagValue
        - schema:
            type: boolean
          in: query
          name: includeUsers
        - schema:
            type: boolean
          in: query
          name: includeEvents
        - schema:
            type: string
          in: query
          name: filterOriginPaymentMethod
        - schema:
            type: string
          in: query
          name: filterDestinationPaymentMethod
        - schema:
            type: array
            items:
              $ref: ../public/openapi-public-original.yaml#/components/schemas/TransactionState
          in: query
          name: filterTransactionState
        - schema:
            type: string
          in: query
          name: referenceCurrency
  /transactions/stats/by-time:
    get:
      summary: Transaction - Stats
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsStatsByTimeResponse'
              examples: {}
      operationId: get-transactions-stats-by-time
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          required: false
        - schema:
            type: number
          in: query
          name: skip
          required: false
        - schema:
            type: number
          in: query
          name: afterTimestamp
        - schema:
            type: number
          in: query
          name: beforeTimestamp
        - schema:
            type: string
          in: query
          name: filterId
        - schema:
            $ref: '#/components/schemas/RuleAction'
          in: query
          name: filterOutStatus
        - schema:
            $ref: '#/components/schemas/CaseStatus'
          in: query
          name: filterOutCaseStatus
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterRulesExecuted
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterRulesHit
        - schema:
            type: string
          in: query
          name: transactionType
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterOriginCurrencies
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterDestinationCurrencies
        - schema:
            type: string
          in: query
          name: sortField
        - schema:
            type: string
          in: query
          name: sortOrder
        - schema:
            type: string
          in: query
          name: filterUserId
        - schema:
            type: string
          in: query
          name: filterOriginUserId
        - schema:
            type: string
          in: query
          name: filterDestinationUserId
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/RuleAction'
          in: query
          name: filterStatus
        - schema:
            $ref: '#/components/schemas/CaseStatus'
          in: query
          name: filterCaseStatus
        - schema:
            type: string
          in: query
          name: filterTagKey
        - schema:
            type: string
          in: query
          name: filterTagValue
        - schema:
            type: boolean
          in: query
          name: includeUsers
        - schema:
            type: boolean
          in: query
          name: includeEvents
        - schema:
            type: string
          in: query
          name: filterOriginPaymentMethod
        - schema:
            type: string
          in: query
          name: filterDestinationPaymentMethod
        - schema:
            type: array
            items:
              $ref: ../public/openapi-public-original.yaml#/components/schemas/TransactionState
          in: query
          name: filterTransactionState
        - schema:
            type: string
          in: query
          name: referenceCurrency
  /consumer/users:
    get:
      summary: Consumer Users - List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerUsersListResponse'
              examples: {}
      operationId: get-consumer-users-list
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          required: true
        - schema:
            type: number
          in: query
          name: skip
          required: true
        - schema:
            type: number
          in: query
          name: afterTimestamp
        - schema:
            type: number
          in: query
          name: beforeTimestamp
          required: true
        - schema:
            type: string
          in: query
          name: filterId
        - schema:
            type: string
          in: query
          name: filterName
        - schema:
            $ref: '#/components/schemas/FilterOperator'
          in: query
          name: filterOperator
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/RiskLevel'
          in: query
          name: filterRiskLevel
    parameters: []
  /users:
    get:
      summary: All Users - List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllUsersListResponse'
              examples: {}
      operationId: get-all-users-list
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          required: true
        - schema:
            type: number
          in: query
          name: skip
          required: true
        - schema:
            type: number
          in: query
          name: afterTimestamp
        - schema:
            type: number
          in: query
          name: beforeTimestamp
          required: true
        - schema:
            type: string
          in: query
          name: filterId
        - schema:
            type: string
          in: query
          name: filterName
        - schema:
            $ref: '#/components/schemas/FilterOperator'
          in: query
          name: filterOperator
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/RiskLevel'
          in: query
          name: filterRiskLevel
        - schema:
            type: boolean
          in: query
          name: includeCasesCount
    parameters: []
  '/users/{userId}/comments':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    post:
      summary: Create a User Comment
      operationId: post-user-comments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
  '/users/{userId}/comments/{commentId}':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
      - schema:
          type: string
        name: commentId
        in: path
        required: true
    delete:
      summary: Delete a User Comment
      operationId: delete-users-userId-comments-commentId
      responses:
        '200':
          description: OK
  '/consumer/users/{userId}':
    get:
      summary: Consumer Users - Item - GET
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalConsumerUser'
              examples: {}
      operationId: get-consumer-users-item
      description: ''
      parameters: []
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    post:
      summary: Consumer Users - Item - POST
      operationId: post-consumer-users-userId
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
  '/consumer/users/{userId}/files':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    post:
      summary: Consumer User Files - Create
      operationId: post-consumer-users-userId-files
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileInfo'
  '/consumer/users/{userId}/files/{fileId}':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
      - schema:
          type: string
        name: fileId
        in: path
        required: true
    delete:
      summary: Consumer User Files - Delete
      operationId: delete-consumer-users-userId-files-fileId
      responses:
        '200':
          description: OK
  /business/users:
    get:
      summary: Business Users - List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessUsersListResponse'
              examples: {}
      operationId: get-business-users-list
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          required: true
        - schema:
            type: number
          in: query
          name: skip
          required: true
        - schema:
            type: number
          in: query
          name: afterTimestamp
        - schema:
            type: number
          in: query
          name: beforeTimestamp
          required: true
        - schema:
            type: string
          in: query
          name: filterId
        - schema:
            type: string
          in: query
          name: filterName
        - schema:
            $ref: '#/components/schemas/FilterOperator'
          in: query
          name: filterOperator
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterBusinessIndustries
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/RiskLevel'
          in: query
          name: filterRiskLevel
    parameters: []
  '/business/users/{userId}':
    get:
      summary: Business Users - Item - Get
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalBusinessUser'
              examples: {}
      operationId: get-business-users-item
      description: ''
      parameters: []
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    post:
      summary: Business Users - Item - POST
      operationId: post-business-users-userId
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
  '/business/users/{userId}/files':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    post:
      summary: Business User Files - Create
      operationId: post-business-users-userId-files
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileInfo'
  '/business/users/{userId}/files/{fileId}':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
      - schema:
          type: string
        name: fileId
        in: path
        required: true
    delete:
      summary: Business User Files - Delete
      operationId: delete-business-users-userId-files-fileId
      responses:
        '200':
          description: OK
  /business/users/uniques:
    get:
      summary: User - Unique values for different fields
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersUniquesResponse'
      operationId: get-users-uniques
  /dashboard_stats/transactions:
    get:
      summary: DashboardStats - Transactions
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardStatsTransactionsCount'
              examples: {}
      operationId: get-dashboard-stats-transactions
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: startTimestamp
        - schema:
            type: number
          in: query
          name: endTimestamp
        - schema:
            type: string
            enum:
              - HOUR
              - MONTH
              - DAY
          in: query
          name: granularity
    parameters: []
  /dashboard_stats/rule_hit:
    get:
      summary: DashboardStats - Rule hit
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardStatsRulesCount'
              examples: {}
      operationId: get-dashboard-stats-rule-hit
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: startTimestamp
        - schema:
            type: number
          in: query
          name: endTimestamp
    parameters: []
  /dashboard_stats/drs-distribution:
    get:
      summary: DashboardStats - DRS Distribution
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardStatsDRSDistribution'
              examples: {}
      operationId: get-dashboard-stats-drs-distribution
      description: ''
      parameters: []
    parameters: []
  /dashboard_stats/hits_per_user:
    get:
      summary: DashboardStats - Hits per user
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardStatsHitsPerUser'
              examples: {}
      operationId: get-dashboard-stats-hits-per-user
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: startTimestamp
        - schema:
            type: number
          in: query
          name: endTimestamp
        - schema:
            type: string
            enum:
              - ORIGIN
              - DESTINATION
          in: query
          name: direction
  '/transactions/{transactionId}/comments':
    post:
      summary: Create a Transaction Comment
      operationId: post-transactions-comments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
    parameters:
      - schema:
          type: string
        name: transactionId
        in: path
        required: true
  '/transactions/{transactionId}/comments/{commentId}':
    parameters:
      - schema:
          type: string
        name: transactionId
        in: path
        required: true
      - schema:
          type: string
        name: commentId
        in: path
        required: true
    delete:
      summary: Delete a Transaction Comment
      operationId: delete-transactions-transactionId-comments-commentId
      responses:
        '200':
          description: OK
  /tenants:
    get:
      summary: Tenant - List
      operationId: get-tenants-list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tenant'
  /tenants/settings:
    get:
      summary: Tenant - Get Settings
      operationId: get-tenants-settings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantSettings'
    parameters: []
    post:
      summary: Tenant - POST Settings
      operationId: post-tenants-settings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantSettings'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantSettings'
  '/accounts/{accountId}/change_tenant':
    parameters:
      - schema:
          type: string
        name: accountId
        in: path
        required: true
    post:
      summary: Account - Change Tenant
      operationId: accounts-change-tenant
      requestBody:
        content:
          application/json:
            schema:
              type: object
              title: ChangeTenantPayload
              properties:
                newTenantId:
                  type: string
              required:
                - newTenantId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DrsScore'
        '403':
          description: Not enough privileges
  '/accounts/{accountId}':
    parameters:
      - schema:
          type: string
        name: accountId
        in: path
        required: true
    patch:
      summary: Account - Patch
      operationId: accounts-patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountPatchPayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '403':
          description: Not enough privileges
    delete:
      summary: Account - Delete
      operationId: accounts-delete
      responses:
        '200':
          description: OK
        '403':
          description: Not enough privileges
  /accounts:
    post:
      summary: Account - Invite
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountInvitePayload'
      operationId: accounts-invite
    get:
      summary: Account - List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
      operationId: get-accounts
  /pulse/risk-classification:
    get:
      summary: Risk classification - GET
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RiskClassificationScore'
              examples:
                example-1:
                  value:
                    - riskLevel: VERY_LOW
                      lowerBoundRiskScore: 0
                      upperBoundRiskScore: 25
      operationId: get-pulse-risk-classification
      description: ''
    post:
      summary: Risk classification - POST
      operationId: post-pulse-risk-classification
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RiskClassificationScore'
              examples:
                example-1:
                  value:
                    - riskLevel: VERY_LOW
                      lowerBoundRiskScore: 0
                      upperBoundRiskScore: 25
        '400':
          description: Bad Request
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RiskClassificationScore'
    parameters: []
  /pulse/risk-assignment:
    parameters: []
    post:
      summary: Risk Level - Manual Assignment
      operationId: pulse-manual-risk-assignment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              title: ManualRiskAssignmentPayload
              properties:
                riskLevel:
                  $ref: '#/components/schemas/RiskLevel'
                isUpdatable:
                  type: boolean
        description: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DrsScore'
        '403':
          description: Not enough privileges
      parameters:
        - schema:
            type: string
          in: query
          name: userId
          required: true
          description: UserID of the user whose risk is being manually assigned
    get:
      summary: Risk Level - Get Manual Assignment
      operationId: get-pulse-risk-assignment
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DrsScore'
        '403':
          description: Not enough privileges
      parameters:
        - schema:
            type: string
          in: query
          name: userId
          required: true
          description: UserID of the user to get manual risk assignment settings
  /pulse/krs-value:
    parameters: []
    get:
      summary: KYC Risk Value
      operationId: get-krs-value
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KrsScore'
        '403':
          description: Not enough privileges
      parameters:
        - schema:
            type: string
          in: query
          name: userId
          required: true
          description: UserID of the user to get KYC Risk Score
  /pulse/ars-value:
    parameters: []
    get:
      summary: Action Risk Value
      operationId: get-ars-value
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArsScore'
        '403':
          description: Not enough privileges
      parameters:
        - schema:
            type: string
          in: query
          name: transactionId
          required: true
          description: transactionId of the transaction to get Action Risk Score
  /pulse/drs-value:
    parameters: []
    get:
      summary: Dynamic Risk Value
      operationId: get-drs-value
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DrsScore'
        '403':
          description: Not enough privileges
      parameters:
        - schema:
            type: string
          in: query
          name: userId
          required: true
          description: UserID of the user to get Dynamic Risk Score
  /auditlog:
    parameters: []
    get:
      summary: AuditLog
      operationId: get-auditlog
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogListResponse'
        '403':
          description: Not enough privileges
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          required: true
        - schema:
            type: number
          in: query
          name: skip
          required: true
        - schema:
            type: number
          in: query
          name: beforeTimestamp
        - schema:
            type: number
          in: query
          name: afterTimestamp
        - schema:
            type: string
          in: query
          name: sortField
        - schema:
            type: string
          in: query
          name: sortOrder
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/AuditLogType'
          in: query
          name: filterTypes
        - schema:
            type: string
          in: query
          name: filterActionTakenBy
      description: ''
  /pulse/risk-parameter:
    parameters: []
    post:
      summary: Parameter Risk Level - POST
      operationId: post-pulse-risk-parameter
      requestBody:
        content:
          application/json:
            schema:
              type: object
              title: PostPulseRiskParameters
              properties:
                parameterAttributeRiskValues:
                  $ref: '#/components/schemas/ParameterAttributeRiskValues'
              required:
                - parameterAttributeRiskValues
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParameterAttributeRiskValues'
        '403':
          description: Not enough privileges
      parameters: []
      description
    get:
      summary: Parameter Risk Level - GET
      operationId: get-pulse-risk-parameter
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParameterAttributeRiskValues'
      parameters:
        - schema:
            type: string
          in: query
          name: parameter
          description: Parameter you want to filter on
        - schema:
            $ref: '#/components/schemas/RiskEntityType'
          in: query
          name: entityType
          description: Entity type you want to filter on
  /slack/oauth_redirect:
    get:
      summary: Slack OAuth Redirect
      tags: []
      responses:
        '200':
          description: OK
      operationId: get-slack-oauth-redirect
    parameters: []
  /webhooks:
    post:
      summary: Create a new webhook
      operationId: post-webhooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookConfiguration'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookConfiguration'
    get:
      summary: Get all webhooks
      operationId: get-webhooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookConfiguration'
  '/webhooks/{webhookId}':
    post:
      summary: Update a webhook
      operationId: post-webhooks-webhookid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookConfiguration'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookConfiguration'
    parameters:
      - schema:
          type: string
        name: webhookId
        in: path
        required: true
    delete:
      summary: Delete a webhook
      operationId: delete-webhooks-webhookId
      responses:
        '200':
          description: OK
  '/webhooks/{webhookId}/secret':
    parameters:
      - schema:
          type: string
        name: webhookId
        in: path
        required: true
    get:
      summary: Get secret of a webhook
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookSecrets'
      operationId: get-webhooks-webhookId-secret
  '/webhooks/{webhookId}/deliveries':
    parameters:
      - schema:
          type: string
        name: webhookId
        in: path
        required: true
    get:
      summary: Get webhook deliveries
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookDeliveryAttempt'
      operationId: get-webhooks-webhook_id-deliveries
      parameters:
        - schema:
            type: number
          in: query
          name: limit
  /cases:
    get:
      summary: Cases - List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CasesListResponse'
              examples: {}
      operationId: get-case-list
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          required: true
        - schema:
            type: number
          in: query
          name: skip
          required: true
        - schema:
            type: number
          in: query
          name: afterTimestamp
        - schema:
            type: number
          in: query
          name: beforeTimestamp
        - schema:
            type: number
          in: query
          name: afterTransactionTimestamp
        - schema:
            type: number
          in: query
          name: beforeTransactionTimestamp
        - schema:
            type: string
          in: query
          name: filterId
        - schema:
            $ref: '#/components/schemas/RuleAction'
          in: query
          name: filterOutStatus
        - schema:
            $ref: '#/components/schemas/CaseStatus'
          in: query
          name: filterOutCaseStatus
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterRulesExecuted
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterRulesHit
        - schema:
            type: string
          in: query
          name: transactionType
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterOriginCurrencies
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterDestinationCurrencies
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterBusinessIndustries
        - schema:
            type: string
          in: query
          name: sortField
        - schema:
            type: string
          in: query
          name: sortOrder
        - schema:
            type: string
          in: query
          name: filterUserId
        - schema:
            type: string
          in: query
          name: filterOriginUserId
        - schema:
            type: string
          in: query
          name: filterDestinationUserId
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/RuleAction'
          in: query
          name: filterStatus
        - schema:
            $ref: '#/components/schemas/CaseStatus'
          in: query
          name: filterCaseStatus
        - schema:
            type: string
          in: query
          name: filterOriginPaymentMethod
        - schema:
            type: string
          in: query
          name: filterDestinationPaymentMethod
        - schema:
            type: array
            items:
              $ref: ../public/openapi-public-original.yaml#/components/schemas/TransactionState
          in: query
          name: filterTransactionState
        - schema:
            $ref: '#/components/schemas/CaseType'
          in: query
          name: filterCaseType
        - schema:
            $ref: '#/components/schemas/CasePriority'
          in: query
          name: filterPriority
        - schema:
            type: string
          in: query
          name: filterTransactionTagKey
        - schema:
            type: string
          in: query
          name: filterTransactionTagValue
        - schema:
            type: boolean
          in: query
          name: includeTransactions
        - schema:
            type: boolean
          in: query
          name: includeTransactionUsers
        - schema:
            type: boolean
          in: query
          name: includeTransactionEvents
        - schema:
            type: string
          in: query
          name: filterTransactionId
        - schema:
            type: number
          in: query
          name: filterTransactionAmoutAbove
        - schema:
            type: number
          in: query
          name: filterTransactionAmoutBelow
        - schema:
            type: string
          in: query
          name: filterOriginCountry
        - schema:
            type: string
          in: query
          name: filterDestinationCountry
        - schema:
            type: array
            items:
              $ref: ../public/openapi-public-original.yaml#/components/schemas/KYCStatus
          in: query
          name: filterUserKYCStatus
        - schema:
            type: array
            items:
              $ref: ../public/openapi-public-original.yaml#/components/schemas/UserState
          in: query
          name: filterUserState
        - schema:
            type: array
            items:
              $ref: ../public/openapi-public-original.yaml#/components/schemas/RiskLevel
          in: query
          name: filterRiskLevel
    post:
      summary: Cases - Update
      operationId: post-cases
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CasesUpdateRequest'
  '/cases/{caseId}':
    parameters:
      - schema:
          type: string
        name: caseId
        in: path
        required: true
    get:
      summary: Create a Case Comment
      operationId: get-case
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Case'
        '404':
          description: Not found
  '/cases/{caseId}/transactions':
    parameters:
      - schema:
          type: string
        name: caseId
        in: path
        required: true
      - schema:
          type: number
        in: query
        name: limit
        required: true
      - schema:
          type: number
        in: query
        name: skip
        required: true
      - schema:
          type: boolean
        in: query
        name: includeUsers
    get:
      summary: Get transactions related to case
      operationId: get-case-transactions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseTransactionsListResponse'
        '404':
          description: Not found
  '/cases/{caseId}/comments':
    parameters:
      - schema:
          type: string
        name: caseId
        in: path
        required: true
    post:
      summary: Create a Case Comment
      operationId: post-case-comments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
  '/cases/{caseId}/comments/{commentId}':
    parameters:
      - schema:
          type: string
        name: caseId
        in: path
        required: true
      - schema:
          type: string
        name: commentId
        in: path
        required: true
    delete:
      summary: Delete a Case Comment
      operationId: delete-cases-caseId-comments-commentId
      responses:
        '200':
          description: OK
  /sanctions/search:
    post:
      summary: Search Sanctions
      operationId: post-sanctions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SanctionsSearchResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SanctionsSearchRequest'
    get:
      summary: Get all search history
      operationId: get-sanctions-search
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SanctionsSearchHistory'
      parameters:
        - schema:
            type: number
          in: query
          name: limit
        - schema:
            type: number
          in: query
          name: skip
  '/sanctions/search/{searchId}':
    get:
      summary: Get single search history
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SanctionsSearchHistory'
      parameters:
        - schema:
            type: string
          name: searchId
          in: path
          required: true
      operationId: get-sanctions-search-$-searchId
components:
  schemas:
    KrsScore:
      title: KrsScore
      type: object
      description: ''
      properties:
        createdAt:
          type: number
        krsScore:
          type: number
        userId:
          type: string
        riskLevel:
          $ref: '#/components/schemas/RiskLevel'
      required:
        - createdAt
        - krsScore
    ArsScore:
      title: ArsScore
      type: object
      description: ''
      properties:
        createdAt:
          type: number
        arsScore:
          type: number
        originUserId:
          type: string
        destinationUserId:
          type: string
        transactionId:
          type: string
        riskLevel:
          $ref: '#/components/schemas/RiskLevel'
      required:
        - createdAt
        - arsScore
    DrsScore:
      title: DrsScore
      type: object
      description: ''
      properties:
        createdAt:
          type: number
        drsScore:
          type: number
        userId:
          type: string
        transactionId:
          type: string
        derivedRiskLevel:
          $ref: '#/components/schemas/RiskLevel'
        manualRiskLevel:
          $ref: '#/components/schemas/RiskLevel'
        isUpdatable:
          type: boolean
      required:
        - createdAt
        - drsScore
        - isUpdatable
    Rule:
      title: Rule
      type: object
      x-examples:
        example-1:
          id: R-1
          name: Rule name
          description: Rule description
          defaultParameters:
            threshold: 3
          defaultAction: FLAG
          ruleImplementationName: code-filename
          createdAt: 0
          updatedAt: 0
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - TRANSACTION
            - USER
        name:
          type: string
        description:
          type: string
        parametersSchema:
          type: object
        defaultParameters:
          type: object
        defaultAction:
          $ref: '#/components/schemas/RuleAction'
        ruleImplementationName:
          type: string
        labels:
          type: array
          items:
            type: string
        defaultCasePriority:
          $ref: '#/components/schemas/CasePriority'
        defaultCaseCreationType:
          $ref: '#/components/schemas/CaseType'
        descriptionTemplate:
          type: string
        defaultRiskLevelParameters:
          $ref: '#/components/schemas/RiskLevelRuleParameters'
        defaultRiskLevelActions:
          $ref: '#/components/schemas/RiskLevelRuleActions'
        defaultFilters:
          type: object
        createdAt:
          type: number
        updatedAt:
          type: number
        tenantIds:
          type: array
          items:
            type: string
        defaultFalsePositiveCheckEnabled:
          type: boolean
      required:
        - id
        - type
        - name
        - description
        - parametersSchema
        - defaultParameters
        - defaultAction
        - ruleImplementationName
        - labels
        - defaultCasePriority
        - defaultCaseCreationType
    RuleInstance:
      title: RuleInstance
      type: object
      properties:
        id:
          type: string
        ruleId:
          type: string
        casePriority:
          $ref: '#/components/schemas/CasePriority'
        parameters:
          type: object
        action:
          $ref: '#/components/schemas/RuleAction'
        caseCreationType:
          $ref: '#/components/schemas/CaseType'
        type:
          type: string
          enum:
            - TRANSACTION
            - USER
        ruleNameAlias:
          type: string
        filters:
          type: object
        riskLevelParameters:
          $ref: '#/components/schemas/RiskLevelRuleParameters'
        riskLevelActions:
          $ref: '#/components/schemas/RiskLevelRuleActions'
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        createdAt:
          type: number
        updatedAt:
          type: number
        runCount:
          type: number
        hitCount:
          type: number
        falsePositiveCheckEnabled:
          type: boolean
      required:
        - ruleId
        - casePriority
        - parameters
        - action
        - caseCreationType
    RuleAction:
      type: string
      title: RuleAction
      enum:
        - FLAG
        - BLOCK
        - ALLOW
        - SUSPEND
    RuleActionAlias:
      type: object
      title: RuleActionAlias
      properties:
        action:
          $ref: '#/components/schemas/RuleAction'
        alias:
          type: string
      required:
        - action
        - alias
    TransactionStateAlias:
      type: object
      title: TransactionStateAlias
      properties:
        state:
          $ref: '#/components/schemas/TransactionState'
        alias:
          type: string
      required:
        - state
        - alias
    RiskLevelAlias:
      type: object
      title: RiskLevelAlias
      properties:
        level:
          $ref: '#/components/schemas/RiskLevel'
        alias:
          type: string
      required:
        - level
        - alias
    CaseType:
      type: string
      title: CaseType
      enum:
        - USER
        - TRANSACTION
    CasePriority:
      type: string
      title: CasePriority
      enum:
        - P1
        - P2
        - P3
        - P4
    ImportRequest:
      title: ImportRequest
      type: object
      properties:
        type:
          type: string
          enum:
            - TRANSACTION
            - USER
            - BUSINESS
        format:
          type: string
          enum:
            - flagright
            - custom
        s3Key:
          type: string
        filename:
          type: string
      required:
        - type
        - format
        - s3Key
        - filename
    PresignedUrlResponse:
      title: PresignedUrlResponse
      type: object
      properties:
        presignedUrl:
          type: string
        s3Key:
          type: string
      required:
        - presignedUrl
        - s3Key
    ListImportRequest:
      title: ListImportRequest
      type: object
      properties:
        listName:
          type: string
        indexName:
          type: string
        data:
          type: string
      required:
        - listName
        - indexName
        - data
    ImportResponse:
      title: ImportResponse
      type: object
      properties:
        importedCount:
          type: number
      required:
        - importedCount
    TransactionsListResponse:
      title: TransactionsListResponse
      type: object
      description: ''
      x-examples: {}
      properties:
        total:
          type: number
        data:
          type: array
          items:
            $ref: '#/components/schemas/TransactionCaseManagement'
      required:
        - total
        - data
    TransactionsStatsByTypesResponse:
      title: TransactionsStatsByTypesResponse
      type: object
      description: ''
      x-examples: {}
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              transactionType:
                $ref: ../public/openapi-public-original.yaml#/components/schemas/TransactionType
              count:
                type: number
              sum:
                type: number
                nullable: true
              average:
                type: number
                nullable: true
              min:
                type: number
                nullable: true
              max:
                type: number
                nullable: true
              median:
                type: number
                nullable: true
            required:
              - count
      required:
        - data
    TransactionsStatsByTimeResponse:
      title: TransactionsStatsByTypesResponse
      type: object
      description: ''
      x-examples: {}
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              series:
                type: string
              label:
                type: string
              values:
                type: object
                additionalProperties:
                  type: object
                  properties:
                    count:
                      type: number
                    amount:
                      type: number
                  required:
                    - count
                    - amount
            required:
              - series
              - label
              - values
      required:
        - data
    TransactionCaseManagement:
      allOf:
        - $ref: ../public/openapi-public-original.yaml#/components/schemas/TransactionWithRulesResult
        - type: object
          additionalProperties: false
          properties:
            comments:
              type: array
              items:
                $ref: '#/components/schemas/Comment'
            assignments:
              type: array
              items:
                $ref: '#/components/schemas/Assignment'
            status:
              $ref: '#/components/schemas/RuleAction'
            statusChanges:
              type: array
              items:
                $ref: '#/components/schemas/TransactionStatusChange'
            originUser:
              oneOf:
                - $ref: '#/components/schemas/InternalConsumerUser'
                - $ref: '#/components/schemas/InternalBusinessUser'
            destinationUser:
              oneOf:
                - $ref: '#/components/schemas/InternalConsumerUser'
                - $ref: '#/components/schemas/InternalBusinessUser'
            events:
              type: array
              items:
                $ref: ../public/openapi-public-original.yaml#/components/schemas/TransactionEvent
            caseStatus:
              $ref: '#/components/schemas/CaseStatus'
          required:
            - status
      title: TransactionCaseManagement
    ConsumerUsersListResponse:
      title: ConsumerUsersListResponse
      type: object
      properties:
        total:
          type: number
        data:
          type: array
          items:
            $ref: '#/components/schemas/InternalConsumerUser'
      required:
        - total
        - data
    BusinessUsersListResponse:
      title: BusinessUsersListResponse
      type: object
      properties:
        total:
          type: number
        data:
          type: array
          items:
            $ref: '#/components/schemas/InternalBusinessUser'
      required:
        - total
        - data
    AllUsersListResponse:
      title: AllUsersListResponse
      type: object
      properties:
        total:
          type: number
        data:
          type: array
          items:
            $ref: '#/components/schemas/InternalUser'
      required:
        - total
        - data
    DashboardStatsTransactionsCount:
      type: object
      x-examples:
        example-1:
          data:
            - _id: 2020-01-04
              totalTransactions: 2344
              flaggedTransactions: 121
              stoppedTransactions: 33
      title: DashboardStatsTransactionsCount
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              totalTransactions:
                type: number
              flaggedTransactions:
                type: number
              stoppedTransactions:
                type: number
              suspendedTransactions:
                type: number
            required:
              - _id
      required:
        - data
    DashboardStatsRulesCount:
      type: object
      x-examples: {}
      title: DashboardStatsRulesCount
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              ruleId:
                type: string
              ruleInstanceId:
                type: string
              hitCount:
                type: number
              transactionCasesCount:
                type: number
              userCasesCount:
                type: number
              openTransactionCasesCount:
                type: number
              openUserCasesCount:
                type: number
            required:
              - ruleId
              - hitCount
      required:
        - data
    DashboardStatsDRSDistribution:
      type: object
      x-examples: {}
      title: DashboardStatsDRSDistribution
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              riskLevel:
                $ref: '#/components/schemas/RiskLevel'
              percentage:
                type: string
              count:
                type: number
              riskScoreRange:
                type: string
            required:
              - riskLevel
              - count
        total:
          type: number
      required:
        - data
    CaseTransaction:
      allOf:
        - $ref: ../public/openapi-public-original.yaml#/components/schemas/TransactionWithRulesResult
        - type: object
          additionalProperties: false
          properties:
            originUser:
              oneOf:
                - $ref: '#/components/schemas/InternalConsumerUser'
                - $ref: '#/components/schemas/InternalBusinessUser'
            destinationUser:
              oneOf:
                - $ref: '#/components/schemas/InternalConsumerUser'
                - $ref: '#/components/schemas/InternalBusinessUser'
            events:
              type: array
              items:
                $ref: ../public/openapi-public-original.yaml#/components/schemas/TransactionEvent
    InternalConsumerUser:
      allOf:
        - $ref: ../public/openapi-public-original.yaml#/components/schemas/User
        - type: object
          properties:
            type:
              enum:
                - CONSUMER
              type: string
            comments:
              type: array
              items:
                $ref: '#/components/schemas/Comment'
            drsScore:
              $ref: '#/components/schemas/DrsScore'
            casesCount:
              type: number
          required:
            - type
    InternalBusinessUser:
      allOf:
        - $ref: ../public/openapi-public-original.yaml#/components/schemas/Business
        - type: object
          properties:
            type:
              enum:
                - BUSINESS
              type: string
            comments:
              type: array
              items:
                $ref: '#/components/schemas/Comment'
            drsScore:
              $ref: '#/components/schemas/DrsScore'
            casesCount:
              type: number
          required:
            - type
    InternalUser:
      title: InternalUser
      oneOf:
        - $ref: '#/components/schemas/InternalConsumerUser'
        - $ref: '#/components/schemas/InternalBusinessUser'
    DashboardStatsHitsPerUser:
      type: object
      title: DashboardStatsHitsPerUser
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              userId:
                type: string
              transactionsHit:
                type: number
              user:
                oneOf:
                  - $ref: '#/components/schemas/InternalConsumerUser'
                  - $ref: '#/components/schemas/InternalBusinessUser'
              rulesHit:
                type: number
              transactionCasesCount:
                type: number
              userCasesCount:
                type: number
              openTransactionCasesCount:
                type: number
              openUserCasesCount:
                type: number
              percentageTransactionsHit:
                type: number
            required:
              - originUserId
              - transactionsHit
              - percentageTransactionsHit
      required:
        - data
    Comment:
      title: Comment
      type: object
      properties:
        id:
          type: string
        body:
          type: string
        userId:
          type: string
        files:
          type: array
          items:
            $ref: '#/components/schemas/FileInfo'
        createdAt:
          type: number
        updatedAt:
          type: number
      required:
        - body
    FileInfo:
      title: FileInfo
      type: object
      properties:
        s3Key:
          type: string
        bucket:
          type: string
        filename:
          type: string
        size:
          type: number
        downloadLink:
          type: string
      required:
        - s3Key
        - filename
        - size
    Assignment:
      title: Assignment
      type: object
      properties:
        assigneeUserId:
          type: string
        assignedByUserId:
          type: string
        timestamp:
          type: number
      required:
        - assigneeUserId
        - assignedByUserId
        - timestamp
    TransactionStatusChange:
      title: TransactionStatusChange
      type: object
      properties:
        userId:
          type: string
        status:
          $ref: '#/components/schemas/RuleAction'
        reason:
          type: array
          items:
            $ref: '#/components/schemas/CaseClosingReasons'
        timestamp:
          type: number
        caseStatus:
          $ref: '#/components/schemas/CaseStatus'
        otherReason:
          type: string
      required:
        - userId
        - timestamp
    TransactionUpdateRequest:
      title: TransactionUpdateRequest
      type: object
      properties:
        status:
          $ref: '#/components/schemas/RuleAction'
        assignments:
          type: array
          items:
            $ref: '#/components/schemas/Assignment'
        reason:
          type: array
          items:
            $ref: '#/components/schemas/CaseClosingReasons'
        caseStatus:
          $ref: '#/components/schemas/CaseStatus'
        otherReason:
          type: string
    TransactionsUpdateRequest:
      title: TransactionsUpdateRequest
      type: object
      properties:
        transactionIds:
          type: array
          items:
            type: string
        transactionUpdates:
          $ref: '#/components/schemas/TransactionUpdateRequest'
      required:
        - transactionIds
        - transactionUpdates
    UserUpdateRequest:
      title: UserUpdateRequest
      type: object
      properties:
        userStateDetails:
          $ref: ../public/openapi-public-original.yaml#/components/schemas/UserStateDetails
        kycStatusDetails:
          $ref: ../public/openapi-public-original.yaml#/components/schemas/KYCStatusDetails
        transactionLimits:
          $ref: ../public/openapi-public-original.yaml#/components/schemas/TransactionLimits
    FileImport:
      title: FileImport
      type: object
      properties:
        _id:
          type: string
        type:
          type: string
          enum:
            - TRANSACTION
            - USER
            - BUSINESS
        s3Key:
          type: string
        filename:
          type: string
        importedRecords:
          type: number
        error:
          type: string
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/FileImportStatusChange'
      required:
        - _id
        - type
        - s3Key
        - filename
        - statuses
    FileImportStatusChange:
      type: object
      title: FileImportStatusChange
      enum:
        - IN_PROGRESS
        - PENDING
        - FAILED
        - SUCCESS
      properties:
        status:
          type: string
          enum:
            - IN_PROGRESS
            - PENDING
            - SUCCESS
            - FAILED
        timestamp:
          type: number
      required:
        - status
        - timestamp
    Account:
      title: Account
      type: object
      properties:
        id:
          type: string
        role:
          $ref: '#/components/schemas/AccountRole'
        email:
          type: string
        emailVerified:
          type: boolean
        name:
          type: string
        picture:
          type: string
      required:
        - id
        - role
        - email
        - emailVerified
        - name
    AccountInvitePayload:
      title: AccountInvitePayload
      type: object
      properties:
        email:
          type: string
        role:
          $ref: '#/components/schemas/AccountRole'
      required:
        - email
    AccountPatchPayload:
      title: AccountPatchPayload
      type: object
      properties:
        role:
          $ref: '#/components/schemas/AccountRole'
    Tenant:
      title: Tenant
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
        - name
    TenantSettings:
      title: TenantSettings
      type: object
      properties:
        features:
          type: array
          items:
            $ref: '#/components/schemas/Feature'
        ruleActionAliases:
          type: array
          items:
            $ref: '#/components/schemas/RuleActionAlias'
        transactionStateAlias:
          type: array
          items:
            $ref: '#/components/schemas/TransactionStateAlias'
        riskLevelAlias:
          type: array
          items:
            $ref: '#/components/schemas/RiskLevelAlias'
    RiskClassificationScore:
      description: ''
      title: RiskClassificationScore
      type: object
      properties:
        riskLevel:
          $ref: '#/components/schemas/RiskLevel'
        lowerBoundRiskScore:
          type: number
          minimum: 0
          maximum: 100
          exclusiveMinimum: false
          exclusiveMaximum: false
        upperBoundRiskScore:
          type: number
          exclusiveMinimum: false
          exclusiveMaximum: false
          minimum: 0
          maximum: 100
      required:
        - riskLevel
        - lowerBoundRiskScore
        - upperBoundRiskScore
    RiskLevelRuleParameters:
      title: RiskLevelRuleParameters
      x-stoplight:
        id: xpbk3cprby4j6
      type: object
      properties:
        VERY_HIGH:
          type: object
        HIGH:
          type: object
        MEDIUM:
          type: object
        LOW:
          type: object
        VERY_LOW:
          type: object
      required:
        - VERY_HIGH
        - HIGH
        - MEDIUM
        - LOW
        - VERY_LOW
    RiskLevel:
      type: string
      title: RiskLevel
      x-stoplight:
        id: lrybcomxmbf4h
      enum:
        - VERY_HIGH
        - HIGH
        - MEDIUM
        - LOW
        - VERY_LOW
    RiskClassificationConfig:
      type: object
      title: RiskClassificationConfig
      x-stoplight:
        id: lrybcomxmbf4h
      enum:
        - VERY_HIGH
        - HIGH
        - MEDIUM
        - LOW
        - VERY_LOW
      properties:
        createdAt:
          type: number
        updatedAt:
          type: number
        classificationValues:
          type: array
          items:
            $ref: '#/components/schemas/RiskClassificationScore'
    RiskLevelRuleActions:
      title: RiskLevelRuleActions
      x-stoplight:
        id: 9sj5fz98k6tlb
      type: object
      properties:
        VERY_HIGH:
          $ref: '#/components/schemas/RuleAction'
        HIGH:
          $ref: '#/components/schemas/RuleAction'
        MEDIUM:
          $ref: '#/components/schemas/RuleAction'
        LOW:
          $ref: '#/components/schemas/RuleAction'
        VERY_LOW:
          $ref: '#/components/schemas/RuleAction'
      required:
        - VERY_HIGH
        - HIGH
        - MEDIUM
        - LOW
        - VERY_LOW
    RiskParameterLevelKeyValue:
      type: object
      x-examples: {}
      title: RiskParameterLevelKeyValue
      properties:
        parameterValue:
          $ref: '#/components/schemas/RiskParameterValue'
        riskLevel:
          $ref: '#/components/schemas/RiskLevel'
      required:
        - parameterValue
        - riskLevel
    RiskParameterValue:
      type: object
      properties:
        content:
          oneOf:
            - $ref: '#/components/schemas/RiskParameterValueLiteral'
            - $ref: '#/components/schemas/RiskParameterValueRange'
            - $ref: '#/components/schemas/RiskParameterValueMultiple'
            - $ref: '#/components/schemas/RiskParameterValueTimeRange'
      required:
        - content
    RiskParameterValueLiteral:
      title: RiskParameterValueLiteral
      properties:
        kind:
          type: string
          enum:
            - LITERAL
        content:
          oneOf:
            - type: string
            - type: number
            - type: boolean
      required:
        - kind
        - content
    RiskParameterValueRange:
      title: RiskParameterValueRange
      properties:
        kind:
          type: string
          enum:
            - RANGE
        start:
          type: number
        end:
          type: number
      required:
        - kind
    RiskParameterValueMultiple:
      title: RiskParameterValueMultiple
      properties:
        kind:
          type: string
          enum:
            - MULTIPLE
        values:
          type: array
          items:
            $ref: '#/components/schemas/RiskParameterValueLiteral'
      required:
        - kind
        - values
    RiskParameterValueTimeRange:
      title: RiskParameterValueTimeRange
      properties:
        kind:
          type: string
          enum:
            - TIME_RANGE
        startHour:
          type: number
        endHour:
          type: number
        timezone:
          type: string
      required:
        - kind
        - startHour
        - endHour
        - timezone
    ParameterAttributeRiskValues:
      title: ParameterAttributeRiskValues
      type: object
      x-examples:
        example-1:
          parameter: userDetails.countryOfResidence
          riskEntityType: CONSUMER_USER
          riskLevelAssignmentValues:
            DE: LOW
            TR: HIGH
      properties:
        parameter:
          type: string
          enum:
            - userDetails.countryOfResidence
            - userDetails.countryOfNationality
            - originPaymentDetails.method
            - destinationPaymentDetails.method
            - originAmountDetails.country
            - destinationAmountDetails.country
            - originAmountDetails.transactionCurrency
            - destinationAmountDetails.transactionCurrency
            - ipAddressCountry
            - type
            - legalEntity.companyRegistrationDetails.registrationCountry
            - shareHolders
            - directors
            - legalEntity.companyGeneralDetails.businessIndustry
            - userDetails.dateOfBirth
            - legalEntity.companyRegistrationDetails.dateOfRegistration
            - createdTimestamp
            - timestamp
            - domesticOrForeignOriginCountryConsumer
            - domesticOrForeignDestinationCountryConsumer
            - domesticOrForeignOriginCountryBusiness
            - domesticOrForeignDestinationCountryBusiness
        isActive:
          type: boolean
        isDerived:
          type: boolean
        riskEntityType:
          $ref: '#/components/schemas/RiskEntityType'
        riskLevelAssignmentValues:
          type: array
          items:
            $ref: '#/components/schemas/RiskParameterLevelKeyValue'
        parameterType:
          type: string
          enum:
            - ITERABLE
            - VARIABLE
        matchType:
          type: string
          enum:
            - DIRECT
            - ARRAY_MATCH
        targetIterableParameter:
          type: string
          enum:
            - generalDetails.countryOfNationality
        riskScoreType:
          type: string
          enum:
            - KRS
            - ARS
      required:
        - parameter
        - isActive
        - isDerived
        - riskEntityType
        - riskLevelAssignmentValues
    Feature:
      type: string
      title: Feature
      x-stoplight:
        id: xc9jmvdpmvtof
      enum:
        - PULSE
        - PULSE_KRS_CALCULATION
        - PULSE_ARS_CALCULATION
        - AUDIT_LOGS
        - SLACK_ALERTS
        - IMPORT_FILES
        - DASHBOARD_BLOCK_USER
        - LISTS
        - HELP_CENTER
        - GOOGLE_SSO
        - SANCTIONS
        - RULES_ENGINE_RULE_BASED_AGGREGATION
        - FALSE_POSITIVE_CHECK
      description: ''
    AccountRole:
      type: string
      title: AccountRole
      x-stoplight:
        id: byu0hqffp9hxz
      enum:
        - root
        - admin
        - user
    CaseStatus:
      type: string
      title: CaseStatus
      x-stoplight:
        id: kwammtv515uc3
      enum:
        - OPEN
        - CLOSED
        - REOPENED
    FilterOperator:
      type: string
      title: FilterOperator
      enum:
        - AND
        - OR
    WebhookConfiguration:
      title: WebhookConfiguration
      x-stoplight:
        id: f9ohatgtpmm2v
      type: object
      description: ''
      properties:
        _id:
          type: string
        createdAt:
          type: number
          minimum: 1262300400000
        webhookUrl:
          type: string
        events:
          type: array
          items:
            $ref: ../public/openapi-public-original.yaml#/components/schemas/WebhookEventType
        enabled:
          type: boolean
        secret:
          type: string
        expiringSecret:
          type: string
      required:
        - webhookUrl
        - events
        - enabled
    WebhookSecrets:
      title: WebhookSecrets
      x-stoplight:
        id: 0urp7qvcfbf2u
      type: object
      properties:
        secret:
          type: string
        expiringSecret:
          type: string
      required:
        - secret
    WebhookDeliveryAttempt:
      title: WebhookDeliveryAttempt
      x-stoplight:
        id: 24pu9dmforx4u
      type: object
      properties:
        _id:
          type: string
        deliveryTaskId:
          type: string
        webhookId:
          type: string
        webhookUrl:
          type: string
        requestStartedAt:
          type: number
        requestFinishedAt:
          type: number
        success:
          type: boolean
        event:
          $ref: ../public/openapi-public-original.yaml#/components/schemas/WebhookEventType
        eventCreatedAt:
          type: number
        request:
          type: object
        response:
          type: object
      required:
        - deliveryTaskId
        - webhookId
        - webhookUrl
        - requestStartedAt
        - requestFinishedAt
        - success
        - event
        - eventCreatedAt
        - request
    CaseClosingReasons:
      type: string
      title: CaseClosingReasons
      x-stoplight:
        id: 54xyfgwxvubyx
      enum:
        - Other
        - False positive
        - Documents collected
        - Transaction Rejected
        - Transaction Refunded
        - Suspicious activity reported (SAR)
        - Documents not collected
        - Investigation completed
        - Escalated
    MissingUser:
      title: MissingUser
      type: object
      properties:
        userId:
          type: string
    Case:
      title: Case
      type: object
      properties:
        _id:
          type: integer
        caseId:
          type: string
        createdTimestamp:
          type: number
        latestTransactionArrivalTimestamp:
          type: number
        caseType:
          $ref: '#/components/schemas/CaseType'
        caseStatus:
          $ref: '#/components/schemas/CaseStatus'
        caseTransactions:
          type: array
          items:
            $ref: '#/components/schemas/CaseTransaction'
        caseTransactionsIds:
          type: array
          items:
            type: string
        caseUsers:
          type: object
          properties:
            origin:
              oneOf:
                - $ref: '#/components/schemas/InternalConsumerUser'
                - $ref: '#/components/schemas/InternalBusinessUser'
                - $ref: '#/components/schemas/MissingUser'
            destination:
              oneOf:
                - $ref: '#/components/schemas/InternalConsumerUser'
                - $ref: '#/components/schemas/InternalBusinessUser'
                - $ref: '#/components/schemas/MissingUser'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        assignments:
          type: array
          items:
            $ref: '#/components/schemas/Assignment'
        statusChanges:
          type: array
          items:
            $ref: '#/components/schemas/CaseStatusChange'
        priority:
          $ref: '#/components/schemas/CasePriority'
        relatedCases:
          type: array
          items:
            type: string
        falsePositiveDetails:
          $ref: ../public/openapi-public-original.yaml#/components/schemas/FalsePositiveDetails
    CasesListResponse:
      title: CasesListResponse
      type: object
      description: ''
      x-examples: {}
      properties:
        total:
          type: number
        data:
          type: array
          items:
            $ref: '#/components/schemas/Case'
      required:
        - total
        - data
    AuditLogListResponse:
      title: AuditLogListResponse
      type: object
      description: ''
      x-examples: {}
      properties:
        total:
          type: number
        data:
          type: array
          items:
            $ref: '#/components/schemas/AuditLog'
      required:
        - total
        - data
    CaseTransactionsListResponse:
      title: CasesListResponse
      type: object
      description: ''
      x-examples: {}
      properties:
        total:
          type: number
        data:
          type: array
          items:
            $ref: '#/components/schemas/CaseTransaction'
      required:
        - total
        - data
    CaseUpdateRequest:
      title: CaseUpdateRequest
      type: object
      properties:
        assignments:
          type: array
          items:
            $ref: '#/components/schemas/Assignment'
        reason:
          type: array
          items:
            $ref: '#/components/schemas/CaseClosingReasons'
        caseStatus:
          $ref: '#/components/schemas/CaseStatus'
        priority:
          $ref: '#/components/schemas/CasePriority'
        otherReason:
          type: string
        files:
          type: array
          items:
            $ref: '#/components/schemas/FileInfo'
    CasesUpdateRequest:
      title: CasesUpdateRequest
      type: object
      properties:
        caseIds:
          type: array
          items:
            type: string
        updates:
          $ref: '#/components/schemas/CaseUpdateRequest'
      required:
        - caseIds
        - updates
    CaseStatusChange:
      title: CaseStatusChange
      type: object
      properties:
        userId:
          type: string
        reason:
          type: array
          items:
            $ref: '#/components/schemas/CaseClosingReasons'
        timestamp:
          type: number
        caseStatus:
          $ref: '#/components/schemas/CaseStatus'
        otherReason:
          type: string
      required:
        - userId
        - timestamp
    EntityCounter:
      title: EntityCounter
      type: object
      properties:
        _id:
          type: string
        entity:
          type: string
        count:
          type: number
    SanctionsSearchRequest:
      title: SanctionsSearchRequest
      x-stoplight:
        id: ldj2zpwhzk8s5
      type: object
      properties:
        _id:
          type: string
        searchTerm:
          type: string
        fuzziness:
          type: number
        countryCodes:
          type: array
          items:
            type: string
        yearOfBirth:
          type: number
      required:
        - searchTerm
    SanctionsSearchResponse:
      title: SanctionsSearchResponse
      x-stoplight:
        id: ldj2zpwhzk8s5
      type: object
      properties:
        total:
          type: number
        data:
          type: array
          items:
            $ref: '#/components/schemas/ComplyAdvantageSearchHit'
        searchId:
          type: string
        rawComplyAdvantageResponse:
          $ref: '#/components/schemas/ComplyAdvantageSearchResponse'
      required:
        - total
        - data
        - searchId
    SanctionsSearchHistory:
      title: SanctionsSearchHistory
      x-stoplight:
        id: ldj2zpwhzk8s5
      type: object
      properties:
        request:
          $ref: '#/components/schemas/SanctionsSearchRequest'
        response:
          $ref: '#/components/schemas/SanctionsSearchResponse'
        createdAt:
          type: number
      required:
        - request
        - createdAt
    ComplyAdvantageSearchResponse:
      title: ComplyAdvantageSearchResponse
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
        content:
          type: object
          properties:
            data:
              type: object
              properties:
                id:
                  type: integer
                  format: int32
                ref:
                  type: string
                searcher_id:
                  type: integer
                  format: int32
                assignee_id:
                  type: integer
                  format: int32
                filters:
                  type: object
                  properties:
                    types:
                      type: array
                      items:
                        type: string
                    country_codes:
                      type: array
                      items: {}
                    birth_year:
                      type: integer
                      format: int32
                    entity_type:
                      type: string
                    remove_deceased:
                      type: integer
                      format: int32
                    exact_match:
                      type: boolean
                    fuzziness:
                      type: number
                match_status:
                  type: string
                risk_level:
                  type: string
                search_term:
                  type: string
                submitted_term:
                  type: string
                client_ref:
                  type: string
                total_hits:
                  type: integer
                  format: int32
                updated_at:
                  type: string
                created_at:
                  type: string
                tags:
                  type: array
                  items: {}
                labels:
                  type: array
                  items: {}
                total_matches:
                  type: integer
                  format: int32
                limit:
                  type: integer
                  format: int32
                offset:
                  type: integer
                  format: int32
                share_url:
                  type: string
                searcher:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int32
                    email:
                      type: string
                    name:
                      type: string
                    phone:
                      type: string
                    created_at:
                      type: string
                    user_is_active:
                      type: boolean
                assignee:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int32
                    email:
                      type: string
                    name:
                      type: string
                    phone:
                      type: string
                    created_at:
                      type: string
                    user_is_active:
                      type: boolean
                hits:
                  type: array
                  items:
                    $ref: '#/components/schemas/ComplyAdvantageSearchHit'
    ComplyAdvantageSearchHit:
      type: object
      properties:
        doc:
          type: object
          properties:
            aka:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
            entity_type:
              type: string
            fields:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  source:
                    type: string
                  value:
                    type: string
            id:
              type: string
            keywords:
              type: array
              items:
                type: string
            last_updated_utc:
              type: string
              format: date-time
            media:
              type: array
              items:
                type: object
                properties:
                  snippet:
                    type: string
                  title:
                    type: string
                  url:
                    type: string
            name:
              type: string
            source_notes:
              type: object
            sources:
              type: array
              items:
                type: string
            types:
              type: array
              items:
                type: string
        match_types:
          type: array
          items:
            type: string
        match_types_details:
          type: array
          items:
            type: object
            properties:
              aml_types:
                type: array
                items:
                  type: string
              matching_name:
                type: string
              name_matches:
                type: array
                items:
                  type: object
                  properties:
                    match_types:
                      type: array
                      items:
                        type: string
                    query_term:
                      type: string
              secondary_matches:
                type: array
                items:
                  type: object
                  properties:
                    match_types:
                      type: array
                      items:
                        type: string
                    query_term:
                      type: string
              sources:
                type: array
                items:
                  type: string
        score:
          type: number
    TransactionsUniquesResponse:
      type: object
      properties:
        transactionState:
          type: array
          items:
            $ref: ../public/openapi-public-original.yaml#/components/schemas/TransactionState
        tagsKey:
          type: array
          items:
            type: string
      required:
        - transactionState
        - tagsKey
    RiskEntityType:
      type: string
      title: Risk entity type
      enum:
        - CONSUMER_USER
        - TRANSACTION
        - BUSINESS
    UsersUniquesResponse:
      type: object
      properties:
        businessIndustry:
          type: array
          items:
            type: string
      required:
        - businessIndustry
    AuditLogType:
      title: AuditLogType
      type: string
      enum:
        - RULE
        - ACCOUNT
        - CASE
        - USER
        - PULSE
    AuditLog:
      title: AuditLog
      x-stoplight:
        id: 9g0tn4wlwv7rs
      type: object
      properties:
        auditlogId:
          type: string
        type:
          $ref: '#/components/schemas/AuditLogType'
        subtype:
          type: string
          enum:
            - COMMENT
            - DOCUMENT
            - RISK_CLASSIFICATION
            - DRS_RISK_LEVEL
            - PARAMETER_RISK_ITEM
        action:
          type: string
          enum:
            - CREATE
            - DELETE
            - DEACTIVATE
            - VIEW
            - DOWNLOAD
            - CALCULATE
            - UPDATE
        timestamp:
          type: number
        entityId:
          type: string
        oldImage:
          type: object
        newImage:
          type: object
        logMetadata:
          type: object
        user:
          $ref: '#/components/schemas/Account'
      required:
        - type
        - action
  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
  responses: {}
