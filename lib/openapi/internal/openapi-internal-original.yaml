openapi: 3.0.0
info:
  title: Tarpon Console API
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
paths:
  /apikey:
    parameters: []
    post:
      summary: Tarpon API Key - Create
      operationId: post-apikey
      responses:
        '200':
          description: New API Key
      parameters:
        - schema:
            type: string
          in: query
          name: tenantId
          description: Tenant ID
        - schema:
            type: string
          in: query
          name: usagePlanId
          description: AWS Gateway usage plan ID
      description: Generate a new Tarpon API key for a tenant
  /rules:
    get:
      summary: Rules - List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rule'
              examples: {}
      operationId: get-rules
      description: ''
      parameters:
        - schema:
            type: string
          in: query
          name: ruleId
    parameters: []
    post:
      summary: Rules - Create
      operationId: post-rules
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
  /iam/rules:
    parameters: []
    post:
      summary: Rules - Create
      operationId: post-iam-rules
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
      parameters:
        - schema:
            type: string
          in: query
          name: tenantId
          description: Tenant ID
  /rule_implementations:
    get:
      summary: Rule Implementations - List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RuleImplementation'
              examples: {}
            application/xml:
              schema:
                type: object
                properties: {}
      operationId: get-rule-implementations
      description: ''
    parameters: []
  '/rules/{ruleId}':
    parameters:
      - schema:
          type: string
        name: ruleId
        in: path
        required: true
    put:
      summary: Rule - Update
      operationId: put-rule-ruleId
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
    delete:
      summary: Rule - Delete
      operationId: delete-rules-ruleId
      responses:
        '200':
          description: OK
  /rule_instances:
    post:
      summary: Rule Instance - Create
      operationId: post-rule_instances
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleInstance'
              examples:
                example-1:
                  value:
                    id: string
                    ruleId: string
                    action: FLAG
                    parameters: {}
                    status: ACTIVE
                    createdAt: 0
                    updatedAt: 0
                    runCount: 0
                    hitCount: 0
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleInstance'
    get:
      summary: Rule Instance - List
      operationId: get-rule_instances
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RuleInstance'
  /iam/rule_instances:
    post:
      summary: Rule Instance - Create
      operationId: post-iam-rule_instances
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleInstance'
              examples:
                example-1:
                  value:
                    id: string
                    ruleId: string
                    action: FLAG
                    parameters: {}
                    status: ACTIVE
                    createdAt: 0
                    updatedAt: 0
                    runCount: 0
                    hitCount: 0
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleInstance'
      parameters:
        - schema:
            type: string
          in: query
          name: tenantId
          description: Tenant ID
    parameters: []
  '/rule_instances/{ruleInstanceId}':
    parameters:
      - schema:
          type: string
        name: ruleInstanceId
        in: path
        required: true
    delete:
      summary: Rule Instance - Delete
      operationId: delete-rule_instances-ruleInstanceId
      responses:
        '200':
          description: OK
    put:
      summary: Rule Instance - Update
      operationId: put-rule_instances-ruleInstanceId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleInstance'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleInstance'
  /import:
    parameters: []
    post:
      summary: Import - Start to Import
      operationId: post-import
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportResponse'
              examples:
                example-1:
                  value:
                    importedCount: 100
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportRequest'
            examples:
              example-1:
                value:
                  type: TRANSACTION
                  format: flagright
                  filename: filename
                  s3Key: s3-key-in-a-bucket
  '/import/{importId}':
    parameters:
      - schema:
          type: string
        name: importId
        in: path
        required: true
    get:
      summary: Import - Get Import Info
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileImport'
      operationId: get-import-importId
  /files/getPresignedUrl:
    parameters: []
    post:
      summary: Files - Get Presigned URL
      operationId: post-getPresignedUrl
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresignedUrlResponse'
              examples: {}
      description: Get a presigned URL for uploading a file
  /lists:
    post:
      summary: List Import
      operationId: post-lists
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListImportRequest'
  /transactions:
    get:
      summary: Transaction - List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsListResponse'
              examples: {}
      operationId: get-transactions-list
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          required: true
        - schema:
            type: number
          in: query
          name: skip
          required: true
        - schema:
            type: number
          in: query
          name: afterTimestamp
        - schema:
            type: number
          in: query
          name: beforeTimestamp
        - schema:
            type: string
          in: query
          name: filterId
        - schema:
            $ref: '#/components/schemas/RuleAction'
          in: query
          name: filterOutStatus
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterRulesExecuted
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterRulesHit
        - schema:
            type: string
          in: query
          name: transactionType
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterOriginCurrencies
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterDestinationCurrencies
        - schema:
            type: string
          in: query
          name: sortField
        - schema:
            type: string
          in: query
          name: sortOrder
        - schema:
            type: string
          in: query
          name: filterUserId
        - schema:
            type: string
          in: query
          name: filterOriginUserId
        - schema:
            type: string
          in: query
          name: filterDestinationUserId
        - schema:
            $ref: '#/components/schemas/RuleAction'
          in: query
          name: filterStatus
        - schema:
            type: boolean
          in: query
          name: includeUsers
        - schema:
            type: boolean
          in: query
          name: includeEvents
        - schema:
            type: string
          in: query
          name: filterOriginPaymentMethod
        - schema:
            type: string
          in: query
          name: filterDestinationPaymentMethod
  /transactions/export:
    get:
      summary: Transaction - Export
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  downloadUrl:
                    type: string
                required:
                  - downloadUrl
              examples: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                example-1:
                  value: {}
      operationId: get-transactions-list-export
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          required: true
        - schema:
            type: number
          in: query
          name: skip
          required: true
        - schema:
            type: number
          in: query
          name: afterTimestamp
        - schema:
            type: number
          in: query
          name: beforeTimestamp
          required: true
        - schema:
            type: string
          in: query
          name: filterId
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterRulesExecuted
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterRulesHit
        - schema:
            $ref: '#/components/schemas/RuleAction'
          in: query
          name: filterOutStatus
        - schema:
            $ref: '#/components/schemas/RuleAction'
          in: query
          name: filterStatus
        - schema:
            type: string
          in: query
          name: sortField
        - schema:
            type: string
          in: query
          name: sortOrder
      x-internal: false
    parameters: []
  '/transactions/{transactionId}':
    parameters:
      - schema:
          type: string
        name: transactionId
        in: path
        required: true
    post:
      summary: Transaction - Update
      operationId: post-transactions-transactionId
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionUpdateRequest'
    get:
      summary: Transaction - Get
      operationId: get-transaction
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCaseManagement'
        '404':
          description: Not Found
      description: ''
  /consumer/users:
    get:
      summary: Consumer Users - List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerUsersListResponse'
              examples: {}
      operationId: get-consumer-users-list
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          required: true
        - schema:
            type: number
          in: query
          name: skip
          required: true
        - schema:
            type: number
          in: query
          name: afterTimestamp
        - schema:
            type: number
          in: query
          name: beforeTimestamp
          required: true
        - schema:
            type: string
          in: query
          name: filterId
    parameters: []
  '/consumer/users/{userId}':
    get:
      summary: Consumer Users - Item - Get
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalConsumerUser'
              examples: {}
      operationId: get-consumer-users-item
      description: ''
      parameters: []
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
  '/consumer/users/{userId}/files':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    post:
      summary: Consumer User Files - Create
      operationId: post-consumer-users-userId-files
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileInfo'
  '/consumer/users/{userId}/files/{fileId}':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
      - schema:
          type: string
        name: fileId
        in: path
        required: true
    delete:
      summary: Consumer User Files - Delete
      operationId: delete-consumer-users-userId-files-fileId
      responses:
        '200':
          description: OK
  /business/users:
    get:
      summary: Business Users - List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessUsersListResponse'
              examples: {}
      operationId: get-business-users-list
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          required: true
        - schema:
            type: number
          in: query
          name: skip
          required: true
        - schema:
            type: number
          in: query
          name: afterTimestamp
        - schema:
            type: number
          in: query
          name: beforeTimestamp
          required: true
        - schema:
            type: string
          in: query
          name: filterId
    parameters: []
  '/business/users/{userId}':
    get:
      summary: Business Users - Item - Get
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalBusinessUser'
              examples: {}
      operationId: get-business-users-item
      description: ''
      parameters: []
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
  '/business/users/{userId}/files':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    post:
      summary: Business User Files - Create
      operationId: post-business-users-userId-files
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileInfo'
  '/business/users/{userId}/files/{fileId}':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
      - schema:
          type: string
        name: fileId
        in: path
        required: true
    delete:
      summary: Business User Files - Delete
      operationId: delete-business-users-userId-files-fileId
      responses:
        '200':
          description: OK
  /dashboard_stats/transactions:
    get:
      summary: DashboardStats - Transactions
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardStatsTransactionsCount'
              examples: {}
      operationId: get-dashboard-stats-transactions
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: startTimestamp
        - schema:
            type: number
          in: query
          name: endTimestamp
        - schema:
            type: string
            enum:
              - HOUR
              - MONTH
              - DAY
          in: query
          name: granularity
    parameters: []
  /dashboard_stats/rule_hit:
    get:
      summary: DashboardStats - Rule hit
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardStatsRulesCount'
              examples: {}
      operationId: get-dashboard-stats-rule-hit
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: startTimestamp
        - schema:
            type: number
          in: query
          name: endTimestamp
    parameters: []
  /dashboard_stats/hits_per_user:
    get:
      summary: DashboardStats - Hits per user
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardStatsHitsPerUser'
              examples: {}
      operationId: get-dashboard-stats-hits-per-user
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: startTimestamp
        - schema:
            type: number
          in: query
          name: endTimestamp
  '/transactions/{transactionId}/comments':
    post:
      summary: Create a Transaction Comment
      operationId: post-transactions-comments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
    parameters:
      - schema:
          type: string
        name: transactionId
        in: path
        required: true
  '/transactions/{transactionId}/comments/{commentId}':
    parameters:
      - schema:
          type: string
        name: transactionId
        in: path
        required: true
      - schema:
          type: string
        name: commentId
        in: path
        required: true
    delete:
      summary: Delete a Transaction Comment
      operationId: delete-transactions-transactionId-comments-commentId
      responses:
        '200':
          description: OK
  /tenants:
    get:
      summary: Tenant - List
      operationId: get-tenants-list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tenant'
  /tenants/settings:
    get:
      summary: Tenant - Get Settings
      operationId: get-tenants-settings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantSettings'
    parameters: []
    post:
      summary: Tenant - POST Settings
      operationId: post-tenants-settings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantSettings'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantSettings'
  '/accounts/{userId}/change_tenant':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    post:
      summary: Account - Change Tenant
      operationId: accounts-change-tenant
      requestBody:
        content:
          application/json:
            schema:
              type: object
              title: ChangeTenantPayload
              properties:
                newTenantId:
                  type: string
              required:
                - newTenantId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualRiskAssignmentUserState'
        '403':
          description: Not enough privileges
  '/accounts/{userId}':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    delete:
      summary: Account - Delete
      operationId: accounts-delete
      responses:
        '200':
          description: OK
  /accounts:
    post:
      summary: Account - Invite
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountInvitePayload'
      operationId: accounts-invite
    get:
      summary: Account - List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
      operationId: get-accounts
  /pulse/risk-classification:
    get:
      summary: Risk classification - GET
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RiskClassificationScore'
              examples:
                example-1:
                  value:
                    - riskLevel: VERY_LOW
                      lowerBoundRiskScore: 0
                      upperBoundRiskScore: 25
      operationId: get-pulse-risk-classification
      description: ''
    post:
      summary: Risk classification - POST
      operationId: post-pulse-risk-classification
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RiskClassificationScore'
              examples:
                example-1:
                  value:
                    - riskLevel: VERY_LOW
                      lowerBoundRiskScore: 0
                      upperBoundRiskScore: 25
        '400':
          description: Bad Request
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RiskClassificationScore'
    parameters: []
  /pulse/manual-risk-assignment:
    parameters: []
    post:
      summary: Risk Level - Manual Assignment
      operationId: pulse-manual-risk-assignment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              title: ManualRiskAssignmentPayload
              properties:
                riskLevel:
                  $ref: '#/components/schemas/RiskLevel'
              required:
                - riskLevel
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualRiskAssignmentUserState'
        '403':
          description: Not enough privileges
      parameters:
        - schema:
            type: string
          in: query
          name: userId
          required: true
          description: UserID of the user whose risk is being manually assigned
    get:
      summary: Risk Level - Get Manual Assignment
      operationId: get-pulse-manual-risk-assignment
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualRiskAssignmentUserState'
        '403':
          description: Not enough privileges
      parameters:
        - schema:
            type: string
          in: query
          name: userId
          required: true
          description: UserID of the user to get manual risk assignment settings
  /pulse/risk-parameter:
    parameters: []
    post:
      summary: Parameter Risk Level - POST
      operationId: post-pulse-risk-parameter
      requestBody:
        content:
          application/json:
            schema:
              type: object
              title: PostPulseRiskParameters
              properties:
                parameterAttributeRiskValues:
                  $ref: '#/components/schemas/ParameterAttributeRiskValues'
              required:
                - parameterAttributeRiskValues
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParameterAttributeRiskValues'
        '403':
          description: Not enough privileges
      parameters: []
      description
    get:
      summary: Parameter Risk Level - GET
      operationId: get-pulse-risk-parameter
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParameterAttributeRiskValues'
      parameters:
        - schema:
            type: string
          in: query
          name: parameter
          description: Parameter you want to filter on
  /slack/oauth_redirect:
    get:
      summary: Slack OAuth Redirect
      tags: []
      responses: {}
      operationId: get-slack-oauth-redirect
    parameters: []
components:
  schemas:
    ManualRiskAssignmentUserState:
      title: ManualRiskAssignmentUserState
      type: object
      properties:
        isManualOverride:
          type: boolean
        isUpdatable:
          type: boolean
        riskLevel:
          $ref: '#/components/schemas/RiskLevel'
      required:
        - isManualOverride
        - isUpdatable
    Rule:
      title: Rule
      type: object
      x-examples:
        example-1:
          id: R-1
          name: Rule name
          description: Rule description
          defaultParameters:
            threshold: 3
          defaultAction: FLAG
          ruleImplementationName: code-filename
          createdAt: 0
          updatedAt: 0
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - TRANSACTION
            - USER
        name:
          type: string
        description:
          type: string
        descriptionTemplate:
          type: string
        defaultParameters:
          type: object
        defaultRiskLevelParameters:
          $ref: '#/components/schemas/RiskLevelRuleParameters'
        defaultAction:
          $ref: '#/components/schemas/RuleAction'
        defaultRiskLevelActions:
          $ref: '#/components/schemas/RiskLevelRuleActions'
        ruleImplementationName:
          type: string
        labels:
          type: array
          items:
            type: string
        createdAt:
          type: number
        updatedAt:
          type: number
        tenantIds:
          type: array
          items:
            type: string
      required:
        - id
        - type
        - name
        - description
        - defaultParameters
        - defaultAction
        - ruleImplementationName
        - labels
    RuleInstance:
      title: RuleInstance
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - TRANSACTION
            - USER
        ruleId:
          type: string
        parameters:
          type: object
        riskLevelParameters:
          $ref: '#/components/schemas/RiskLevelRuleParameters'
        action:
          $ref: '#/components/schemas/RuleAction'
        riskLevelActions:
          $ref: '#/components/schemas/RiskLevelRuleActions'
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        createdAt:
          type: number
        updatedAt:
          type: number
        runCount:
          type: number
        hitCount:
          type: number
      required:
        - ruleId
        - parameters
        - action
    RuleAction:
      type: string
      title: RuleAction
      enum:
        - FLAG
        - BLOCK
        - WHITELIST
        - ALLOW
        - SUSPEND
    RuleActionAlias:
      type: object
      title: RuleActionAlias
      properties:
        action:
          $ref: '#/components/schemas/RuleAction'
        alias:
          type: string
      required:
        - action
        - alias
    ImportRequest:
      title: ImportRequest
      type: object
      properties:
        type:
          type: string
          enum:
            - TRANSACTION
            - USER
            - BUSINESS
        format:
          type: string
          enum:
            - flagright
            - custom
        s3Key:
          type: string
        filename:
          type: string
      required:
        - type
        - format
        - s3Key
        - filename
    PresignedUrlResponse:
      title: PresignedUrlResponse
      type: object
      properties:
        presignedUrl:
          type: string
        s3Key:
          type: string
      required:
        - presignedUrl
        - s3Key
    ListImportRequest:
      title: ListImportRequest
      type: object
      properties:
        listName:
          type: string
        indexName:
          type: string
        data:
          type: string
      required:
        - listName
        - indexName
        - data
    ImportResponse:
      title: ImportResponse
      type: object
      properties:
        importedCount:
          type: number
      required:
        - importedCount
    TransactionsListResponse:
      title: TransactionsListResponse
      type: object
      description: ''
      x-examples: {}
      properties:
        total:
          type: number
        data:
          type: array
          items:
            $ref: '#/components/schemas/TransactionCaseManagement'
      required:
        - total
        - data
    TransactionCaseManagement:
      allOf:
        - $ref: ../public/openapi-public-original.yaml#/components/schemas/TransactionWithRulesResult
        - type: object
          properties:
            comments:
              type: array
              items:
                $ref: '#/components/schemas/Comment'
            assignments:
              type: array
              items:
                $ref: '#/components/schemas/Assignment'
            status:
              $ref: '#/components/schemas/RuleAction'
            statusChanges:
              type: array
              items:
                $ref: '#/components/schemas/TransactionStatusChange'
            originUser:
              oneOf:
                - $ref: '#/components/schemas/InternalConsumerUser'
                - $ref: '#/components/schemas/InternalBusinessUser'
            destinationUser:
              oneOf:
                - $ref: '#/components/schemas/InternalConsumerUser'
                - $ref: '#/components/schemas/InternalBusinessUser'
            events:
              type: array
              items:
                $ref: ../public/openapi-public-original.yaml#/components/schemas/TransactionEvent
          required:
            - status
          additionalProperties: false
      title: TransactionCaseManagement
    ConsumerUsersListResponse:
      title: ConsumerUsersListResponse
      type: object
      properties:
        total:
          type: number
        data:
          type: array
          items:
            $ref: '#/components/schemas/InternalConsumerUser'
      required:
        - total
        - data
    BusinessUsersListResponse:
      title: BusinessUsersListResponse
      type: object
      properties:
        total:
          type: number
        data:
          type: array
          items:
            $ref: '#/components/schemas/InternalBusinessUser'
      required:
        - total
        - data
    DashboardStatsTransactionsCount:
      type: object
      x-examples:
        example-1:
          data:
            - _id: '2020-01-04'
              totalTransactions: 2344
              flaggedTransactions: 121
              stoppedTransactions: 33
      title: DashboardStatsTransactionsCount
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              totalTransactions:
                type: number
              flaggedTransactions:
                type: number
              stoppedTransactions:
                type: number
              suspendedTransactions:
                type: number
            required:
              - _id
      required:
        - data
    DashboardStatsRulesCount:
      type: object
      x-examples: {}
      title: DashboardStatsRulesCount
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              ruleId:
                type: string
              hitCount:
                type: number
            required:
              - ruleId
              - hitCount
      required:
        - data
    InternalConsumerUser:
      allOf:
        - $ref: ../public/openapi-public-original.yaml#/components/schemas/User
        - type: object
          properties:
            type:
              enum:
                - CONSUMER
              type: string
            files:
              type: array
              items:
                $ref: '#/components/schemas/FileInfo'
          required:
            - type
    InternalBusinessUser:
      allOf:
        - $ref: ../public/openapi-public-original.yaml#/components/schemas/Business
        - type: object
          properties:
            type:
              enum:
                - BUSINESS
              type: string
            files:
              type: array
              items:
                $ref: '#/components/schemas/FileInfo'
          required:
            - type
    DashboardStatsHitsPerUser:
      type: object
      title: DashboardStatsHitsPerUser
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              originUserId:
                type: string
              transactionsHit:
                type: number
              user:
                oneOf:
                  - $ref: '#/components/schemas/InternalConsumerUser'
                  - $ref: '#/components/schemas/InternalBusinessUser'
              rulesHit:
                type: number
            required:
              - originUserId
              - transactionsHit
      required:
        - data
    Comment:
      title: Comment
      type: object
      properties:
        id:
          type: string
        body:
          type: string
        userId:
          type: string
        files:
          type: array
          items:
            $ref: '#/components/schemas/FileInfo'
        createdAt:
          type: number
        updatedAt:
          type: number
      required:
        - body
    FileInfo:
      title: FileInfo
      type: object
      properties:
        s3Key:
          type: string
        bucket:
          type: string
        filename:
          type: string
        size:
          type: number
        downloadLink:
          type: string
      required:
        - s3Key
        - filename
        - size
    Assignment:
      title: Assignment
      type: object
      properties:
        assigneeUserId:
          type: string
        assignedByUserId:
          type: string
        timestamp:
          type: number
      required:
        - assigneeUserId
        - assignedByUserId
        - timestamp
    TransactionStatusChange:
      title: TransactionStatusChange
      type: object
      properties:
        userId:
          type: string
        status:
          $ref: '#/components/schemas/RuleAction'
        reason:
          type: array
          items:
            type: string
        timestamp:
          type: number
      required:
        - userId
        - status
        - timestamp
    TransactionUpdateRequest:
      title: TransactionUpdateRequest
      type: object
      properties:
        status:
          $ref: '#/components/schemas/RuleAction'
        assignments:
          type: array
          items:
            $ref: '#/components/schemas/Assignment'
        reason:
          type: array
          items:
            type: string
    FileImport:
      title: FileImport
      type: object
      properties:
        _id:
          type: string
        type:
          type: string
          enum:
            - TRANSACTION
            - USER
            - BUSINESS
        s3Key:
          type: string
        filename:
          type: string
        importedRecords:
          type: number
        error:
          type: string
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/FileImportStatusChange'
      required:
        - _id
        - type
        - s3Key
        - filename
        - statuses
    FileImportStatusChange:
      type: object
      title: FileImportStatusChange
      enum:
        - IN_PROGRESS
        - PENDING
        - FAILED
        - SUCCESS
      properties:
        status:
          type: string
          enum:
            - IN_PROGRESS
            - PENDING
            - SUCCESS
            - FAILED
        timestamp:
          type: number
      required:
        - status
        - timestamp
    RuleImplementation:
      title: RuleImplementation
      type: object
      properties:
        name:
          type: string
        parametersSchema:
          type: object
      required:
        - name
        - parametersSchema
    Account:
      title: Account
      type: object
      properties:
        id:
          type: string
        role:
          type: string
        email:
          type: string
        emailVerified:
          type: boolean
        name:
          type: string
        picture:
          type: string
      required:
        - id
        - role
        - email
        - emailVerified
        - name
    AccountInvitePayload:
      title: AccountInvitePayload
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    Tenant:
      title: Tenant
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
        - name
    TenantSettings:
      title: TenantSettings
      type: object
      properties:
        features:
          type: array
          items:
            $ref: '#/components/schemas/Feature'
        ruleActionAliases:
          type: array
          items:
            $ref: '#/components/schemas/RuleActionAlias'
    RiskClassificationScore:
      description: ''
      title: RiskClassificationScore
      type: object
      properties:
        riskLevel:
          $ref: '#/components/schemas/RiskLevel'
        lowerBoundRiskScore:
          type: number
          minimum: 0
          maximum: 100
          exclusiveMinimum: false
          exclusiveMaximum: false
        upperBoundRiskScore:
          type: number
          exclusiveMinimum: false
          exclusiveMaximum: false
          minimum: 0
          maximum: 100
      required:
        - riskLevel
        - lowerBoundRiskScore
        - upperBoundRiskScore
    RiskLevelRuleParameters:
      title: RiskLevelRuleParameters
      x-stoplight:
        id: xpbk3cprby4j6
      type: object
      properties:
        VERY_HIGH:
          type: object
        HIGH:
          type: object
        MEDIUM:
          type: object
        LOW:
          type: object
        VERY_LOW:
          type: object
      required:
        - VERY_HIGH
        - HIGH
        - MEDIUM
        - LOW
        - VERY_LOW
    RiskLevel:
      type: string
      title: RiskLevel
      x-stoplight:
        id: lrybcomxmbf4h
      enum:
        - VERY_HIGH
        - HIGH
        - MEDIUM
        - LOW
        - VERY_LOW
    RiskLevelRuleActions:
      title: RiskLevelRuleActions
      x-stoplight:
        id: 9sj5fz98k6tlb
      type: object
      properties:
        VERY_HIGH:
          $ref: '#/components/schemas/RuleAction'
        HIGH:
          $ref: '#/components/schemas/RuleAction'
        MEDIUM:
          $ref: '#/components/schemas/RuleAction'
        LOW:
          $ref: '#/components/schemas/RuleAction'
        VERY_LOW:
          $ref: '#/components/schemas/RuleAction'
      required:
        - VERY_HIGH
        - HIGH
        - MEDIUM
        - LOW
        - VERY_LOW
    RiskParameterLevelKeyValue:
      type: object
      x-examples: {}
      title: RiskParameterLevelKeyValue
      properties:
        parameterValue:
          type: string
        riskLevel:
          $ref: '#/components/schemas/RiskLevel'
      required:
        - parameterValue
        - riskLevel
    ParameterAttributeRiskValues:
      title: ParameterAttributeRiskValues
      type: object
      x-examples:
        example-1:
          parameter: userDetails.countryOfResidence
          riskValueType: DISCRETE
          riskLevelAssignmentValues:
            DE: LOW
            TR: HIGH
      properties:
        parameter:
          type: string
          enum:
            - userDetails.countryOfResidence
            - userDetails.countryOfOrigin
        isActive:
          type: boolean
        riskValueType:
          type: string
          enum:
            - RANGE
            - DISCRETE
        riskLevelAssignmentValues:
          type: array
          items:
            $ref: '#/components/schemas/RiskParameterLevelKeyValue'
      required:
        - parameter
        - isActive
        - riskValueType
        - riskLevelAssignmentValues
    Feature:
      type: string
      title: Feature
      x-stoplight:
        id: xc9jmvdpmvtof
      enum:
        - PULSE
        - PULSE_MANUAL_USER_RISK_LEVEL
        - AUDIT_LOGS
        - SLACK_ALERTS
        - IMPORT_FILES
      description: ''
    AccountRole:
      type: string
      title: AccountRole
      x-stoplight:
        id: byu0hqffp9hxz
      enum:
        - root
        - admin
        - user
  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
  responses: {}
