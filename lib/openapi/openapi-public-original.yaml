openapi: 3.0.0
info:
  description: ''
  title: Flagright API
  contact: {}
  version: '1.0'
servers:
  - url: 'https://sandbox.api.flagright.com'
    variables: {}
paths:
  /transactions:
    post:
      security:
        - x-api-key: []
      summary: Verify a Transaction
      description: |
        ### POST Transactions

        `/transactions` endpoint allows you to operate on the [Transaction entity.](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#transaction)

        In order to pass the payload of a transaction to Flagright and verify the transaciton, you will need to call this endpoint with the transaction payload. Not all fields are mandatory, you will only need to pass in the fields that you have and are relevant for your compliance setup.
      operationId: post-consumer-transaction
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
            examples:
              example-1:
                value:
                  transactionId: 7b80a539eea6e78acbd6d458e5971482
                  originUserId: 8650a2611d0771cba03310f74bf6
                  destinationUserId: 9350a2611e0771cba03310f74bf6
                  originAmountDetails:
                    country: DE
                    transactionAmount: 800
                    transactionCurrency: EUR
                  destinationAmountDetails:
                    country: IN
                    transactionAmount: 68351.34
                    transactionCurrency: INR
                  promotionCodeUsed: true
                  timestamp: 1641654664000
                  originPaymentDetails:
                    method: CARD
                    cardFingerprint: 20ac00fed8ef913aefb17cfae1097cce
                    cardIssuedCountry: US
                    transactionReferenceField: Deposit
                    3dsDone: true
                  destinationPaymentDetails:
                    method: CARD
                    cardFingerprint: 20ac00fed8ef913aefb17cfae1097cce
                    cardIssuedCountry: IN
                    transactionReferenceField: Deposit
                    3dsDone: true
                  reference: loan repayment
                  deviceData:
                    batteryLevel: 95
                    deviceLatitude: 13.0033
                    deviceLongitude: 76.1004
                    ipAddress: 10.23.191.2
                    deviceIdentifier: 3c49f915d04485e34caba
                    vpnUsed: false
                    operatingSystem: Android 11.2
                    deviceMaker: ASUS
                    deviceModel: Zenphone M2 Pro Max
                    deviceYear: '2018'
                    appVersion: 1.1.0
                  tags:
                    - key: customKey
                      value: customValue
        required: false
      responses:
        '201':
          description: Created
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionMonitoringResult'
              examples:
                example-1:
                  value:
                    transactionId: 7b80a539eea6e78acbd6d458e5971482
                    executedRules:
                      - ruleId: R-1a
                        ruleName: Proof of funds for high value transactions
                        ruleDescription: If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds
                        ruleAction: BLOCK
                        ruleHit: true
                    hitRules:
                      - ruleId: R-1a
                        ruleName: Proof of funds for high value transactions
                        ruleDescription: If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds
                        ruleAction: BLOCK
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '429':
          description: Too Many Requests
          headers: {}
          content: {}
      deprecated: false
      tags: []
  '/transactions/{transactionId}':
    get:
      security:
        - x-api-key: []
      summary: Retrieve a Transaction
      description: |-
        ### GET Transactions

        `/transactions` endpoint allows you to operate on the [Transaction entity](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#transaction).

        Calling `GET /transactions/{transactionId}` will return the entire transaction payload and rule execution results for the transaction with the corresponding `transactionId`
      operationId: get-consumer-transaction
      parameters:
        - name: transactionId
          in: path
          description: Unique Transaction Identifier
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionWithRulesResult'
              examples:
                example-1:
                  value:
                    transactionId: 7b80a539eea6e78acbd6d458e5971482
                    originUserId: 8650a2611d0771cba03310f74bf6
                    destinationUserId: 9350a2611e0771cba03310f74bf6
                    originAmountDetails:
                      country: DE
                      transactionAmount: 800
                      transactionCurrency: EUR
                    destinationAmountDetails:
                      country: IN
                      transactionAmount: 68351.34
                      transactionCurrency: INR
                    promotionCodeUsed: true
                    timestamp: 1641654664000
                    originPaymentDetails:
                      method: CARD
                      cardFingerprint: 20ac00fed8ef913aefb17cfae1097cce
                      cardIssuedCountry: US
                      transactionReferenceField: Deposit
                      3dsDone: true
                    destinationPaymentDetails:
                      method: CARD
                      cardFingerprint: 20ac00fed8ef913aefb17cfae1097cce
                      cardIssuedCountry: IN
                      transactionReferenceField: Deposit
                      3dsDone: true
                    reference: loan repayment
                    deviceData:
                      batteryLevel: 95
                      deviceLatitude: 13.0033
                      deviceLongitude: 76.1004
                      ipAddress: 10.23.191.2
                      deviceIdentifier: 3c49f915d04485e34caba
                      vpnUsed: false
                      operatingSystem: Android 11.2
                      deviceMaker: ASUS
                      deviceModel: Zenphone M2 Pro Max
                      deviceYear: '2018'
                      appVersion: 1.1.0
                    tags:
                      - key: customKey
                        value: customValue
                    executedRules:
                      - ruleId: R-1a
                        ruleName: Proof of funds for high value transactions
                        ruleDescription: If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds
                        ruleAction: BLOCK
                        ruleHit: true
                    hitRules:
                      - ruleId: R-1a
                        ruleName: Proof of funds for high value transactions
                        ruleDescription: If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds
                        ruleAction: BLOCK
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '429':
          description: Too Many Requests
          headers: {}
          content: {}
      deprecated: false
      tags: []
  /events/transaction:
    post:
      security:
        - x-api-key: []
      summary: Create a Transaction Event
      description: |
        ### POST Transaction Events

        `/events/transaction` endpoint allows you to operate on the [Transaction Events entity.](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#transaction-event)

        Transaction events are created after the initial `POST /transactions` call (which creates a transaction) and are used to:

        * Update the STATE of the transaction, using the `transactionState` field and manage the [Transaction Lifecycle](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#transaction-lifecycle-through-transaction-events)
        * Update the transaction details, using the `updatedTransactionAttributes` field.

        > If you have neither of the above two use cases, you do not need to use transaction events. 

        Each transaction event needs three mandatory fields:

        * `transactionState` - STATE of the transaction -> value is set to `CREATED` after `POST /transactions` call
        * `timestamp`- the timestamp of when the event was created or occured in your system
        * `transactionId` - The ID of the transaction for which this event is generated. 

        In order to make individual events retrievable, you also need to pass in a unique `eventId` to the request body.
      operationId: post-transaction-event
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionEvent'
            examples:
              example-2:
                value:
                  eventType: CREATED
                  timestamp: 1431231244001
                  transactionId: 443dea26147a406b957d9ee3a1247b11
                  transactionState: SUCCESSFUL
                  eventId: aaeeb166147a406b957dd9147a406b957
                  eventDescription: Transaction created
                  employeeId: 8cdeb166147a406b957dd9e709907b89
                  metaData:
                    batteryLevel: 76.3
                    deviceLatitude: 13.009711
                    deviceLongitude: 76.102898
                    ipAddress: 79.144.2.20
                    vpnUsed: true
        required: false
      responses:
        '201':
          description: Created
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionMonitoringResult'
              examples:
                example-1:
                  value:
                    transactionId: 7b80a539eea6e78acbd6d458e5971482
                    executedRules:
                      - ruleId: R-1a
                        ruleName: Proof of funds for high value transactions
                        ruleDescription: If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds
                        ruleAction: BLOCK
                        ruleHit: true
                    hitRules:
                      - ruleId: R-1a
                        ruleName: Proof of funds for high value transactions
                        ruleDescription: If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds
                        ruleAction: BLOCK
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '429':
          description: Too Many Requests
          headers: {}
          content: {}
      deprecated: false
      tags: []
      x-internal: false
  '/events/transaction/{eventId}':
    get:
      security:
        - x-api-key: []
      summary: Retrieve a Transaction Event
      description: |
        ### GET Transaction Events

        `/events/transaction` endpoint allows you to operate on the [Transaction Events entity.](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#transaction-event). 

        You can retrieve any transaction event you create using the [POST Transaction Events](https://docs.flagright.com/docs/flagright-api/d7c4dc4d02850-create-a-transaction-event) call.
      operationId: get-transaction-event
      parameters:
        - name: eventId
          in: path
          description: Unique Transaction Identifier
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionEvent'
              examples:
                example-1:
                  value:
                    eventType: CREATED
                    employeeID: 8cdeb166147a406b957dd9e709907b89
                    transactionId: 443dea26147a406b957d9ee3a1247b11
                    transactionState: SUCCESSFUL
                    timestamp: 1641654664000
                    metaData:
                      ipAddress: 144.13.22.19
                      vpnUsed: true
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '429':
          description: Too Many Requests
          headers: {}
          content: {}
      deprecated: false
      tags: []
      x-internal: false
  /events/user:
    post:
      security:
        - x-api-key: []
      summary: Create a User Event
      description: Create a User Event
      operationId: post-user-event
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEvent'
            examples: {}
        required: false
      responses:
        '201':
          description: Created
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMonitoringResult'
              examples: {}
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '429':
          description: Too Many Requests
          headers: {}
          content: {}
      deprecated: false
      tags: []
      x-internal: true
  /consumer/users:
    post:
      security:
        - x-api-key: []
      summary: Create a Consumer User
      description: |
        ### POST Consumer User

        `/consumer/user` endpoint allows you to operate on the [Consumer user entity.](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#user)

        In order to pass the payload of a User to Flagright and verify the User, you will need to call this endpoint with the User payload. Not all fields are mandatory, you will only need to pass in the fields that you have and are relevant for your compliance setup.
      operationId: post-consumer-user
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              example-1:
                value:
                  createdTimestamp: 1641654664000
                  userId: 96647cfd9e8fe66ee0f3362e011e34e8
                  userDetails:
                    name:
                      firstName: Baran
                      middleName: Realblood
                      lastName: Ozkan
                    dateOfBirth: '1991-01-01'
                    countryOfResidence: US
                    countryOfNationality: DE
                  legalDocuments:
                    - documentType: passport
                      documentNumber: Z9431P
                      documentIssuedDate: 1639939034
                      documentExpirationDate: 1839939034
                      documentIssuedCountry: DE
                      tags:
                        - key: customerType
                          value: wallet
                  contactDetails:
                    emailIds:
                      - baran@flagright.com
                    contactNumbers:
                      - '+37112345432'
                    websites:
                      - flagright.com
                    addresses:
                      - addressLines:
                          - Klara-Franke Str 20
                        postcode: '10557'
                        city: Berlin
                        state: Berlin
                        country: Germany
                        tags:
                          - key: customKey
                            value: customValue
                  tags:
                    - key: customKey
                      value: customValue
        required: false
      responses:
        '201':
          description: Created
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerUsersResponse'
              examples:
                example-1:
                  value:
                    userId: 96647cfd9e8fe66ee0f3362e011e34e8
                    userRiskScoreDetails:
                      kycRiskScore: 63.36
                      actionRiskScore: 72.32
                      dynamicRiskScore: 73.92
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '429':
          description: Too Many Requests
          headers: {}
          content: {}
      deprecated: false
      tags: []
  '/consumer/users/{userId}':
    get:
      security:
        - x-api-key: []
      summary: Retrieve a Consumer User
      description: |-
        ### GET Consumer User

        `/consumer/user` endpoint allows you to operate on the [Consumer User entity](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#user).

        Calling `GET /consumer/user/{userId}` will return the entire user payload and rule execution results for the user with the corresponding `userId`
      operationId: get-consumer-user
      parameters:
        - name: userId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                example-1:
                  value:
                    createdTimestamp: 1641654664000
                    userId: 96647cfd9e8fe66ee0f3362e011e34e8
                    userDetails:
                      name:
                        firstName: Baran
                        middleName: Realblood
                        lastName: Ozkan
                      dateOfBirth: '1991-01-01'
                      countryOfResidence: US
                      countryOfNationality: DE
                    legalDocuments:
                      - documentType: passport
                        documentNumber: Z9431P
                        documentIssuedDate: 1639939034
                        documentExpirationDate: 1839939034
                        documentIssuedCountry: DE
                        tags:
                          - key: customerType
                            value: wallet
                    contactDetails:
                      emailIds:
                        - baran@flagright.com
                      contactNumbers:
                        - '+37112345432'
                      websites:
                        - flagright.com
                      addresses:
                        - addressLines:
                            - Klara-Franke Str 20
                          postcode: '10557'
                          city: Berlin
                          state: Berlin
                          country: Germany
                          tags:
                            - key: customKey
                              value: customValue
                    tags:
                      - key: customKey
                        value: customValue
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '429':
          description: Too Many Requests
          headers: {}
          content: {}
      deprecated: false
      tags: []
  /business/users:
    post:
      security:
        - x-api-key: []
      summary: Create a Business User
      description: |
        ### POST Business User

        `/business/user` endpoint allows you to operate on the [Business user entity.](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#user)

        In order to pass the payload of a User to Flagright and verify the User, you will need to call this endpoint with the User payload. Not all fields are mandatory, you will only need to pass in the fields that you have and are relevant for your compliance setup.
      operationId: post-business-user
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Business'
        required: false
      responses:
        '201':
          description: Created
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessUsersResponse'
              examples:
                example-1:
                  value:
                    userId: 96647cfd9e8fe66ee0f3362e011e34e8
                    userRiskScoreDetails:
                      kycRiskScore: 63.36
                      actionRiskScore: 72.32
                      dynamicRiskScore: 73.92
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '429':
          description: Too Many Requests
          headers: {}
          content: {}
      deprecated: false
      tags: []
  '/business/users/{userId}':
    get:
      security:
        - x-api-key: []
      summary: Retrieve a Business User
      description: |-
        ### GET Business User

        `/business/user` endpoint allows you to operate on the [Business User entity](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#user).

        Calling `GET /business/user/{userId}` will return the entire User payload and rule execution results for the User with the corresponding `userId`
      operationId: get-business-user-userId
      parameters:
        - name: userId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Business'
              examples:
                example-2:
                  value:
                    createdTimestamp: 1641654664000
                    userId: 96647cfd9e8fe66ee0f3362e011e34e8
                    legalEntity:
                      companyGeneralDetails:
                        legalName: Ozkan Hazelnut Export JSC
                        businessIndustry:
                          - Farming
                        mainProductsServicesSold:
                          - Hazelnut
                      companyFinancialDetails:
                        expectedTransactionAmountPerMonth:
                          amountValue: 800
                          amountCurrency: GBP
                        expectedTurnoverPerMonth:
                          amountValue: 8000
                          amountCurrency: USD
                      companyRegistrationDetails:
                        registrationIdentifier: PSJ554342
                        registrationCountry: DE
                      reasonForAccountOpening:
                        - string
                      contactDetails:
                        addresses:
                          - addressLines:
                              - Klara-Franke Str 20
                            postcode: '10557'
                            city: Berlin
                            state: Berlin
                            country: Germany
                            tags:
                              - key: customKey
                                value: customValue
                    shareHolders:
                      - generalDetails:
                          name:
                            firstName: Baran
                            middleName: Realblood
                            lastName: Ozkan
                          dateOfBirth: '1991-01-01'
                          countryOfResidence: US
                          countryOfNationality: DE
                        legalDocuments:
                          - documentType: passport
                            documentNumber: Z9431P
                            documentIssuedDate: 1639939034
                            documentExpirationDate: 1839939034
                            documentIssuedCountry: DE
                            tags:
                              - key: customerType
                                value: wallet
                        contactDetails:
                          emailIds:
                            - baran@flagright.com
                          contactNumbers:
                            - +371 123132
                          websites:
                            - flagright.com
                          addresses:
                            - addressLines:
                                - Klara-Franke Str 20
                              postcode: '10557'
                              city: Berlin
                              state: Berlin
                              country: Germany
                              tags:
                                - key: customKey
                                  value: customValue
                        tags:
                          - key: customKey
                            value: customValue
                    directors:
                      - generalDetails:
                          name:
                            firstName: Baran
                            middleName: Realblood
                            lastName: Ozkan
                          dateOfBirth: '1991-01-01'
                          countryOfResidence: US
                          countryOfNationality: DE
                        legalDocuments:
                          - documentType: passport
                            documentNumber: Z9431P
                            documentIssuedDate: 1639939034
                            documentExpirationDate: 1839939034
                            documentIssuedCountry: DE
                            tags:
                              - key: customerType
                                value: wallet
                        contactDetails:
                          emailIds:
                            - baran@flagright.com
                          contactNumbers:
                            - +371 123132
                          websites:
                            - flagright.com
                          addresses:
                            - addressLines:
                                - Klara-Franke Str 20
                              postcode: '10557'
                              city: Berlin
                              state: Berlin
                              country: Germany
                              tags:
                                - key: customKey
                                  value: customValue
                        tags:
                          - key: customKey
                            value: customValue
                    tags:
                      - key: customKey
                        value: customValue
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '429':
          description: Too Many Requests
          headers: {}
          content: {}
      deprecated: false
      tags: []
  /events/case-management:
    post:
      security:
        - x-api-key: []
      summary: Create a Case Management Event
      description: Create a Case Management Event
      operationId: post-case-management-event
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaseManagementEvent'
            examples:
              example-1:
                value:
                  caseStatus: CLOSED
                  timestamp: 1262300400000
                  transactionId: 091e008cd1e611ec9d640242ac120002
                  eventId: 31e008cd1e904e249e640e42ae120211
                  eventDescription: Case Unsuspended
                  employeeId: 49e640e42ae12021131e008cd1e904e2
                  caseStatusReason: FALSE_POSITIVE
        required: false
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests
          headers: {}
          content: {}
      deprecated: false
      tags: []
      x-internal: true
    parameters: []
  /internal/users:
    post:
      security:
        - x-api-key: []
      summary: Create an Internal User
      description: Create an Internal User
      operationId: post-interal-user
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InternalUser'
            examples:
              example-1:
                value:
                  employeeID: 8cdeb166147a406b957dd9e709907b89
                  employeeLevel: L4
                  employeeDesignation: Senior Analyst
                  employeeName: Baran Ozkan
                  employeeNationality: IN
        required: false
      responses:
        '201':
          description: Created
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  employeeId:
                    type: string
              examples:
                example-1:
                  value:
                    employeeId: 8cdeb166147a406b957dd9e709907b89
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '429':
          description: Too Many Requests
          headers: {}
          content: {}
      deprecated: false
      tags: []
      x-internal: true
  '/internal/users/{employeeId}':
    get:
      security:
        - x-api-key: []
      summary: Retrieve an Internal User
      description: Retrieve a Consumer User
      operationId: get-internal-user
      parameters:
        - name: employeeId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalUser'
              examples:
                example-1:
                  value:
                    employeeID: 8cdeb166147a406b957dd9e709907b89
                    employeeLevel: L4
                    employeeDesignation: Senior Analyst
                    employeeName: Baran Ozkan
                    employeeNationality: IN
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '429':
          description: Too Many Requests
          headers: {}
          content: {}
      deprecated: false
      tags: []
      x-internal: true
components:
  schemas:
    Address:
      title: Address
      required:
        - addressLines
        - postcode
        - city
        - country
      type: object
      properties:
        addressLines:
          type: array
          items: {}
          description: Address lines of the user's residence address
        postcode:
          minLength: 1
          type: string
          description: Post code of the user's residence address
        city:
          minLength: 1
          type: string
          description: City of the user's residence address
        state:
          minLength: 1
          type: string
          description: State of the user's residence address
        country:
          minLength: 1
          type: string
          description: User's country of residence
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          description: Additional information that can be added via tags
      description: Model for standardized address
      example:
        addressLines:
          - Klara-Franke Str 20
        postcode: '10557'
        city: Berlin
        state: Berlin
        country: Germany
        tags:
          - key: customKey
            value: customValue
    User:
      title: User
      type: object
      description: Model for User details
      example:
        createdTimestamp: 1641654664000
        userId: 96647cfd9e8fe66ee0f3362e011e34e8
        userDetails:
          name:
            firstName: Baran
            middleName: Realblood
            lastName: Ozkan
          dateOfBirth: '1991-01-01'
          countryOfResidence: US
          countryOfNationality: DE
        legalDocuments:
          - documentType: passport
            documentNumber: Z9431P
            documentIssuedDate: 1639939034
            documentExpirationDate: 1839939034
            documentIssuedCountry: DE
            tags:
              - key: customerType
                value: wallet
        contactDetails:
          emailIds:
            - baran@flagright.com
          contactNumbers:
            - '+37112345432'
          websites:
            - flagright.com
          addresses:
            - addressLines:
                - Klara-Franke Str 20
              postcode: '10557'
              city: Berlin
              state: Berlin
              country: Germany
              tags:
                - key: customKey
                  value: customValue
        tags:
          - key: customKey
            value: customValue
      x-examples:
        example-1:
          userId: 96647cfd9e8fe66ee0f3362e011e34e8
          userDetails:
            name:
              firstName: Baran
              middleName: Realblood
              lastName: Ozkan
            dateOfBirth:
              day: 1
              month: 1
              year: 1990
            countryOfResidence: US
            countryOfNationality: DE
          legalDocuments:
            - documentType: passport
              documentNumber: Z9431P
              documentIssuedDate: 1639939034
              documentExpirationDate: 1839939034
              documentIssuedCountry: DE
              tags:
                - key: customerType
                  value: wallet
          contactDetails:
            emailIds:
              - baran@flagright.com
            contactNumbers:
              - '+37112345432'
            websites:
              - flagright.com
            addresses:
              - addressLines:
                  - Klara-Franke Str 20
                postcode: '10557'
                city: Berlin
                state: Berlin
                country: Germany
                tags:
                  - key: customKey
                    value: customValue
          tags:
            - key: customKey
              value: customValue
      properties:
        userId:
          minLength: 1
          type: string
          description: Unique user ID
        userDetails:
          $ref: '#/components/schemas/UserDetails'
        createdTimestamp:
          type: number
          minimum: 1262300400000
          description: Timestamp when userId is created
        legalDocuments:
          type: array
          description: User's legal identity documents - See Document Model for details
          items:
            $ref: '#/components/schemas/LegalDocument'
        contactDetails:
          $ref: '#/components/schemas/ContactDetails'
        tags:
          type: array
          description: Additional information that can be added via tags
          items:
            $ref: '#/components/schemas/Tag'
        transactionLimits:
          $ref: '#/components/schemas/TransactionLimits'
      required:
        - userId
        - userDetails
        - createdTimestamp
    Person:
      title: Person
      required:
        - generalDetails
      type: object
      properties:
        generalDetails:
          $ref: '#/components/schemas/UserDetails'
        legalDocuments:
          type: array
          items:
            $ref: '#/components/schemas/LegalDocument'
          description: User's legal identity documents - See Document Model for details
        contactDetails:
          $ref: '#/components/schemas/ContactDetails'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          description: Additional information that can be added via tags
      description: Model for a generic individual - different from User model by not having userId field
      example:
        generalDetails:
          name:
            firstName: Baran
            middleName: Realblood
            lastName: Ozkan
          dateOfBirth: '1991-01-01'
          countryOfResidence: US
          countryOfNationality: DE
        legalDocuments:
          - documentType: passport
            documentNumber: Z9431P
            documentIssuedDate: 1639939034
            documentExpirationDate: 1839939034
            documentIssuedCountry: DE
            tags:
              - key: customerType
                value: wallet
        contactDetails:
          emailIds:
            - baran@flagright.com
          contactNumbers:
            - +371 123132
          websites:
            - flagright.com
          addresses:
            - addressLines:
                - Klara-Franke Str 20
              postcode: '10557'
              city: Berlin
              state: Berlin
              country: Germany
              tags:
                - key: customKey
                  value: customValue
        tags:
          - key: customKey
            value: customValue
    LegalDocument:
      title: LegalDocument
      required:
        - documentType
        - documentNumber
        - documentIssuedCountry
      type: object
      properties:
        documentType:
          minLength: 1
          type: string
          description: "User's identity document type such as passport, national ID etc."
        documentNumber:
          minLength: 1
          type: string
          description: User's unique identity document number such as passport number
        documentIssuedDate:
          type: number
          description: User's identity document issuance date
        documentExpirationDate:
          type: number
          description: User's identity document expiration date
        documentIssuedCountry:
          type: string
          description: User's identity document issuance country
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          description: Additional information that can be added via tags
        nameOnDocument:
          $ref: '#/components/schemas/ConsumerName'
      description: "LegalDocument model generalizes User's identity document type (ex: Passport)"
      example:
        documentType: passport
        documentNumber: Z9431P
        documentIssuedDate: 1639939034
        documentExpirationDate: 1839939034
        documentIssuedCountry: DE
        tags:
          - key: customerType
            value: wallet
    Tag:
      title: Tag
      required:
        - key
        - value
      type: object
      properties:
        key:
          minLength: 1
          type: string
          description: Key value when you are creating a custom variable
        value:
          minLength: 1
          type: string
          description: Value for a given key when you are creating a custom variable
      description: Generic key-value pair model to append a custom variable being sent to Flagright API
      example:
        key: customKey
        value: customValue
    Transaction:
      title: Transaction
      type: object
      description: Model for transaction payload
      example:
        transactionId: 7b80a539eea6e78acbd6d458e5971482
        originUserId: 8650a2611d0771cba03310f74bf6
        destinationUserId: 9350a2611e0771cba03310f74bf6
        originAmountDetails:
          country: DE
          transactionAmount: 800
          transactionCurrency: EUR
        destinationAmountDetails:
          country: IN
          transactionAmount: 68351.34
          transactionCurrency: INR
        promotionCodeUsed: true
        timestamp: 1641654664000
        originPaymentDetails:
          method: CARD
          cardFingerprint: 20ac00fed8ef913aefb17cfae1097cce
          cardIssuedCountry: US
          transactionReferenceField: Deposit
          3dsDone: true
        destinationPaymentDetails:
          method: CARD
          cardFingerprint: 20ac00fed8ef913aefb17cfae1097cce
          cardIssuedCountry: IN
          transactionReferenceField: Deposit
          3dsDone: true
        reference: loan repayment
        deviceData:
          batteryLevel: 95
          deviceLatitude: 13.0033
          deviceLongitude: 76.1004
          ipAddress: 10.23.191.2
          deviceIdentifier: 3c49f915d04485e34caba
          vpnUsed: false
          operatingSystem: Android 11.2
          deviceMaker: ASUS
          deviceModel: Zenphone M2 Pro Max
          deviceYear: '2018'
          appVersion: 1.1.0
        tags:
          - key: customKey
            value: customValue
      x-examples:
        example-1:
          transactionId: 7b80a539eea6e78acbd6d458e5971482
          originUserId: 8650a2611d0771cba03310f74bf6
          destinationUserId: 9350a2611e0771cba03310f74bf6
          originAmountDetails:
            country: DE
            transactionAmount: 800
            transactionCurrency: EUR
          destinationAmountDetails:
            country: IN
            transactionAmount: 68351.34
            transactionCurrency: INR
          promotionCodeUsed: true
          timestamp: 1641654664
          originPaymentDetails:
            method: CARD
            cardFingerprint: 20ac00fed8ef913aefb17cfae1097cce
            cardIssuedCountry: US
            transactionReferenceField: Deposit
            3dsDone: true
          destinationPaymentDetails:
            method: CARD
            cardFingerprint: 20ac00fed8ef913aefb17cfae1097cce
            cardIssuedCountry: IN
            transactionReferenceField: Deposit
            3dsDone: true
          reference: loan repayment
          deviceData:
            batteryLevel: 95
            deviceLatitude: 13.0033
            deviceLongitude: 76.1004
            ipAddress: 10.23.191.2
            deviceIdentifier: 3c49f915d04485e34caba
            vpnUsed: false
            operatingSystem: Android 11.2
            deviceMaker: ASUS
            deviceModel: Zenphone M2 Pro Max
            deviceYear: '2018'
            appVersion: 1.1.0
          tags:
            - key: customKey
              value: customValue
      properties:
        type:
          type: string
          description: 'Type of transaction depending on your use case. It can be withdrawal, deposit, payment link, wallet-to-wallet, trading etc.'
        transactionId:
          minLength: 1
          type: string
          description: Unique transaction identifier
        timestamp:
          type: number
          minimum: 1262300400000
          description: Timestamp of when transaction took place
        transactionState:
          $ref: '#/components/schemas/TransactionState'
        originUserId:
          type: string
          description: UserId for where the transaction originates from
        destinationUserId:
          type: string
          description: "UserId for transaction's destination. In other words, where the value is being transferred to."
        originAmountDetails:
          $ref: '#/components/schemas/TransactionAmountDetails'
        destinationAmountDetails:
          $ref: '#/components/schemas/TransactionAmountDetails'
        originPaymentDetails:
          oneOf:
            - $ref: '#/components/schemas/CardDetails'
            - $ref: '#/components/schemas/GenericBankAccountDetails'
            - $ref: '#/components/schemas/IBANDetails'
            - $ref: '#/components/schemas/ACHDetails'
            - $ref: '#/components/schemas/SWIFTDetails'
            - $ref: '#/components/schemas/UPIDetails'
            - $ref: '#/components/schemas/WalletDetails'
          description: 'Payment details of the origin. It can be a bank account number, wallet ID, card fingerprint etc.'
        destinationPaymentDetails:
          oneOf:
            - $ref: '#/components/schemas/CardDetails'
            - $ref: '#/components/schemas/GenericBankAccountDetails'
            - $ref: '#/components/schemas/IBANDetails'
            - $ref: '#/components/schemas/ACHDetails'
            - $ref: '#/components/schemas/UPIDetails'
            - $ref: '#/components/schemas/WalletDetails'
            - $ref: '#/components/schemas/SWIFTDetails'
          example:
            method: CARD
            cardFingerprint: 20ac00fed8ef913aefb17cfae1097cce
            cardIssuedCountry: TR
            transactionReferenceField: Deposit
            3dsDone: true
          description: 'Payment details of the destination. It can be a bank account number, wallet ID, card fingerprint etc.'
        productType:
          type: string
          description: 'Type of produce being used by the consumer (ex wallets, payments etc)'
        promotionCodeUsed:
          type: boolean
          description: Whether a promotion code was used or not the transaction
        reference:
          minLength: 1
          type: string
          description: Reference field for the transaction indicating the purpose of the transaction etc.
        deviceData:
          $ref: '#/components/schemas/DeviceData'
        tags:
          type: array
          description: Additional information that can be added via tags
          items:
            $ref: '#/components/schemas/Tag'
    TransactionWithRulesResult:
      title: TransactionWithRulesResult
      description: Model for transaction payload with rules result
      example:
        transactionId: 7b80a539eea6e78acbd6d458e5971482
        originUserId: 8650a2611d0771cba03310f74bf6
        destinationUserId: 9350a2611e0771cba03310f74bf6
        originAmountDetails:
          country: DE
          transactionAmount: 800
          transactionCurrency: EUR
        destinationAmountDetails:
          country: IN
          transactionAmount: 68351.34
          transactionCurrency: INR
        promotionCodeUsed: true
        timestamp: 1641654664
        originPaymentDetails:
          method: CARD
          cardFingerprint: 20ac00fed8ef913aefb17cfae1097cce
          cardIssuedCountry: US
          transactionReferenceField: Deposit
          3dsDone: true
        destinationPaymentDetails:
          method: CARD
          cardFingerprint: 20ac00fed8ef913aefb17cfae1097cce
          cardIssuedCountry: IN
          transactionReferenceField: Deposit
          3dsDone: true
        reference: loan repayment
        deviceData:
          batteryLevel: 95
          deviceLatitude: 13.0033
          deviceLongitude: 76.1004
          ipAddress: 10.23.191.2
          deviceIdentifier: 3c49f915d04485e34caba
          vpnUsed: false
          operatingSystem: Android 11.2
          deviceMaker: ASUS
          deviceModel: Zenphone M2 Pro Max
          deviceYear: '2018'
          appVersion: 1.1.0
        tags:
          - key: customKey
            value: customValue
      allOf:
        - $ref: '#/components/schemas/Transaction'
        - type: object
          properties:
            executedRules:
              type: array
              items:
                $ref: '#/components/schemas/ExecutedRulesResult'
            hitRules:
              type: array
              items:
                $ref: '#/components/schemas/HitRulesResult'
          required:
            - executedRules
            - hitRules
      x-examples:
        example-1:
          transactionId: 7b80a539eea6e78acbd6d458e5971482
          originUserId: 8650a2611d0771cba03310f74bf6
          destinationUserId: 9350a2611e0771cba03310f74bf6
          originAmountDetails:
            country: DE
            transactionAmount: 800
            transactionCurrency: EUR
          destinationAmountDetails:
            country: IN
            transactionAmount: 68351.34
            transactionCurrency: INR
          promotionCodeUsed: true
          timestamp: 1641654664
          originPaymentDetails:
            method: CARD
            cardFingerprint: 20ac00fed8ef913aefb17cfae1097cce
            cardIssuedCountry: US
            transactionReferenceField: Deposit
            3dsDone: true
          destinationPaymentDetails:
            method: CARD
            cardFingerprint: 20ac00fed8ef913aefb17cfae1097cce
            cardIssuedCountry: IN
            transactionReferenceField: Deposit
            3dsDone: true
          reference: loan repayment
          deviceData:
            batteryLevel: 95
            deviceLatitude: 13.0033
            deviceLongitude: 76.1004
            ipAddress: 10.23.191.2
            deviceIdentifier: 3c49f915d04485e34caba
            vpnUsed: false
            operatingSystem: Android 11.2
            deviceMaker: ASUS
            deviceModel: Zenphone M2 Pro Max
            deviceYear: '2018'
            appVersion: 1.1.0
          tags:
            - key: customKey
              value: customValue
          executedRules:
            - ruleId: R-1a
              ruleName: Proof of funds for high value transactions
              ruleDescription: If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds
              ruleAction: BLOCK
              ruleHit: true
          hitRules:
            - ruleId: R-1a
              ruleName: Proof of funds for high value transactions
              ruleDescription: If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds
              ruleAction: BLOCK
    UserEventWithRulesResult:
      title: UserEventWithRulesResult
      description: Model for user event payload with rules result
      allOf:
        - $ref: '#/components/schemas/UserEvent'
        - type: object
          properties:
            status:
              $ref: '#/components/schemas/RuleAction'
            executedRules:
              type: array
              items:
                $ref: '#/components/schemas/ExecutedRulesResult'
            hitRules:
              type: array
              items:
                $ref: '#/components/schemas/HitRulesResult'
          required:
            - executedRules
            - hitRules
      x-examples: {}
    CardDetails:
      title: CardDetails
      type: object
      description: Model for credit or debit card details
      example:
        method: CARD
        cardFingerprint: 20ac00fed8ef913aefb17cfae1097cce
        cardIssuedCountry: TR
        transactionReferenceField: Deposit
        3dsDone: true
      properties:
        method:
          type: string
          pattern: CARD
          description: Classify the method of payment as "Card" for CardDetails
        cardFingerprint:
          minLength: 1
          type: string
          description: Unique card fingerprint that helps identify a specific card without having to use explicit card number. This is likely available at your card payment scheme provider
        cardIssuedCountry:
          minLength: 1
          type: string
          description: The country of issuance for a specific card
        transactionReferenceField:
          minLength: 1
          type: string
          description: Reference for the transaction
        3dsDone:
          type: boolean
          description: Whether 3ds was successfully enforced for the transaction
        nameOnCard:
          $ref: '#/components/schemas/ConsumerName'
      required:
        - method
    IBANDetails:
      title: IBANDetails
      type: object
      description: Standardized model for Bank Details
      example:
        method: IBAN
        BIC: DE761234561
        bankName: Merryl Lynch
        IBAN: '1234321'
        bankAddress:
          addressLines:
            - Klara-Franke Str 20
          postcode: '10557'
          city: Berlin
          state: Berlin
          country: Germany
          tags:
            - key: customKey
              value: customValue
      x-examples:
        example-1:
          method: IBAN
          bankIdentifierType: IBAN
          bankIdentifier: DE761234561
          bankName: Merryl Lynch
          accountNumber: '1234321'
          bankAddress:
            addressLines:
              - Klara-Franke Str 20
            postcode: '10557'
            city: Berlin
            state: Berlin
            country: Germany
            tags:
              - key: customKey
                value: customValue
      properties:
        method:
          type: string
          pattern: IBAN
          description: Classify the method of payment as "IBAN" for IBANDetails
        BIC:
          minLength: 1
          type: string
          description: 'Identifier for the bank. Can be routing number, BIK number, SWIFT code, BIC number etc.'
        bankName:
          minLength: 1
          type: string
          description: Name of the bank
        bankAddress:
          $ref: '#/components/schemas/Address'
        IBAN:
          type: string
          description: 'Account number of the user. Can be account number, IBAN number etc.'
        name:
          type: string
          description: Name of the bank account holder
        tags:
          $ref: '#/components/schemas/Tag'
        bankBranchCode:
          type: string
          description: "Branch code of the bank. In some countries, this can be the same as the bank's SWIFT code"
      required:
        - method
    WalletDetails:
      title: WalletDetails
      type: object
      description: Standardized model for a Generic wallet transaction
      x-examples: {}
      properties:
        method:
          type: string
          minLength: 1
          description: 'Type: WALLET'
          pattern: WALLET
        walletType:
          type: string
          description: 'Wallet type if there are various types of wallets belonging to the same user. E.g. Checking, savings, vault, different currency wallets etc.'
        walletId:
          minLength: 1
          type: string
          description: Unique ID of the wallet
        paymentChannel:
          type: string
          description: Payment Channel used through wallet
        name:
          type: string
          description: Name of the account holder for a specific wallet
        tags:
          $ref: '#/components/schemas/Tag'
        walletPhoneNumber:
          type: string
          description: 'Phone number associated with the wallet, if any'
      required:
        - method
        - walletType
    DeviceData:
      title: DeviceData
      type: object
      properties:
        batteryLevel:
          type: number
          description: Battery level of the device used for a transaction or event at a given timestamp
        deviceLatitude:
          type: number
          description: Device latitude at a give timestamp for an event or transaction
        deviceLongitude:
          type: number
          description: Device longitude at a give timestamp for an event or transaction
        ipAddress:
          minLength: 1
          type: string
          description: IP address of the device at a given timestamp for an event or transaction
        deviceIdentifier:
          minLength: 1
          type: string
          description: Device identifier number
        vpnUsed:
          type: boolean
          description: Whether VPN was used at a given timestamp for an event or transaction
        operatingSystem:
          minLength: 1
          type: string
          description: Operating system of the device at a given timestamp for an event or transaction
        deviceMaker:
          minLength: 1
          type: string
          description: The maker of the device at a given timestamp for an event or transaction
        deviceModel:
          minLength: 1
          type: string
          description: The model of the device at a given timestamp for an event or transaction
        deviceYear:
          minLength: 1
          type: string
          description: The year the device was manufactured at a given timestamp for an event or transaction
        appVersion:
          minLength: 1
          type: string
          description: The version of the app your user is using on their device at a given timestamp for an event or transaction
      description: Model for device data
    TransactionMonitoringResult:
      allOf:
        - type: object
          description: Model to convey the results of transaction monitoring
          properties:
            transactionId:
              type: string
              description: Transaction ID that the results pertain to
          required:
            - transactionId
        - $ref: '#/components/schemas/RulesResults'
      x-examples:
        example-1:
          transactionId: 7b80a539eea6e78acbd6d458e5971482
          executedRules:
            - ruleId: R-1a
              ruleName: Proof of funds for high value transactions
              ruleDescription: If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds
              ruleAction: BLOCK
              ruleHit: true
          hitRules:
            - ruleId: R-1a
              ruleName: Proof of funds for high value transactions
              ruleDescription: If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds
              ruleAction: BLOCK
    UserMonitoringResult:
      allOf:
        - type: object
          description: Model to convey the results of user monitoring
          properties:
            userId:
              type: string
              description: User ID that the results pertain to
          required:
            - userId
        - $ref: '#/components/schemas/RulesResults'
    RulesResults:
      title: RulesResults
      type: object
      example:
        transactionId: 7b80a539eea6e78acbd6d458e5971482
        executedRules:
          - ruleId: R-1a
            ruleName: Proof of funds for high value transactions
            ruleDescription: If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds
            ruleAction: BLOCK
            ruleHit: true
        hitRules:
          - ruleId: R-1a
            ruleName: Proof of funds for high value transactions
            ruleDescription: If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds
            ruleAction: BLOCK
      x-examples:
        example-1:
          transactionId: 7b80a539eea6e78acbd6d458e5971482
          executedRules:
            - ruleId: R-1a
              ruleName: Proof of funds for high value transactions
              ruleDescription: If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds
              ruleAction: BLOCK
              ruleHit: true
          hitRules:
            - ruleId: R-1a
              ruleName: Proof of funds for high value transactions
              ruleDescription: If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds
              ruleAction: BLOCK
      properties:
        executedRules:
          type: array
          description: Unique transaction identifier
          items:
            $ref: '#/components/schemas/ExecutedRulesResult'
        hitRules:
          type: array
          description: Unique transaction identifier
          items:
            $ref: '#/components/schemas/HitRulesResult'
      required:
        - executedRules
        - hitRules
    ExecutedRulesResult:
      allOf:
        - $ref: '#/components/schemas/HitRulesResult'
        - type: object
          properties:
            ruleHit:
              type: boolean
          required:
            - ruleHit
    HitRulesResult:
      title: HitRulesResult
      type: object
      example:
        ruleId: R-1a
        ruleName: Proof of funds for high value transactions
        ruleDescription: If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds
        ruleAction: BLOCK
        ruleHit: true
      description: Model for list of executed rules
      properties:
        ruleId:
          minLength: 1
          type: string
          description: Unique rule identifier
        ruleName:
          minLength: 1
          type: string
          description: Name of the rule
        ruleDescription:
          minLength: 1
          type: string
          description: Description of the rule
        ruleAction:
          $ref: '#/components/schemas/RuleAction'
      required:
        - ruleId
        - ruleName
        - ruleDescription
        - ruleAction
    FailedRulesResult:
      title: FailedRulesResult
      type: object
      example:
        ruleId: R-1a
        ruleName: Proof of funds for high value transactions
        ruleDescription: If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds
        failureException:
          exceptionName: MISSING_DATA
          exceptionDescription: Some data is missing
      description: Model for list of rules failed execution. It means rules could not be run
      properties:
        ruleId:
          minLength: 1
          type: string
          description: Unique rule identifier
        ruleName:
          minLength: 1
          type: string
          description: Name of the rule
        ruleDescription:
          minLength: 1
          type: string
          description: Description of the rule
        failureException:
          $ref: '#/components/schemas/RuleFailureException'
      required:
        - ruleId
        - ruleName
        - ruleDescription
        - failureException
    RuleFailureException:
      title: RuleFailureException
      required:
        - exceptionName
        - exceptionDescription
      type: object
      properties:
        exceptionName:
          minLength: 1
          type: string
          description: Unique rule identifier
        exceptionDescription:
          minLength: 1
          type: string
          description: Name of the rule
      example:
        exceptionName: MISSING_DATA
        exceptionDescription: Some data is missing
    RiskScoringResult:
      title: RiskScoringResult
      required:
        - kycRiskScore
        - actionRiskScore
      type: object
      properties:
        kycRiskScore:
          type: number
          description: Quantified KYC risk score
        actionRiskScore:
          type: number
          description: Quantified action risk score
        dynamicRiskScore:
          type: number
          description: Quantified dynamic risk score
      description: Model for results from Risk Scoring
      example:
        kycRiskScore: 87.5
        actionRiskScore: 58.33
        dynamicRiskScore: 73.92
    ConsumerName:
      title: ConsumerName
      required:
        - firstName
      type: object
      properties:
        firstName:
          minLength: 1
          type: string
          description: First name of the user
        middleName:
          minLength: 1
          type: string
          description: Middle name of the user
        lastName:
          minLength: 1
          type: string
          description: Last name of the user
      description: Model for a generic consumer name
      example:
        firstName: Baran
        middleName: Realblood
        lastName: Ozkan
    TransactionAmountDetails:
      title: TransactionAmountDetails
      type: object
      example:
        country: DE
        transactionAmount: 800
        transactionCurrency: EUR
      description: Model for transaction amount details
      properties:
        transactionAmount:
          type: number
          description: Amount of the transaction
        transactionCurrency:
          minLength: 1
          type: string
          description: Currency of the transaction
        country:
          minLength: 1
          type: string
          description: Country where the transaction occurred
      required:
        - transactionAmount
        - transactionCurrency
    Amount:
      title: Amount
      type: object
      example:
        amountValue: 800
        amountCurrency: GBP
      description: Model for amount
      properties:
        amountValue:
          type: number
          description: Numerical value of the transaction
        amountCurrency:
          minLength: 1
          type: string
          description: Currency of the transaction
      required:
        - amountValue
        - amountCurrency
    LegalEntity:
      title: LegalEntity
      type: object
      description: Model for business user legal entity details
      properties:
        companyGeneralDetails:
          $ref: '#/components/schemas/CompanyGeneralDetails'
        companyFinancialDetails:
          $ref: '#/components/schemas/CompanyFinancialDetails'
        companyRegistrationDetails:
          $ref: '#/components/schemas/CompanyRegistrationDetails'
        reasonForAccountOpening:
          type: array
          description: Reason for opening the account at financial institution
          items:
            type: string
        contactDetails:
          $ref: '#/components/schemas/ContactDetails'
      required:
        - companyGeneralDetails
    ContactDetails:
      title: ContactDetails
      type: object
      description: Model for business user contact information details
      properties:
        emailIds:
          type: array
          description: Email addresses of the contacts for a given business customer
          items:
            type: string
        contactNumbers:
          type: array
          description: Phone numbers to contact a given business customer
          items:
            type: string
        faxNumbers:
          type: array
          description: Fax numbers to contact a business customer
          items:
            type: string
        websites:
          type: array
          description: Website of the company
          items:
            type: string
        addresses:
          type: array
          description: Address(es) of the company
          items:
            $ref: '#/components/schemas/Address'
    CompanyFinancialDetails:
      title: CompanyFinancialDetails
      type: object
      example:
        expectedTransactionAmountPerMonth:
          amountValue: 800
          amountCurrency: GBP
        expectedTurnoverPerMonth:
          amountValue: 8000
          amountCurrency: USD
      description: Model for business user company financial details
      properties:
        expectedTransactionAmountPerMonth:
          $ref: '#/components/schemas/Amount'
        expectedTurnoverPerMonth:
          $ref: '#/components/schemas/Amount'
        tags:
          type: array
          description: Additional information that can be added via tags
          items:
            $ref: '#/components/schemas/Tag'
    UserDetails:
      title: UserDetails
      type: object
      example:
        name:
          firstName: Baran
          middleName: Realblood
          lastName: Ozkan
        dateOfBirth: '1991-01-01'
        countryOfResidence: US
        countryOfNationality: DE
      description: Model for consumer user personal details
      properties:
        name:
          $ref: '#/components/schemas/ConsumerName'
        dateOfBirth:
          type: string
          pattern: '^(\d{4}-\d{2}-\d{2})*$'
          description: Date of birth of the user
        countryOfResidence:
          minLength: 1
          type: string
          description: Country of residence of the user
        countryOfNationality:
          minLength: 1
          type: string
          description: Country of nationality of the user
      required:
        - name
    CompanyGeneralDetails:
      title: CompanyGeneralDetails
      type: object
      example:
        legalName: Ozkan Hazelnut Export JSC
        businessIndustry:
          - Farming
        mainProductsServicesSold:
          - Hazelnut
      description: Model for business user company general details
      properties:
        legalName:
          minLength: 1
          type: string
          description: Legal name of the company
        businessIndustry:
          type: array
          description: The industry the business operates in for a business customer
          items:
            type: string
        mainProductsServicesSold:
          type: array
          description: The key products and services provided by the company
          items:
            type: string
        tags:
          type: array
          description: Additional information that can be added via tags
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - legalName
    CompanyRegistrationDetails:
      title: CompanyRegistrationDetails
      type: object
      example:
        registrationIdentifier: PSJ554342
        registrationCountry: DE
      description: Model for business user company registration details
      properties:
        registrationIdentifier:
          minLength: 1
          type: string
          description: Commercial registry registration number for the company in its registration country
        registrationCountry:
          minLength: 1
          type: string
          description: Country of registration for the company
        tag:
          type: array
          description: Additional information that can be added via tags
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - registrationIdentifier
        - registrationCountry
    Business:
      title: Business
      type: object
      example:
        createdTimestamp: 1641654664000
        userId: 96647cfd9e8fe66ee0f3362e011e34e8
        legalEntity:
          companyGeneralDetails:
            legalName: Ozkan Hazelnut Export JSC
            businessIndustry:
              - Farming
            mainProductsServicesSold:
              - Hazelnut
          companyFinancialDetails:
            expectedTransactionAmountPerMonth:
              amountValue: 800
              amountCurrency: GBP
            expectedTurnoverPerMonth:
              amountValue: 8000
              amountCurrency: USD
          companyRegistrationDetails:
            registrationIdentifier: PSJ554342
            registrationCountry: DE
          reasonForAccountOpening:
            - string
          contactDetails:
            addresses:
              - addressLines:
                  - Klara-Franke Str 20
                postcode: '10557'
                city: Berlin
                state: Berlin
                country: Germany
                tags:
                  - key: customKey
                    value: customValue
        shareHolders:
          - generalDetails:
              name:
                firstName: Baran
                middleName: Realblood
                lastName: Ozkan
              dateOfBirth: '1991-01-01'
              countryOfResidence: US
              countryOfNationality: DE
            legalDocuments:
              - documentType: passport
                documentNumber: Z9431P
                documentIssuedDate: 1639939034
                documentExpirationDate: 1839939034
                documentIssuedCountry: DE
                tags:
                  - key: customerType
                    value: wallet
            contactDetails:
              emailIds:
                - baran@flagright.com
              contactNumbers:
                - +371 123132
              websites:
                - flagright.com
              addresses:
                - addressLines:
                    - Klara-Franke Str 20
                  postcode: '10557'
                  city: Berlin
                  state: Berlin
                  country: Germany
                  tags:
                    - key: customKey
                      value: customValue
            tags:
              - key: customKey
                value: customValue
        directors:
          - generalDetails:
              name:
                firstName: Baran
                middleName: Realblood
                lastName: Ozkan
              dateOfBirth: '1991-01-01'
              countryOfResidence: US
              countryOfNationality: DE
            legalDocuments:
              - documentType: passport
                documentNumber: Z9431P
                documentIssuedDate: 1639939034
                documentExpirationDate: 1839939034
                documentIssuedCountry: DE
                tags:
                  - key: customerType
                    value: wallet
            contactDetails:
              emailIds:
                - baran@flagright.com
              contactNumbers:
                - +371 123132
              websites:
                - flagright.com
              addresses:
                - addressLines:
                    - Klara-Franke Str 20
                  postcode: '10557'
                  city: Berlin
                  state: Berlin
                  country: Germany
                  tags:
                    - key: customKey
                      value: customValue
            tags:
              - key: customKey
                value: customValue
        tags:
          - key: customKey
            value: customValue
      x-examples:
        example-1:
          userId: 96647cfd9e8fe66ee0f3362e011e34e8
          legalEntity:
            companyGeneralDetails:
              legalName: Ozkan Hazelnut Export JSC
              businessIndustry:
                - Farming
              mainProductsServicesSold:
                - Hazelnut
            companyFinancialDetails:
              expectedTransactionAmountPerMonth:
                amountValue: 800
                amountCurrency: GBP
              expectedTurnoverPerMonth:
                amountValue: 8000
                amountCurrency: USD
            companyRegistrationDetails:
              registrationIdentifier: PSJ554342
              registrationCountry: DE
            reasonForAccountOpening:
              - string
            contactDetails:
              addresses:
                - addressLines:
                    - Klara-Franke Str 20
                  postcode: '10557'
                  city: Berlin
                  state: Berlin
                  country: Germany
                  tags:
                    - key: customKey
                      value: customValue
          shareHolders:
            - generalDetails:
                name:
                  firstName: Baran
                  middleName: Realblood
                  lastName: Ozkan
                dateOfBirth:
                  day: 1
                  month: 1
                  year: 1990
                countryOfResidence: US
                countryOfNationality: DE
              legalDocuments:
                - documentType: passport
                  documentNumber: Z9431P
                  documentIssuedDate: 1639939034
                  documentExpirationDate: 1839939034
                  documentIssuedCountry: DE
                  tags:
                    - key: customerType
                      value: wallet
              contactDetails:
                emailIds:
                  - baran@flagright.com
                contactNumbers:
                  - +371 123132
                websites:
                  - flagright.com
                addresses:
                  - addressLines:
                      - Klara-Franke Str 20
                    postcode: '10557'
                    city: Berlin
                    state: Berlin
                    country: Germany
                    tags:
                      - key: customKey
                        value: customValue
              tags:
                - key: customKey
                  value: customValue
          directors:
            - generalDetails:
                name:
                  firstName: Baran
                  middleName: Realblood
                  lastName: Ozkan
                dateOfBirth:
                  day: 1
                  month: 1
                  year: 1990
                countryOfResidence: US
                countryOfNationality: DE
              legalDocuments:
                - documentType: passport
                  documentNumber: Z9431P
                  documentIssuedDate: 1639939034
                  documentExpirationDate: 1839939034
                  documentIssuedCountry: DE
                  tags:
                    - key: customerType
                      value: wallet
              contactDetails:
                emailIds:
                  - baran@flagright.com
                contactNumbers:
                  - +371 123132
                websites:
                  - flagright.com
                addresses:
                  - addressLines:
                      - Klara-Franke Str 20
                    postcode: '10557'
                    city: Berlin
                    state: Berlin
                    country: Germany
                    tags:
                      - key: customKey
                        value: customValue
              tags:
                - key: customKey
                  value: customValue
          tags:
            - key: customKey
              value: customValue
      description: Model for a business user
      properties:
        userId:
          minLength: 1
          type: string
          description: Unique user ID for the user
        legalEntity:
          $ref: '#/components/schemas/LegalEntity'
        createdTimestamp:
          type: number
          minimum: 1262300400000
          description: Timestamp when the user was created
        shareHolders:
          type: array
          description: Shareholders (beneficiaries) of the company that hold at least 25% ownership. Can be another company or an individual
          items:
            $ref: '#/components/schemas/Person'
        directors:
          type: array
          description: Director(s) of the company. Must be at least one
          items:
            $ref: '#/components/schemas/Person'
        tags:
          type: array
          description: Additional information that can be added via tags
          items:
            $ref: '#/components/schemas/Tag'
        transactionLimits:
          $ref: '#/components/schemas/TransactionLimits'
      required:
        - userId
        - legalEntity
        - createdTimestamp
    BusinessUsersResponse:
      title: BusinessUsersResponse
      type: object
      description: Model for business user risk score response
      properties:
        userId:
          minLength: 1
          type: string
          description: user ID the risk score pertains to
        userRiskScoreDetails:
          $ref: '#/components/schemas/RiskScoringResult'
      required:
        - userId
    ConsumerUsersResponse:
      title: ConsumerUsersResponse
      type: object
      x-examples:
        example-1:
          userId: string
          userRiskScoreDetails:
            kycRiskScore: 87.5
            actionRiskScore: 58.33
            dynamicRiskScore: 73.92
      description: Model for consumer user risk score response
      properties:
        userId:
          minLength: 1
          type: string
          description: user ID the risk score pertains to
        userRiskScoreDetails:
          $ref: '#/components/schemas/RiskScoringResult'
      required:
        - userId
    ACHDetails:
      description: Model for ACH payment method
      type: object
      x-examples:
        example-2:
          method: ACH
          routingNumber: '1231241'
          accountNumber: '543456675'
          bankName: Wells Fargo
          name:
            firstName: Baran
            middleName: Realblood
            lastName: Ozkan
          bankAddress:
            addressLines:
              - 1201 N Monroe St
            postcode: '32303'
            city: Tallahassee
            state: FL
            country: United States of America
            tags:
              - key: userType
                value: customValue
      title: ACHDetails
      properties:
        method:
          type: string
          pattern: ACH
          description: Classify the method of payment as "ACH" for ACHDetails
        routingNumber:
          type: string
          minLength: 1
          description: Routing number of the bank
        accountNumber:
          type: string
          minLength: 1
          description: Bank account number of the individual
        bankName:
          type: string
          minLength: 1
          description: Name of the bank
        name:
          type: string
          description: Name of the account holder
        bankAddress:
          $ref: '#/components/schemas/Address'
        beneficiaryName:
          type: string
          description: Beneficiary name of the account
      required:
        - method
        - routingNumber
        - accountNumber
    SWIFTDetails:
      description: Model for SWIFT payment method
      type: object
      x-examples: {}
      title: SWIFTDetails
      properties:
        method:
          type: string
          pattern: SWIFT
          description: Classify the method of payment as "SWIFT" for SWIFTDetails
        swiftCode:
          type: string
          minLength: 1
          description: SWIFT code of the financial institution
        accountNumber:
          type: string
          minLength: 1
          description: Account number
        accountType:
          type: string
          description: 'Account type. E.g. Checking, Savings etc.'
        bankName:
          type: string
          minLength: 1
          description: Name of the bank
        name:
          type: string
          description: Name of the account holder
        bankAddress:
          $ref: '#/components/schemas/Address'
        specialInstructions:
          type: string
          description: Special instructions if any
      required:
        - method
    GenericBankAccountDetails:
      description: Model for any generic bank account
      type: object
      x-examples: {}
      title: GenericBankAccountDetails
      properties:
        method:
          type: string
          pattern: GENERIC_BANK_ACCOUNT
          description: Classify the method of payment as "GENERIC_BANK_ACCOUNT" for GenericBankAccountDetails
        accountNumber:
          type: string
          minLength: 1
          description: Bank account number
        accountType:
          type: string
          description: 'Bank account type. E.g. Checking, Savings etc.'
        bankName:
          type: string
          minLength: 1
          description: Name of the bank
        bankCode:
          type: string
          description: "Unique identifier of the bank. In some countries, this can be the same as the bank's SWIFT code"
        name:
          type: string
          description: Name of the account holder
        bankAddress:
          $ref: '#/components/schemas/Address'
        specialInstructions:
          type: string
          description: Special instructions to be specified if any
      required:
        - method
    UPIDetails:
      description: Model for UPI payment method
      type: object
      x-examples:
        example-1:
          method: UPI
          upiID: user@okhdfcbank
          bankProvider: HDFC Bank
          interfaceProvider: PhonePe
      title: UPIDetails
      properties:
        method:
          type: string
          pattern: UPI
          description: Classify the method of payment as "UPI" for UPIDetails
        upiID:
          type: string
          minLength: 1
          description: UPI Id number
        bankProvider:
          type: string
          minLength: 1
          description: Bank provider name
        interfaceProvider:
          type: string
          minLength: 1
          description: Interface provider name
        name:
          type: string
          description: Name of the account holder
      required:
        - method
        - upiID
    TransactionLimits:
      title: TransactionLimits
      type: object
      x-examples:
        example-1:
          maximumDailyTransactionLimit:
            amountValue: 800
            amountCurrency: EUR
          maximumWeeklyTransactionLimit:
            amountValue: 800
            amountCurrency: GBP
          maximumMonthlyTransactionLimit:
            amountValue: 800
            amountCurrency: EUR
          maximumQuarterlyTransactionLimit:
            amountValue: 800
            amountCurrency: GBP
          maximumYearlyTransactionLimit:
            amountValue: 800
            amountCurrency: GBP
      description: Model for transaction limits for a given user
      properties:
        maximumDailyTransactionLimit:
          $ref: '#/components/schemas/Amount'
        maximumWeeklyTransactionLimit:
          $ref: '#/components/schemas/Amount'
        maximumMonthlyTransactionLimit:
          $ref: '#/components/schemas/Amount'
        maximumQuarterlyTransactionLimit:
          $ref: '#/components/schemas/Amount'
        maximumTransactionLimit:
          $ref: '#/components/schemas/Amount'
        maximumYearlyTransactionLimit:
          $ref: '#/components/schemas/Amount'
    RuleAction:
      type: string
      title: RuleAction
      enum:
        - ALLOW
        - WHITELIST
        - FLAG
        - BLOCK
        - SUSPEND
      x-examples:
        example-1: ALLOW
      description: Model for rule action if a rule is hit. This is returned in the API response and can be configured on Console by operational accounts like a Compliance Analyst
    InternalUser:
      description: Internal user- employees
      type: object
      x-examples:
        example-1:
          employeeID: 8cdeb166147a406b957dd9e709907b89
          employeeLevel: L4
          employeeDesignation: Senior Analyst
          employeeName: Baran Ozkan
          employeeNationality: IN
      title: InternalUser
      properties:
        employeeID:
          type: string
          minLength: 1
          description: Employee ID number
        employeeLevel:
          type: string
          minLength: 1
          description: Employee seniority level
        employeeDesignation:
          type: string
          minLength: 1
          description: Employee designation or title
        employeeName:
          type: string
          minLength: 1
          description: Employee name
        employeeNationality:
          type: string
          minLength: 1
          description: Employee nationality
      required:
        - employeeID
    TransactionEvent:
      description: Model for transaction-related events
      type: object
      x-examples:
        example-1:
          transactionState: CREATED
          timestamp: 1262300441294
          transactionId: 443dea26147a406b957d9ee3a1247b11
          eventId: aaeeb166147a406b957dd9147a406b957
          eventDescription: Transaction created
          employeeId: 8cdeb166147a406b957dd9e709907b89
          metaData:
            batteryLevel: 76.3
            deviceLatitude: 13.009711
            deviceLongitude: 76.102898
            ipAddress: 79.144.2.20
            vpnUsed: true
      properties:
        transactionState:
          $ref: '#/components/schemas/TransactionState'
        timestamp:
          type: number
          minimum: 1262300400000
          description: Timestamp of the event
        transactionId:
          type: string
          minLength: 1
          description: Transaction ID the event pertains to
        eventId:
          type: string
          description: Unique event ID
        eventDescription:
          type: string
          description: Event description
        employeeId:
          type: string
          minLength: 1
          description: Employee ID the event pertains to. E.g. Employee login event on behalf of an end user
        metaData:
          $ref: '#/components/schemas/DeviceData'
        updatedTransactionAttributes:
          $ref: '#/components/schemas/Transaction'
      required:
        - transactionState
        - timestamp
        - transactionId
    CaseManagementEvent:
      type: object
      x-examples:
        example-1:
          caseStatus: Unsuspended
          timestamp: 1262300441294
          transactionId: 443dea26147a406b957d9ee3a1247b11
          eventId: aaeeb166147a406b957dd9147a406b957
          eventDescription: Case Unsuspended
          employeeId: 8cdeb166147a406b957dd9e709907b89
      title: CaseManagementEvent
      description: Model for case management events
      properties:
        caseStatus:
          type: string
          minLength: 1
          enum:
            - CLOSED
            - HIT
          description: 'Status of a case. E.g. Open, Closed etc.'
        timestamp:
          type: number
          minimum: 1262300400000
          description: Timestamp of the event
        caseStatusReason:
          type: string
          enum:
            - FALSE_POSITIVE
            - INVESTIGATION_COMPLETED
            - DOCUMENTS_COLLECTED
            - OTHER
          description: 'Case status reason. E.g. Closed & False Positive, Closed & Investigation Completed etc.'
        transactionId:
          type: string
          minLength: 1
          description: Transaction ID the case pertains to
        userId:
          type: string
          description: User ID the case pertains to
        eventId:
          type: string
          description: Event ID the case pertains to
        caseStatusReasonDescription:
          type: string
          description: Case status reason description
        employeeId:
          type: string
          minLength: 1
          description: Employee ID the case pertains to
      required:
        - caseStatus
        - timestamp
        - caseStatusReason
    UserEvent:
      description: Model for user-related events
      type: object
      x-examples: {}
      properties:
        type:
          type: string
          minLength: 1
          enum:
            - LOGGED_IN
          description: 'Type of events. E.g. Onboarding, Checkout etc.'
        timestamp:
          type: number
          description: Timestamp of the event
        userId:
          type: string
          minLength: 1
          description: User ID the event pertains to
        eventId:
          type: string
          description: Unique event ID
        eventDescription:
          type: string
          description: Event description
        metaData:
          $ref: '#/components/schemas/DeviceData'
      required:
        - type
        - timestamp
        - userId
    Date:
      title: Date
      type: object
      description: Model for date
      properties:
        day:
          type: number
          description: Day of date
        month:
          type: number
          description: Month of date
        year:
          type: number
          description: Year of date
      required:
        - day
        - month
        - year
    TransactionState:
      type: string
      title: TransactionState
      enum:
        - CREATED
        - PROCESSING
        - SENT
        - EXPIRED
        - DECLINED
        - SUSPENDED
        - REFUNDED
        - SUCCESSFUL
      minLength: 1
      description: 'Model for transaction states. E.g. Processing, Refunded, Successful etc.'
  securitySchemes:
    x-api-key:
      name: x-api-key
      type: apiKey
      in: header
      description: API keys are used to authenticate the requests.
tags: []
