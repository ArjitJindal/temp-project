openapi: 3.0.0
info:
  title: Tarpon Console API
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
paths:
  /apikey:
    parameters: []
    post:
      summary: Tarpon API Key - Create
      operationId: post-apikey
      responses:
        '200':
          description: New API Key
      parameters:
        - schema:
            type: string
          in: query
          name: tenantId
          description: Tenant ID
        - schema:
            type: string
          in: query
          name: usagePlanId
          description: AWS Gateway usage plan ID
      description: Generate a new Tarpon API key for a tenant
  /rules:
    get:
      summary: Rules - List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rule'
              examples: {}
      operationId: get-rules
      description: ''
    parameters: []
    post:
      summary: Rules - Create
      operationId: post-rules
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
  '/rules/{ruleId}':
    parameters:
      - schema:
          type: string
        name: ruleId
        in: path
        required: true
    put:
      summary: Rule - Update
      operationId: put-rule-ruleId
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
    delete:
      summary: Rule - Delete
      operationId: delete-rules-ruleId
      responses:
        '200':
          description: OK
  /rule_instances:
    post:
      summary: Rule Instance - Create
      operationId: post-rule_instances
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleInstance'
              examples:
                example-1:
                  value:
                    id: string
                    ruleId: string
                    parameters: {}
                    status: ACTIVE
                    createdAt: 0
                    updatedAt: 0
                    runCount: 0
                    hitCount: 0
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleInstance'
    get:
      summary: Rule Instance - List
      operationId: get-rule_instances
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RuleInstance'
  '/rule_instances/{ruleInstanceId}':
    parameters:
      - schema:
          type: string
        name: ruleInstanceId
        in: path
        required: true
    delete:
      summary: Rule Instance - Delete
      operationId: delete-rule_instances-ruleInstanceId
      responses:
        '200':
          description: OK
    put:
      summary: Rule Instance - Update
      operationId: put-rule_instances-ruleInstanceId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleInstance'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleInstance'
  /import:
    parameters: []
    post:
      summary: Import - Start to Import
      operationId: post-import
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportResponse'
              examples:
                example-1:
                  value:
                    importedTransactions: 100
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportRequest'
            examples:
              example-1:
                value:
                  type: TRANSACTION
                  format: flagright
                  s3Key: s3-key-in-a-bucket
  /files/getPresignedUrl:
    parameters: []
    post:
      summary: Files - Get Presigned URL
      operationId: post-getPresignedUrl
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresignedUrlResponse'
              examples: {}
      description: Get a presigned URL for uploading a file
  /lists:
    post:
      summary: List Import
      operationId: post-lists
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListImportRequest'
  /transactions:
    get:
      summary: Transaction - List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsListResponse'
              examples: {}
      operationId: get-transactions-list
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          required: true
        - schema:
            type: number
          in: query
          name: skip
          required: true
        - schema:
            type: number
          in: query
          name: beforeTimestamp
          required: true
  '/transactions/{transactionId}':
    parameters:
      - schema:
          type: string
        name: transactionId
        in: path
        required: true
    post:
      summary: Transaction - Update
      operationId: post-transactions-transactionId
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionUpdateRequest'
  /user/transactions:
    get:
      summary: Transaction Per User - List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsListResponse'
              examples: {}
      operationId: get-transactions-per-user-list
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          required: true
        - schema:
            type: number
          in: query
          name: skip
          required: true
        - schema:
            type: number
          in: query
          name: beforeTimestamp
          required: true
        - schema:
            type: string
          in: query
          name: userId
          required: true
    parameters: []
  /consumer/users:
    get:
      summary: Consumer Users - List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerUsersListResponse'
              examples: {}
      operationId: get-consumer-users-list
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          required: true
        - schema:
            type: number
          in: query
          name: skip
          required: true
        - schema:
            type: number
          in: query
          name: beforeTimestamp
          required: true
    parameters: []
  /business/users:
    get:
      summary: Business Users - List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessUsersListResponse'
              examples: {}
      operationId: get-business-users-list
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          required: true
        - schema:
            type: number
          in: query
          name: skip
          required: true
        - schema:
            type: number
          in: query
          name: beforeTimestamp
          required: true
    parameters: []
  /dashboard_stats/transactions:
    get:
      summary: DashboardStats - Transactions
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardStatsTransactionsCount'
              examples: {}
      operationId: get-dashboard-stats-transactions
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: category
          required: true
        - schema:
            type: number
          in: query
          name: timeframe
          required: true
        - schema:
            type: string
          in: query
          name: fromTimestamp
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
    parameters: []
  '/transactions/{transactionId}/comments':
    post:
      summary: Create a Transaction Comment
      operationId: post-transactions-comments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
    parameters:
      - schema:
          type: string
        name: transactionId
        in: path
        required: true
  '/transactions/{transactionId}/comments/{commentId}':
    parameters:
      - schema:
          type: string
        name: transactionId
        in: path
        required: true
      - schema:
          type: string
        name: commentId
        in: path
        required: true
    delete:
      summary: ''
      operationId: delete-transactions-transactionId-comments-commentId
      responses:
        '200':
          description: OK
  /accounts:
    get:
      summary: Account - List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
      operationId: get-accounts
components:
  schemas:
    Rule:
      title: Rule
      type: object
      x-examples:
        example-1:
          id: R-1
          name: Rule name
          description: Rule description
          parametersSchema:
            type: object
            properties:
              threshold:
                type: number
                title: Threshold
          defaultParameters:
            threshold: 3
          defaultAction: FLAG
          ruleImplementationFilename: code-filename
          createdAt: 0
          updatedAt: 0
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        parametersSchema:
          type: object
        defaultParameters:
          type: object
        defaultAction:
          $ref: '#/components/schemas/RuleAction'
        ruleImplementationFilename:
          type: string
        createdAt:
          type: number
        updatedAt:
          type: number
      required:
        - name
        - description
        - parametersSchema
        - defaultParameters
        - defaultAction
        - ruleImplementationFilename
    RuleInstance:
      title: RuleInstance
      type: object
      properties:
        id:
          type: string
        ruleId:
          type: string
        parameters:
          type: object
        action:
          $ref: '#/components/schemas/RuleAction'
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        createdAt:
          type: number
        updatedAt:
          type: number
        runCount:
          type: number
        hitCount:
          type: number
      required:
        - ruleId
        - parameters
        - action
    RuleAction:
      type: string
      title: RuleAction
      enum:
        - FLAG
        - BLOCK
        - WHITELIST
        - ALLOW
        - SUSPEND
    ImportRequest:
      title: ImportRequest
      type: object
      properties:
        type:
          type: string
          enum:
            - TRANSACTION
            - USER
            - BUSINESS
        format:
          type: string
          enum:
            - flagright
            - custom
        s3Key:
          type: string
      required:
        - type
        - format
        - s3Key
    PresignedUrlResponse:
      title: PresignedUrlResponse
      type: object
      properties:
        presignedUrl:
          type: string
        s3Key:
          type: string
      required:
        - presignedUrl
        - s3Key
    ListImportRequest:
      title: ListImportRequest
      type: object
      properties:
        listName:
          type: string
        indexName:
          type: string
        data:
          type: string
      required:
        - listName
        - indexName
        - data
    ImportResponse:
      title: ImportResponse
      type: object
      properties:
        importedCount:
          type: number
      required:
        - importedCount
    TransactionsListResponse:
      title: TransactionsListResponse
      type: object
      description: ''
      x-examples: {}
      properties:
        total:
          type: number
        data:
          type: array
          items:
            $ref: '#/components/schemas/TransactionCaseManagement'
      required:
        - total
        - data
    TransactionCaseManagement:
      allOf:
        - $ref: >-
            https://stoplight.io/api/v1/projects/flagright/flagright-api/nodes/reference/Flagright-API.yaml/components/schemas/TransactionWithRulesResult
        - type: object
          properties:
            comments:
              type: array
              items:
                $ref: '#/components/schemas/Comment'
            assignments:
              type: array
              items:
                $ref: '#/components/schemas/Assignment'
            status:
              $ref: '#/components/schemas/RuleAction'
            statusChanges:
              type: array
              items:
                $ref: '#/components/schemas/TransactionStatusChange'
          required:
            - status
      title: TransactionCaseManagement
    ConsumerUsersListResponse:
      title: ConsumerUsersListResponse
      type: object
      properties:
        total:
          type: number
        data:
          type: array
          items:
            $ref: >-
              https://stoplight.io/api/v1/projects/flagright/flagright-api/nodes/reference/Flagright-API.yaml/components/schemas/User
      required:
        - total
        - data
    BusinessUsersListResponse:
      title: BusinessUsersListResponse
      type: object
      properties:
        total:
          type: number
        data:
          type: array
          items:
            $ref: >-
              https://stoplight.io/api/v1/projects/flagright/flagright-api/nodes/reference/Flagright-API.yaml/components/schemas/Business
      required:
        - total
        - data
    DashboardStatsTransactionsCount:
      type: array
      description: ''
      minItems: 1
      uniqueItems: true
      x-examples:
        example-1:
          - date: '2020-01-04'
            totalTransactions: 2344
            flaggedTransactions: 121
            stoppedTransactions: 33
      items:
        type: object
        properties:
          date:
            type: string
            minLength: 1
          totalTransactions:
            type: number
          flaggedTransactions:
            type: number
          stoppedTransactions:
            type: number
        required:
          - date
          - totalTransactions
      title: DashboardStatsTransactionsCount
    Comment:
      title: Comment
      type: object
      properties:
        id:
          type: string
        body:
          type: string
        userId:
          type: string
        files:
          type: array
          items:
            $ref: '#/components/schemas/FileInfo'
        createdAt:
          type: number
        updatedAt:
          type: number
      required:
        - body
    FileInfo:
      title: FileInfo
      type: object
      properties:
        s3Key:
          type: string
        bucket:
          type: string
        filename:
          type: string
        size:
          type: number
        downloadLink:
          type: string
      required:
        - s3Key
        - filename
        - size
    Assignment:
      title: Assignment
      type: object
      properties:
        assigneeUserId:
          type: string
        assignedByUserId:
          type: string
        timestamp:
          type: number
      required:
        - assigneeUserId
        - assignedByUserId
        - timestamp
    TransactionStatusChange:
      title: TransactionStatusChange
      type: object
      properties:
        userId:
          type: string
        status:
          $ref: '#/components/schemas/RuleAction'
        timestamp:
          type: number
      required:
        - userId
        - status
        - timestamp
    TransactionUpdateRequest:
      title: TransactionUpdateRequest
      type: object
      properties:
        status:
          $ref: '#/components/schemas/RuleAction'
        assignments:
          type: array
          items:
            $ref: '#/components/schemas/Assignment'
  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
