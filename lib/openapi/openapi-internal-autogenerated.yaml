openapi: 3.0.0
info:
  title: Tarpon Console API
  version: '1.0'
servers:
  - url: http://localhost:3000
paths:
  /apikey:
    parameters: []
    post:
      summary: Tarpon API Key - Create
      operationId: post-apikey
      responses:
        '200':
          description: New API Key
      parameters:
        - schema:
            type: string
          in: query
          name: tenantId
          description: Tenant ID
        - schema:
            type: string
          in: query
          name: usagePlanId
          description: AWS Gateway usage plan ID
      description: Generate a new Tarpon API key for a tenant
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponApiKeyGeneratorFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      x-amazon-apigateway-auth:
        type: AWS_IAM
      security:
        - sigv4: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /rules:
    get:
      summary: Rules - List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rule'
              examples: {}
      operationId: get-rules
      description: ''
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponRuleTemplateFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    parameters: []
    post:
      summary: Rules - Create
      operationId: post-rules
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponRuleTemplateFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /iam/rules:
    parameters: []
    post:
      summary: Rules - Create
      operationId: post-iam-rules
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
      parameters:
        - schema:
            type: string
          in: query
          name: tenantId
          description: Tenant ID
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponRuleTemplateFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      x-amazon-apigateway-auth:
        type: AWS_IAM
      security:
        - sigv4: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /rule_implementations:
    get:
      summary: Rule Implementations - List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RuleImplementation'
              examples: {}
            application/xml:
              schema:
                type: object
                properties: {}
      operationId: get-rule-implementations
      description: ''
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponRuleTemplateFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    parameters: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /rules/{ruleId}:
    parameters:
      - schema:
          type: string
        name: ruleId
        in: path
        required: true
    put:
      summary: Rule - Update
      operationId: put-rule-ruleId
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponRuleTemplateFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    delete:
      summary: Rule - Delete
      operationId: delete-rules-ruleId
      responses:
        '200':
          description: OK
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponRuleTemplateFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /rule_instances:
    post:
      summary: Rule Instance - Create
      operationId: post-rule_instances
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleInstance'
              examples:
                example-1:
                  value:
                    id: string
                    ruleId: string
                    action: FLAG
                    parameters: {}
                    status: ACTIVE
                    createdAt: 0
                    updatedAt: 0
                    runCount: 0
                    hitCount: 0
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleInstance'
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponRuleInstanceFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    get:
      summary: Rule Instance - List
      operationId: get-rule_instances
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RuleInstance'
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponRuleInstanceFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /iam/rule_instances:
    post:
      summary: Rule Instance - Create
      operationId: post-iam-rule_instances
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleInstance'
              examples:
                example-1:
                  value:
                    id: string
                    ruleId: string
                    action: FLAG
                    parameters: {}
                    status: ACTIVE
                    createdAt: 0
                    updatedAt: 0
                    runCount: 0
                    hitCount: 0
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleInstance'
      parameters:
        - schema:
            type: string
          in: query
          name: tenantId
          description: Tenant ID
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponRuleInstanceFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      x-amazon-apigateway-auth:
        type: AWS_IAM
      security:
        - sigv4: []
    parameters: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /rule_instances/{ruleInstanceId}:
    parameters:
      - schema:
          type: string
        name: ruleInstanceId
        in: path
        required: true
    delete:
      summary: Rule Instance - Delete
      operationId: delete-rule_instances-ruleInstanceId
      responses:
        '200':
          description: OK
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponRuleInstanceFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    put:
      summary: Rule Instance - Update
      operationId: put-rule_instances-ruleInstanceId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleInstance'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleInstance'
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponRuleInstanceFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /import:
    parameters: []
    post:
      summary: Import - Start to Import
      operationId: post-import
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportResponse'
              examples:
                example-1:
                  value:
                    importedCount: 100
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportRequest'
            examples:
              example-1:
                value:
                  type: TRANSACTION
                  format: flagright
                  filename: filename
                  s3Key: s3-key-in-a-bucket
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponFileImportFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /import/{importId}:
    parameters:
      - schema:
          type: string
        name: importId
        in: path
        required: true
    get:
      summary: Import - Get Import Info
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileImport'
      operationId: get-import-importId
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponFileImportFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /files/getPresignedUrl:
    parameters: []
    post:
      summary: Files - Get Presigned URL
      operationId: post-getPresignedUrl
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresignedUrlResponse'
              examples: {}
      description: Get a presigned URL for uploading a file
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponGetPresignedUrlFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /lists:
    post:
      summary: List Import
      operationId: post-lists
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListImportRequest'
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponListImporterFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /transactions:
    get:
      summary: Transaction - List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsListResponse'
              examples: {}
      operationId: get-transactions-list
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          required: true
        - schema:
            type: number
          in: query
          name: skip
          required: true
        - schema:
            type: number
          in: query
          name: afterTimestamp
        - schema:
            type: number
          in: query
          name: beforeTimestamp
          required: true
        - schema:
            type: string
          in: query
          name: filterId
        - schema:
            $ref: '#/components/schemas/RuleAction'
          in: query
          name: filterOutStatus
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterRulesExecuted
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterRulesHit
        - schema:
            type: string
          in: query
          name: transactionType
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterOriginCurrencies
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterDestinationCurrencies
        - schema:
            type: string
          in: query
          name: sortField
        - schema:
            type: string
          in: query
          name: sortOrder
        - schema:
            type: string
          in: query
          name: filterOriginUserId
        - schema:
            type: string
          in: query
          name: filterDestinationUserId
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponTransactionsViewFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /transactions/export:
    get:
      summary: Transaction - Export
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  downloadUrl:
                    type: string
                required:
                  - downloadUrl
              examples: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                example-1:
                  value: Too larget dataset
      operationId: get-transactions-list-export
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          required: true
        - schema:
            type: number
          in: query
          name: skip
          required: true
        - schema:
            type: number
          in: query
          name: afterTimestamp
        - schema:
            type: number
          in: query
          name: beforeTimestamp
          required: true
        - schema:
            type: string
          in: query
          name: filterId
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterRulesExecuted
        - schema:
            type: array
            items:
              type: string
          in: query
          name: filterRulesHit
        - schema:
            $ref: '#/components/schemas/RuleAction'
          in: query
          name: filterOutStatus
        - schema:
            type: string
          in: query
          name: sortField
        - schema:
            type: string
          in: query
          name: sortOrder
      x-internal: false
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponTransactionsViewFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    parameters: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /transactions/{transactionId}:
    parameters:
      - schema:
          type: string
        name: transactionId
        in: path
        required: true
    post:
      summary: Transaction - Update
      operationId: post-transactions-transactionId
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionUpdateRequest'
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponTransactionsViewFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    get:
      summary: Transaction - Get
      operationId: get-transaction
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCaseManagement'
        '404':
          description: Not Found
      description: ''
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponTransactionsViewFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /consumer/users:
    get:
      summary: Consumer Users - List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerUsersListResponse'
              examples: {}
      operationId: get-consumer-users-list
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          required: true
        - schema:
            type: number
          in: query
          name: skip
          required: true
        - schema:
            type: number
          in: query
          name: afterTimestamp
        - schema:
            type: number
          in: query
          name: beforeTimestamp
          required: true
        - schema:
            type: string
          in: query
          name: filterId
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponConsumersUsersViewFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    parameters: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /consumer/users/{userId}:
    get:
      summary: Consumer Users - Item - Get
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples: {}
      operationId: get-consumer-users-item
      description: ''
      parameters: []
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponConsumersUsersViewFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /business/users:
    get:
      summary: Business Users - List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessUsersListResponse'
              examples: {}
      operationId: get-business-users-list
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          required: true
        - schema:
            type: number
          in: query
          name: skip
          required: true
        - schema:
            type: number
          in: query
          name: afterTimestamp
        - schema:
            type: number
          in: query
          name: beforeTimestamp
          required: true
        - schema:
            type: string
          in: query
          name: filterId
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponBusinessUsersViewFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    parameters: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /business/users/{userId}:
    get:
      summary: Business Users - Item - Get
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Business'
              examples: {}
      operationId: get-business-users-item
      description: ''
      parameters: []
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponBusinessUsersViewFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /dashboard_stats/transactions:
    get:
      summary: DashboardStats - Transactions
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardStatsTransactionsCount'
              examples: {}
      operationId: get-dashboard-stats-transactions
      description: ''
      parameters:
        - schema:
            type: string
            enum:
              - WEEK
              - MONTH
              - DAY
              - YEAR
          in: query
          name: timeframe
          required: true
          description: MONTH, DAY or YEAR
        - schema:
            type: number
          in: query
          name: endTimestamp
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponDashboardStatsTransactionsFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    parameters: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /dashboard_stats/hits_per_user:
    get:
      summary: DashboardStats - Hits per user
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardStatsHitsPerUser'
              examples: {}
      operationId: get-dashboard-stats-hits-per-user
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: startTimestamp
        - schema:
            type: number
          in: query
          name: endTimestamp
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponDashboardStatsTransactionsFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /transactions/{transactionId}/comments:
    post:
      summary: Create a Transaction Comment
      operationId: post-transactions-comments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponTransactionsViewFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    parameters:
      - schema:
          type: string
        name: transactionId
        in: path
        required: true
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /transactions/{transactionId}/comments/{commentId}:
    parameters:
      - schema:
          type: string
        name: transactionId
        in: path
        required: true
      - schema:
          type: string
        name: commentId
        in: path
        required: true
    delete:
      summary: ''
      operationId: delete-transactions-transactionId-comments-commentId
      responses:
        '200':
          description: OK
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponTransactionsViewFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /accounts/{userId}:
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    delete:
      summary: Account - Delete
      operationId: accounts-delete
      responses:
        '200':
          description: OK
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponAccountFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /accounts:
    post:
      summary: Account - Invite
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountInvitePayload'
      operationId: accounts-invite
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponAccountFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    get:
      summary: Account - List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
      operationId: get-accounts
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponAccountFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
components:
  schemas:
    Rule:
      title: Rule
      type: object
      x-examples:
        example-1:
          id: R-1
          name: Rule name
          description: Rule description
          defaultParameters:
            threshold: 3
          defaultAction: FLAG
          ruleImplementationName: code-filename
          createdAt: 0
          updatedAt: 0
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - TRANSACTION
            - USER
        name:
          type: string
        description:
          type: string
        defaultParameters:
          type: object
        defaultAction:
          $ref: '#/components/schemas/RuleAction'
        ruleImplementationName:
          type: string
        labels:
          type: array
          items:
            type: string
        createdAt:
          type: number
        updatedAt:
          type: number
        tenantIds:
          type: array
          items:
            type: string
      required:
        - id
        - type
        - name
        - description
        - defaultParameters
        - defaultAction
        - ruleImplementationName
        - labels
    RuleInstance:
      title: RuleInstance
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - TRANSACTION
            - USER
        ruleId:
          type: string
        parameters:
          type: object
        action:
          $ref: '#/components/schemas/RuleAction'
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        createdAt:
          type: number
        updatedAt:
          type: number
        runCount:
          type: number
        hitCount:
          type: number
      required:
        - ruleId
        - parameters
        - action
    RuleAction:
      type: string
      title: RuleAction
      enum:
        - ALLOW
        - WHITELIST
        - FLAG
        - BLOCK
        - SUSPEND
      x-examples:
        example-1: ALLOW
      description: >-
        Model for rule action if a rule is hit. This is returned in the API
        response and can be configured on Console by operational accounts like a
        Compliance Analyst
    ImportRequest:
      title: ImportRequest
      type: object
      properties:
        type:
          type: string
          enum:
            - TRANSACTION
            - USER
            - BUSINESS
        format:
          type: string
          enum:
            - flagright
            - custom
        s3Key:
          type: string
        filename:
          type: string
      required:
        - type
        - format
        - s3Key
        - filename
    PresignedUrlResponse:
      title: PresignedUrlResponse
      type: object
      properties:
        presignedUrl:
          type: string
        s3Key:
          type: string
      required:
        - presignedUrl
        - s3Key
    ListImportRequest:
      title: ListImportRequest
      type: object
      properties:
        listName:
          type: string
        indexName:
          type: string
        data:
          type: string
      required:
        - listName
        - indexName
        - data
    ImportResponse:
      title: ImportResponse
      type: object
      properties:
        importedCount:
          type: number
      required:
        - importedCount
    TransactionsListResponse:
      title: TransactionsListResponse
      type: object
      description: ''
      x-examples: {}
      properties:
        total:
          type: number
        data:
          type: array
          items:
            $ref: '#/components/schemas/TransactionCaseManagement'
      required:
        - total
        - data
    TransactionCaseManagement:
      allOf:
        - $ref: '#/components/schemas/TransactionWithRulesResult'
        - type: object
          properties:
            comments:
              type: array
              items:
                $ref: '#/components/schemas/Comment'
            assignments:
              type: array
              items:
                $ref: '#/components/schemas/Assignment'
            status:
              $ref: '#/components/schemas/RuleAction'
            statusChanges:
              type: array
              items:
                $ref: '#/components/schemas/TransactionStatusChange'
            originUser:
              oneOf:
                - $ref: '#/components/schemas/InternalConsumerUser'
                - $ref: '#/components/schemas/InternalBusinessUser'
            destinationUser:
              oneOf:
                - $ref: '#/components/schemas/InternalConsumerUser'
                - $ref: '#/components/schemas/InternalBusinessUser'
          required:
            - status
      title: TransactionCaseManagement
    ConsumerUsersListResponse:
      title: ConsumerUsersListResponse
      type: object
      properties:
        total:
          type: number
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
      required:
        - total
        - data
    BusinessUsersListResponse:
      title: BusinessUsersListResponse
      type: object
      properties:
        total:
          type: number
        data:
          type: array
          items:
            $ref: '#/components/schemas/Business'
      required:
        - total
        - data
    DashboardStatsTransactionsCount:
      type: object
      x-examples:
        example-1:
          data:
            - _id: '2020-01-04'
              totalTransactions: 2344
              flaggedTransactions: 121
              stoppedTransactions: 33
      title: DashboardStatsTransactionsCount
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              totalTransactions:
                type: number
              flaggedTransactions:
                type: number
              stoppedTransactions:
                type: number
            required:
              - _id
      required:
        - data
    InternalConsumerUser:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            type:
              enum:
                - CONSUMER
              type: string
          required:
            - type
    InternalBusinessUser:
      allOf:
        - $ref: '#/components/schemas/Business'
        - type: object
          properties:
            type:
              enum:
                - BUSINESS
              type: string
          required:
            - type
    DashboardStatsHitsPerUser:
      type: object
      title: DashboardStatsHitsPerUser
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              originUserId:
                type: string
              rulesHit:
                type: number
              user:
                oneOf:
                  - $ref: '#/components/schemas/InternalConsumerUser'
                  - $ref: '#/components/schemas/InternalBusinessUser'
            required:
              - originUserId
              - rulesHit
      required:
        - data
    Comment:
      title: Comment
      type: object
      properties:
        id:
          type: string
        body:
          type: string
        userId:
          type: string
        files:
          type: array
          items:
            $ref: '#/components/schemas/FileInfo'
        createdAt:
          type: number
        updatedAt:
          type: number
      required:
        - body
    FileInfo:
      title: FileInfo
      type: object
      properties:
        s3Key:
          type: string
        bucket:
          type: string
        filename:
          type: string
        size:
          type: number
        downloadLink:
          type: string
      required:
        - s3Key
        - filename
        - size
    Assignment:
      title: Assignment
      type: object
      properties:
        assigneeUserId:
          type: string
        assignedByUserId:
          type: string
        timestamp:
          type: number
      required:
        - assigneeUserId
        - assignedByUserId
        - timestamp
    TransactionStatusChange:
      title: TransactionStatusChange
      type: object
      properties:
        userId:
          type: string
        status:
          $ref: '#/components/schemas/RuleAction'
        reason:
          type: array
          items:
            type: string
        timestamp:
          type: number
      required:
        - userId
        - status
        - timestamp
    TransactionUpdateRequest:
      title: TransactionUpdateRequest
      type: object
      properties:
        status:
          $ref: '#/components/schemas/RuleAction'
        assignments:
          type: array
          items:
            $ref: '#/components/schemas/Assignment'
        reason:
          type: array
          items:
            type: string
    FileImport:
      title: FileImport
      type: object
      properties:
        _id:
          type: string
        type:
          type: string
          enum:
            - TRANSACTION
            - USER
            - BUSINESS
        s3Key:
          type: string
        filename:
          type: string
        importedRecords:
          type: number
        error:
          type: string
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/FileImportStatusChange'
      required:
        - _id
        - type
        - s3Key
        - filename
        - statuses
    FileImportStatusChange:
      type: object
      title: FileImportStatusChange
      enum:
        - IN_PROGRESS
        - PENDING
        - FAILED
        - SUCCESS
      properties:
        status:
          type: string
          enum:
            - IN_PROGRESS
            - PENDING
            - SUCCESS
            - FAILED
        timestamp:
          type: number
      required:
        - status
        - timestamp
    RuleImplementation:
      title: RuleImplementation
      type: object
      properties:
        name:
          type: string
        parametersSchema:
          type: object
      required:
        - name
        - parametersSchema
    Account:
      title: Account
      type: object
      properties:
        user_id:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        email:
          type: string
        email_verified:
          type: boolean
        name:
          type: string
        nickname:
          type: string
        picture:
          type: string
      required:
        - user_id
        - created_at
        - updated_at
        - email
        - email_verified
    AccountInvitePayload:
      title: AccountInvitePayload
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    Address:
      title: Address
      required:
        - addressLines
        - postcode
        - city
        - country
      type: object
      properties:
        addressLines:
          type: array
          items: {}
          description: Address lines of the user's residence address
        postcode:
          minLength: 1
          type: string
          description: Post code of the user's residence address
        city:
          minLength: 1
          type: string
          description: City of the user's residence address
        state:
          minLength: 1
          type: string
          description: State of the user's residence address
        country:
          minLength: 1
          type: string
          description: User's country of residence
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          description: Additional information that can be added via tags
      description: Model for standardized address
      example:
        addressLines:
          - Klara-Franke Str 20
        postcode: '10557'
        city: Berlin
        state: Berlin
        country: Germany
        tags:
          - key: customKey
            value: customValue
    User:
      title: User
      type: object
      description: Model for User details
      example:
        createdTimestamp: 1641654664000
        userId: 96647cfd9e8fe66ee0f3362e011e34e8
        userDetails:
          name:
            firstName: Baran
            middleName: Realblood
            lastName: Ozkan
          dateOfBirth: '1991-01-01'
          countryOfResidence: US
          countryOfNationality: DE
        legalDocuments:
          - documentType: passport
            documentNumber: Z9431P
            documentIssuedDate: 1639939034
            documentExpirationDate: 1839939034
            documentIssuedCountry: DE
            tags:
              - key: customerType
                value: wallet
        contactDetails:
          emailIds:
            - baran@flagright.com
          contactNumbers:
            - '+37112345432'
          websites:
            - flagright.com
          addresses:
            - addressLines:
                - Klara-Franke Str 20
              postcode: '10557'
              city: Berlin
              state: Berlin
              country: Germany
              tags:
                - key: customKey
                  value: customValue
        tags:
          - key: customKey
            value: customValue
      x-examples:
        example-1:
          userId: 96647cfd9e8fe66ee0f3362e011e34e8
          userDetails:
            name:
              firstName: Baran
              middleName: Realblood
              lastName: Ozkan
            dateOfBirth:
              day: 1
              month: 1
              year: 1990
            countryOfResidence: US
            countryOfNationality: DE
          legalDocuments:
            - documentType: passport
              documentNumber: Z9431P
              documentIssuedDate: 1639939034
              documentExpirationDate: 1839939034
              documentIssuedCountry: DE
              tags:
                - key: customerType
                  value: wallet
          contactDetails:
            emailIds:
              - baran@flagright.com
            contactNumbers:
              - '+37112345432'
            websites:
              - flagright.com
            addresses:
              - addressLines:
                  - Klara-Franke Str 20
                postcode: '10557'
                city: Berlin
                state: Berlin
                country: Germany
                tags:
                  - key: customKey
                    value: customValue
          tags:
            - key: customKey
              value: customValue
      properties:
        userId:
          minLength: 1
          type: string
          description: Unique user ID
        userDetails:
          $ref: '#/components/schemas/UserDetails'
        createdTimestamp:
          type: number
          minimum: 1262300400000
          description: Timestamp when userId is created
        legalDocuments:
          type: array
          description: User's legal identity documents - See Document Model for details
          items:
            $ref: '#/components/schemas/LegalDocument'
        contactDetails:
          $ref: '#/components/schemas/ContactDetails'
        tags:
          type: array
          description: Additional information that can be added via tags
          items:
            $ref: '#/components/schemas/Tag'
        transactionLimits:
          $ref: '#/components/schemas/TransactionLimits'
      required:
        - userId
        - userDetails
        - createdTimestamp
    Person:
      title: Person
      required:
        - generalDetails
      type: object
      properties:
        generalDetails:
          $ref: '#/components/schemas/UserDetails'
        legalDocuments:
          type: array
          items:
            $ref: '#/components/schemas/LegalDocument'
          description: User's legal identity documents - See Document Model for details
        contactDetails:
          $ref: '#/components/schemas/ContactDetails'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          description: Additional information that can be added via tags
      description: >-
        Model for a generic individual - different from User model by not having
        userId field
      example:
        generalDetails:
          name:
            firstName: Baran
            middleName: Realblood
            lastName: Ozkan
          dateOfBirth: '1991-01-01'
          countryOfResidence: US
          countryOfNationality: DE
        legalDocuments:
          - documentType: passport
            documentNumber: Z9431P
            documentIssuedDate: 1639939034
            documentExpirationDate: 1839939034
            documentIssuedCountry: DE
            tags:
              - key: customerType
                value: wallet
        contactDetails:
          emailIds:
            - baran@flagright.com
          contactNumbers:
            - +371 123132
          websites:
            - flagright.com
          addresses:
            - addressLines:
                - Klara-Franke Str 20
              postcode: '10557'
              city: Berlin
              state: Berlin
              country: Germany
              tags:
                - key: customKey
                  value: customValue
        tags:
          - key: customKey
            value: customValue
    LegalDocument:
      title: LegalDocument
      required:
        - documentType
        - documentNumber
        - documentIssuedCountry
      type: object
      properties:
        documentType:
          minLength: 1
          type: string
          description: User's identity document type such as passport, national ID etc.
        documentNumber:
          minLength: 1
          type: string
          description: User's unique identity document number such as passport number
        documentIssuedDate:
          type: number
          description: User's identity document issuance date
        documentExpirationDate:
          type: number
          description: User's identity document expiration date
        documentIssuedCountry:
          type: string
          description: User's identity document issuance country
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          description: Additional information that can be added via tags
        nameOnDocument:
          $ref: '#/components/schemas/ConsumerName'
      description: >-
        LegalDocument model generalizes User's identity document type (ex:
        Passport)
      example:
        documentType: passport
        documentNumber: Z9431P
        documentIssuedDate: 1639939034
        documentExpirationDate: 1839939034
        documentIssuedCountry: DE
        tags:
          - key: customerType
            value: wallet
    Tag:
      title: Tag
      required:
        - key
        - value
      type: object
      properties:
        key:
          minLength: 1
          type: string
          description: Key value when you are creating a custom variable
        value:
          minLength: 1
          type: string
          description: Value for a given key when you are creating a custom variable
      description: >-
        Generic key-value pair model to append a custom variable being sent to
        Flagright API
      example:
        key: customKey
        value: customValue
    Transaction:
      title: Transaction
      type: object
      description: Model for transaction payload
      example:
        transactionId: 7b80a539eea6e78acbd6d458e5971482
        originUserId: 8650a2611d0771cba03310f74bf6
        destinationUserId: 9350a2611e0771cba03310f74bf6
        originAmountDetails:
          country: DE
          transactionAmount: 800
          transactionCurrency: EUR
        destinationAmountDetails:
          country: IN
          transactionAmount: 68351.34
          transactionCurrency: INR
        promotionCodeUsed: true
        timestamp: 1641654664000
        originPaymentDetails:
          method: CARD
          cardFingerprint: 20ac00fed8ef913aefb17cfae1097cce
          cardIssuedCountry: US
          transactionReferenceField: Deposit
          3dsDone: true
        destinationPaymentDetails:
          method: CARD
          cardFingerprint: 20ac00fed8ef913aefb17cfae1097cce
          cardIssuedCountry: IN
          transactionReferenceField: Deposit
          3dsDone: true
        reference: loan repayment
        deviceData:
          batteryLevel: 95
          deviceLatitude: 13.0033
          deviceLongitude: 76.1004
          ipAddress: 10.23.191.2
          deviceIdentifier: 3c49f915d04485e34caba
          vpnUsed: false
          operatingSystem: Android 11.2
          deviceMaker: ASUS
          deviceModel: Zenphone M2 Pro Max
          deviceYear: '2018'
          appVersion: 1.1.0
        tags:
          - key: customKey
            value: customValue
      x-examples:
        example-1:
          transactionId: 7b80a539eea6e78acbd6d458e5971482
          originUserId: 8650a2611d0771cba03310f74bf6
          destinationUserId: 9350a2611e0771cba03310f74bf6
          originAmountDetails:
            country: DE
            transactionAmount: 800
            transactionCurrency: EUR
          destinationAmountDetails:
            country: IN
            transactionAmount: 68351.34
            transactionCurrency: INR
          promotionCodeUsed: true
          timestamp: 1641654664
          originPaymentDetails:
            method: CARD
            cardFingerprint: 20ac00fed8ef913aefb17cfae1097cce
            cardIssuedCountry: US
            transactionReferenceField: Deposit
            3dsDone: true
          destinationPaymentDetails:
            method: CARD
            cardFingerprint: 20ac00fed8ef913aefb17cfae1097cce
            cardIssuedCountry: IN
            transactionReferenceField: Deposit
            3dsDone: true
          reference: loan repayment
          deviceData:
            batteryLevel: 95
            deviceLatitude: 13.0033
            deviceLongitude: 76.1004
            ipAddress: 10.23.191.2
            deviceIdentifier: 3c49f915d04485e34caba
            vpnUsed: false
            operatingSystem: Android 11.2
            deviceMaker: ASUS
            deviceModel: Zenphone M2 Pro Max
            deviceYear: '2018'
            appVersion: 1.1.0
          tags:
            - key: customKey
              value: customValue
      properties:
        type:
          type: string
          description: >-
            Type of transaction depending on your use case. It can be
            withdrawal, deposit, payment link, wallet-to-wallet, trading etc.
        transactionId:
          minLength: 1
          type: string
          description: Unique transaction identifier
        timestamp:
          type: number
          minimum: 1262300400000
          description: Timestamp of when transaction took place
        transactionState:
          $ref: '#/components/schemas/TransactionState'
        originUserId:
          type: string
          description: UserId for where the transaction originates from
        destinationUserId:
          type: string
          description: >-
            UserId for transaction's destination. In other words, where the
            value is being transferred to.
        originAmountDetails:
          $ref: '#/components/schemas/TransactionAmountDetails'
        destinationAmountDetails:
          $ref: '#/components/schemas/TransactionAmountDetails'
        originPaymentDetails:
          oneOf:
            - $ref: '#/components/schemas/CardDetails'
            - $ref: '#/components/schemas/GenericBankAccountDetails'
            - $ref: '#/components/schemas/IBANDetails'
            - $ref: '#/components/schemas/ACHDetails'
            - $ref: '#/components/schemas/SWIFTDetails'
            - $ref: '#/components/schemas/UPIDetails'
            - $ref: '#/components/schemas/WalletDetails'
          description: >-
            Payment details of the origin. It can be a bank account number,
            wallet ID, card fingerprint etc.
        destinationPaymentDetails:
          oneOf:
            - $ref: '#/components/schemas/CardDetails'
            - $ref: '#/components/schemas/GenericBankAccountDetails'
            - $ref: '#/components/schemas/IBANDetails'
            - $ref: '#/components/schemas/ACHDetails'
            - $ref: '#/components/schemas/UPIDetails'
            - $ref: '#/components/schemas/WalletDetails'
            - $ref: '#/components/schemas/SWIFTDetails'
          example:
            method: CARD
            cardFingerprint: 20ac00fed8ef913aefb17cfae1097cce
            cardIssuedCountry: TR
            transactionReferenceField: Deposit
            3dsDone: true
          description: >-
            Payment details of the destination. It can be a bank account number,
            wallet ID, card fingerprint etc.
        productType:
          type: string
          description: >-
            Type of produce being used by the consumer (ex wallets, payments
            etc)
        promotionCodeUsed:
          type: boolean
          description: Whether a promotion code was used or not the transaction
        reference:
          minLength: 1
          type: string
          description: >-
            Reference field for the transaction indicating the purpose of the
            transaction etc.
        deviceData:
          $ref: '#/components/schemas/DeviceData'
        tags:
          type: array
          description: Additional information that can be added via tags
          items:
            $ref: '#/components/schemas/Tag'
    TransactionWithRulesResult:
      title: TransactionWithRulesResult
      description: Model for transaction payload with rules result
      example:
        transactionId: 7b80a539eea6e78acbd6d458e5971482
        originUserId: 8650a2611d0771cba03310f74bf6
        destinationUserId: 9350a2611e0771cba03310f74bf6
        originAmountDetails:
          country: DE
          transactionAmount: 800
          transactionCurrency: EUR
        destinationAmountDetails:
          country: IN
          transactionAmount: 68351.34
          transactionCurrency: INR
        promotionCodeUsed: true
        timestamp: 1641654664
        originPaymentDetails:
          method: CARD
          cardFingerprint: 20ac00fed8ef913aefb17cfae1097cce
          cardIssuedCountry: US
          transactionReferenceField: Deposit
          3dsDone: true
        destinationPaymentDetails:
          method: CARD
          cardFingerprint: 20ac00fed8ef913aefb17cfae1097cce
          cardIssuedCountry: IN
          transactionReferenceField: Deposit
          3dsDone: true
        reference: loan repayment
        deviceData:
          batteryLevel: 95
          deviceLatitude: 13.0033
          deviceLongitude: 76.1004
          ipAddress: 10.23.191.2
          deviceIdentifier: 3c49f915d04485e34caba
          vpnUsed: false
          operatingSystem: Android 11.2
          deviceMaker: ASUS
          deviceModel: Zenphone M2 Pro Max
          deviceYear: '2018'
          appVersion: 1.1.0
        tags:
          - key: customKey
            value: customValue
      allOf:
        - $ref: '#/components/schemas/Transaction'
        - type: object
          properties:
            executedRules:
              type: array
              items:
                $ref: '#/components/schemas/ExecutedRulesResult'
            hitRules:
              type: array
              items:
                $ref: '#/components/schemas/HitRulesResult'
          required:
            - executedRules
            - hitRules
      x-examples:
        example-1:
          transactionId: 7b80a539eea6e78acbd6d458e5971482
          originUserId: 8650a2611d0771cba03310f74bf6
          destinationUserId: 9350a2611e0771cba03310f74bf6
          originAmountDetails:
            country: DE
            transactionAmount: 800
            transactionCurrency: EUR
          destinationAmountDetails:
            country: IN
            transactionAmount: 68351.34
            transactionCurrency: INR
          promotionCodeUsed: true
          timestamp: 1641654664
          originPaymentDetails:
            method: CARD
            cardFingerprint: 20ac00fed8ef913aefb17cfae1097cce
            cardIssuedCountry: US
            transactionReferenceField: Deposit
            3dsDone: true
          destinationPaymentDetails:
            method: CARD
            cardFingerprint: 20ac00fed8ef913aefb17cfae1097cce
            cardIssuedCountry: IN
            transactionReferenceField: Deposit
            3dsDone: true
          reference: loan repayment
          deviceData:
            batteryLevel: 95
            deviceLatitude: 13.0033
            deviceLongitude: 76.1004
            ipAddress: 10.23.191.2
            deviceIdentifier: 3c49f915d04485e34caba
            vpnUsed: false
            operatingSystem: Android 11.2
            deviceMaker: ASUS
            deviceModel: Zenphone M2 Pro Max
            deviceYear: '2018'
            appVersion: 1.1.0
          tags:
            - key: customKey
              value: customValue
          executedRules:
            - ruleId: R-1a
              ruleName: Proof of funds for high value transactions
              ruleDescription: >-
                If a user makes a remittance transaction >= 1800 in EUR - ask
                for proof of funds
              ruleAction: BLOCK
              ruleHit: true
          hitRules:
            - ruleId: R-1a
              ruleName: Proof of funds for high value transactions
              ruleDescription: >-
                If a user makes a remittance transaction >= 1800 in EUR - ask
                for proof of funds
              ruleAction: BLOCK
    UserEventWithRulesResult:
      title: UserEventWithRulesResult
      description: Model for user event payload with rules result
      allOf:
        - $ref: '#/components/schemas/UserEvent'
        - type: object
          properties:
            status:
              $ref: '#/components/schemas/RuleAction'
            executedRules:
              type: array
              items:
                $ref: '#/components/schemas/ExecutedRulesResult'
            hitRules:
              type: array
              items:
                $ref: '#/components/schemas/HitRulesResult'
          required:
            - executedRules
            - hitRules
      x-examples: {}
    CardDetails:
      title: CardDetails
      type: object
      description: Model for credit or debit card details
      example:
        method: CARD
        cardFingerprint: 20ac00fed8ef913aefb17cfae1097cce
        cardIssuedCountry: TR
        transactionReferenceField: Deposit
        3dsDone: true
      properties:
        method:
          type: string
          pattern: CARD
          description: Classify the method of payment as "Card" for CardDetails
        cardFingerprint:
          minLength: 1
          type: string
          description: >-
            Unique card fingerprint that helps identify a specific card without
            having to use explicit card number. This is likely available at your
            card payment scheme provider
        cardIssuedCountry:
          minLength: 1
          type: string
          description: The country of issuance for a specific card
        transactionReferenceField:
          minLength: 1
          type: string
          description: Reference for the transaction
        3dsDone:
          type: boolean
          description: Whether 3ds was successfully enforced for the transaction
        nameOnCard:
          $ref: '#/components/schemas/ConsumerName'
      required:
        - method
    IBANDetails:
      title: IBANDetails
      type: object
      description: Standardized model for Bank Details
      example:
        method: IBAN
        BIC: DE761234561
        bankName: Merryl Lynch
        IBAN: '1234321'
        bankAddress:
          addressLines:
            - Klara-Franke Str 20
          postcode: '10557'
          city: Berlin
          state: Berlin
          country: Germany
          tags:
            - key: customKey
              value: customValue
      x-examples:
        example-1:
          method: IBAN
          bankIdentifierType: IBAN
          bankIdentifier: DE761234561
          bankName: Merryl Lynch
          accountNumber: '1234321'
          bankAddress:
            addressLines:
              - Klara-Franke Str 20
            postcode: '10557'
            city: Berlin
            state: Berlin
            country: Germany
            tags:
              - key: customKey
                value: customValue
      properties:
        method:
          type: string
          pattern: IBAN
          description: Classify the method of payment as "IBAN" for IBANDetails
        BIC:
          minLength: 1
          type: string
          description: >-
            Identifier for the bank. Can be routing number, BIK number, SWIFT
            code, BIC number etc.
        bankName:
          minLength: 1
          type: string
          description: Name of the bank
        bankAddress:
          $ref: '#/components/schemas/Address'
        IBAN:
          type: string
          description: Account number of the user. Can be account number, IBAN number etc.
        name:
          type: string
          description: Name of the bank account holder
        tags:
          $ref: '#/components/schemas/Tag'
        bankBranchCode:
          type: string
          description: >-
            Branch code of the bank. In some countries, this can be the same as
            the bank's SWIFT code
      required:
        - method
    WalletDetails:
      title: WalletDetails
      type: object
      description: Standardized model for a Generic wallet transaction
      x-examples: {}
      properties:
        method:
          type: string
          minLength: 1
          description: 'Type: WALLET'
          pattern: WALLET
        walletType:
          type: string
          description: >-
            Wallet type if there are various types of wallets belonging to the
            same user. E.g. Checking, savings, vault, different currency wallets
            etc.
        walletId:
          minLength: 1
          type: string
          description: Unique ID of the wallet
        paymentChannel:
          type: string
          description: Payment Channel used through wallet
        name:
          type: string
          description: Name of the account holder for a specific wallet
        tags:
          $ref: '#/components/schemas/Tag'
        walletPhoneNumber:
          type: string
          description: Phone number associated with the wallet, if any
      required:
        - method
        - walletType
    DeviceData:
      title: DeviceData
      type: object
      properties:
        batteryLevel:
          type: number
          description: >-
            Battery level of the device used for a transaction or event at a
            given timestamp
        deviceLatitude:
          type: number
          description: Device latitude at a give timestamp for an event or transaction
        deviceLongitude:
          type: number
          description: Device longitude at a give timestamp for an event or transaction
        ipAddress:
          minLength: 1
          type: string
          description: >-
            IP address of the device at a given timestamp for an event or
            transaction
        deviceIdentifier:
          minLength: 1
          type: string
          description: Device identifier number
        vpnUsed:
          type: boolean
          description: >-
            Whether VPN was used at a given timestamp for an event or
            transaction
        operatingSystem:
          minLength: 1
          type: string
          description: >-
            Operating system of the device at a given timestamp for an event or
            transaction
        deviceMaker:
          minLength: 1
          type: string
          description: >-
            The maker of the device at a given timestamp for an event or
            transaction
        deviceModel:
          minLength: 1
          type: string
          description: >-
            The model of the device at a given timestamp for an event or
            transaction
        deviceYear:
          minLength: 1
          type: string
          description: >-
            The year the device was manufactured at a given timestamp for an
            event or transaction
        appVersion:
          minLength: 1
          type: string
          description: >-
            The version of the app your user is using on their device at a given
            timestamp for an event or transaction
      description: Model for device data
    TransactionMonitoringResult:
      allOf:
        - type: object
          description: Model to convey the results of transaction monitoring
          properties:
            transactionId:
              type: string
              description: Transaction ID that the results pertain to
          required:
            - transactionId
        - $ref: '#/components/schemas/RulesResults'
      x-examples:
        example-1:
          transactionId: 7b80a539eea6e78acbd6d458e5971482
          executedRules:
            - ruleId: R-1a
              ruleName: Proof of funds for high value transactions
              ruleDescription: >-
                If a user makes a remittance transaction >= 1800 in EUR - ask
                for proof of funds
              ruleAction: BLOCK
              ruleHit: true
          hitRules:
            - ruleId: R-1a
              ruleName: Proof of funds for high value transactions
              ruleDescription: >-
                If a user makes a remittance transaction >= 1800 in EUR - ask
                for proof of funds
              ruleAction: BLOCK
    UserMonitoringResult:
      allOf:
        - type: object
          description: Model to convey the results of user monitoring
          properties:
            userId:
              type: string
              description: User ID that the results pertain to
          required:
            - userId
        - $ref: '#/components/schemas/RulesResults'
    RulesResults:
      title: RulesResults
      type: object
      example:
        transactionId: 7b80a539eea6e78acbd6d458e5971482
        executedRules:
          - ruleId: R-1a
            ruleName: Proof of funds for high value transactions
            ruleDescription: >-
              If a user makes a remittance transaction >= 1800 in EUR - ask for
              proof of funds
            ruleAction: BLOCK
            ruleHit: true
        hitRules:
          - ruleId: R-1a
            ruleName: Proof of funds for high value transactions
            ruleDescription: >-
              If a user makes a remittance transaction >= 1800 in EUR - ask for
              proof of funds
            ruleAction: BLOCK
      x-examples:
        example-1:
          transactionId: 7b80a539eea6e78acbd6d458e5971482
          executedRules:
            - ruleId: R-1a
              ruleName: Proof of funds for high value transactions
              ruleDescription: >-
                If a user makes a remittance transaction >= 1800 in EUR - ask
                for proof of funds
              ruleAction: BLOCK
              ruleHit: true
          hitRules:
            - ruleId: R-1a
              ruleName: Proof of funds for high value transactions
              ruleDescription: >-
                If a user makes a remittance transaction >= 1800 in EUR - ask
                for proof of funds
              ruleAction: BLOCK
      properties:
        executedRules:
          type: array
          description: Unique transaction identifier
          items:
            $ref: '#/components/schemas/ExecutedRulesResult'
        hitRules:
          type: array
          description: Unique transaction identifier
          items:
            $ref: '#/components/schemas/HitRulesResult'
      required:
        - executedRules
        - hitRules
    ExecutedRulesResult:
      allOf:
        - $ref: '#/components/schemas/HitRulesResult'
        - type: object
          properties:
            ruleHit:
              type: boolean
          required:
            - ruleHit
    HitRulesResult:
      title: HitRulesResult
      type: object
      example:
        ruleId: R-1a
        ruleName: Proof of funds for high value transactions
        ruleDescription: >-
          If a user makes a remittance transaction >= 1800 in EUR - ask for
          proof of funds
        ruleAction: BLOCK
        ruleHit: true
      description: Model for list of executed rules
      properties:
        ruleId:
          minLength: 1
          type: string
          description: Unique rule identifier
        ruleName:
          minLength: 1
          type: string
          description: Name of the rule
        ruleDescription:
          minLength: 1
          type: string
          description: Description of the rule
        ruleAction:
          $ref: '#/components/schemas/RuleAction'
      required:
        - ruleId
        - ruleName
        - ruleDescription
        - ruleAction
    FailedRulesResult:
      title: FailedRulesResult
      type: object
      example:
        ruleId: R-1a
        ruleName: Proof of funds for high value transactions
        ruleDescription: >-
          If a user makes a remittance transaction >= 1800 in EUR - ask for
          proof of funds
        failureException:
          exceptionName: MISSING_DATA
          exceptionDescription: Some data is missing
      description: >-
        Model for list of rules failed execution. It means rules could not be
        run
      properties:
        ruleId:
          minLength: 1
          type: string
          description: Unique rule identifier
        ruleName:
          minLength: 1
          type: string
          description: Name of the rule
        ruleDescription:
          minLength: 1
          type: string
          description: Description of the rule
        failureException:
          $ref: '#/components/schemas/RuleFailureException'
      required:
        - ruleId
        - ruleName
        - ruleDescription
        - failureException
    RuleFailureException:
      title: RuleFailureException
      required:
        - exceptionName
        - exceptionDescription
      type: object
      properties:
        exceptionName:
          minLength: 1
          type: string
          description: Unique rule identifier
        exceptionDescription:
          minLength: 1
          type: string
          description: Name of the rule
      example:
        exceptionName: MISSING_DATA
        exceptionDescription: Some data is missing
    RiskScoringResult:
      title: RiskScoringResult
      required:
        - kycRiskScore
        - actionRiskScore
      type: object
      properties:
        kycRiskScore:
          type: number
          description: Quantified KYC risk score
        actionRiskScore:
          type: number
          description: Quantified action risk score
        dynamicRiskScore:
          type: number
          description: Quantified dynamic risk score
      description: Model for results from Risk Scoring
      example:
        kycRiskScore: 87.5
        actionRiskScore: 58.33
        dynamicRiskScore: 73.92
    ConsumerName:
      title: ConsumerName
      required:
        - firstName
      type: object
      properties:
        firstName:
          minLength: 1
          type: string
          description: First name of the user
        middleName:
          minLength: 1
          type: string
          description: Middle name of the user
        lastName:
          minLength: 1
          type: string
          description: Last name of the user
      description: Model for a generic consumer name
      example:
        firstName: Baran
        middleName: Realblood
        lastName: Ozkan
    TransactionAmountDetails:
      title: TransactionAmountDetails
      type: object
      example:
        country: DE
        transactionAmount: 800
        transactionCurrency: EUR
      description: Model for transaction amount details
      properties:
        transactionAmount:
          type: number
          description: Amount of the transaction
        transactionCurrency:
          minLength: 1
          type: string
          description: Currency of the transaction
        country:
          minLength: 1
          type: string
          description: Country where the transaction occurred
      required:
        - transactionAmount
        - transactionCurrency
    Amount:
      title: Amount
      type: object
      example:
        amountValue: 800
        amountCurrency: GBP
      description: Model for amount
      properties:
        amountValue:
          type: number
          description: Numerical value of the transaction
        amountCurrency:
          minLength: 1
          type: string
          description: Currency of the transaction
      required:
        - amountValue
        - amountCurrency
    LegalEntity:
      title: LegalEntity
      type: object
      description: Model for business user legal entity details
      properties:
        companyGeneralDetails:
          $ref: '#/components/schemas/CompanyGeneralDetails'
        companyFinancialDetails:
          $ref: '#/components/schemas/CompanyFinancialDetails'
        companyRegistrationDetails:
          $ref: '#/components/schemas/CompanyRegistrationDetails'
        reasonForAccountOpening:
          type: array
          description: Reason for opening the account at financial institution
          items:
            type: string
        contactDetails:
          $ref: '#/components/schemas/ContactDetails'
      required:
        - companyGeneralDetails
    ContactDetails:
      title: ContactDetails
      type: object
      description: Model for business user contact information details
      properties:
        emailIds:
          type: array
          description: Email addresses of the contacts for a given business customer
          items:
            type: string
        contactNumbers:
          type: array
          description: Phone numbers to contact a given business customer
          items:
            type: string
        faxNumbers:
          type: array
          description: Fax numbers to contact a business customer
          items:
            type: string
        websites:
          type: array
          description: Website of the company
          items:
            type: string
        addresses:
          type: array
          description: Address(es) of the company
          items:
            $ref: '#/components/schemas/Address'
    CompanyFinancialDetails:
      title: CompanyFinancialDetails
      type: object
      example:
        expectedTransactionAmountPerMonth:
          amountValue: 800
          amountCurrency: GBP
        expectedTurnoverPerMonth:
          amountValue: 8000
          amountCurrency: USD
      description: Model for business user company financial details
      properties:
        expectedTransactionAmountPerMonth:
          $ref: '#/components/schemas/Amount'
        expectedTurnoverPerMonth:
          $ref: '#/components/schemas/Amount'
        tags:
          type: array
          description: Additional information that can be added via tags
          items:
            $ref: '#/components/schemas/Tag'
    UserDetails:
      title: UserDetails
      type: object
      example:
        name:
          firstName: Baran
          middleName: Realblood
          lastName: Ozkan
        dateOfBirth: '1991-01-01'
        countryOfResidence: US
        countryOfNationality: DE
      description: Model for consumer user personal details
      properties:
        name:
          $ref: '#/components/schemas/ConsumerName'
        dateOfBirth:
          type: string
          pattern: ^(\d{4}-\d{2}-\d{2})*$
          description: Date of birth of the user
        countryOfResidence:
          minLength: 1
          type: string
          description: Country of residence of the user
        countryOfNationality:
          minLength: 1
          type: string
          description: Country of nationality of the user
      required:
        - name
    CompanyGeneralDetails:
      title: CompanyGeneralDetails
      type: object
      example:
        legalName: Ozkan Hazelnut Export JSC
        businessIndustry:
          - Farming
        mainProductsServicesSold:
          - Hazelnut
      description: Model for business user company general details
      properties:
        legalName:
          minLength: 1
          type: string
          description: Legal name of the company
        businessIndustry:
          type: array
          description: The industry the business operates in for a business customer
          items:
            type: string
        mainProductsServicesSold:
          type: array
          description: The key products and services provided by the company
          items:
            type: string
        tags:
          type: array
          description: Additional information that can be added via tags
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - legalName
    CompanyRegistrationDetails:
      title: CompanyRegistrationDetails
      type: object
      example:
        registrationIdentifier: PSJ554342
        registrationCountry: DE
      description: Model for business user company registration details
      properties:
        registrationIdentifier:
          minLength: 1
          type: string
          description: >-
            Commercial registry registration number for the company in its
            registration country
        registrationCountry:
          minLength: 1
          type: string
          description: Country of registration for the company
        tag:
          type: array
          description: Additional information that can be added via tags
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - registrationIdentifier
        - registrationCountry
    Business:
      title: Business
      type: object
      example:
        createdTimestamp: 1641654664000
        userId: 96647cfd9e8fe66ee0f3362e011e34e8
        legalEntity:
          companyGeneralDetails:
            legalName: Ozkan Hazelnut Export JSC
            businessIndustry:
              - Farming
            mainProductsServicesSold:
              - Hazelnut
          companyFinancialDetails:
            expectedTransactionAmountPerMonth:
              amountValue: 800
              amountCurrency: GBP
            expectedTurnoverPerMonth:
              amountValue: 8000
              amountCurrency: USD
          companyRegistrationDetails:
            registrationIdentifier: PSJ554342
            registrationCountry: DE
          reasonForAccountOpening:
            - string
          contactDetails:
            addresses:
              - addressLines:
                  - Klara-Franke Str 20
                postcode: '10557'
                city: Berlin
                state: Berlin
                country: Germany
                tags:
                  - key: customKey
                    value: customValue
        shareHolders:
          - generalDetails:
              name:
                firstName: Baran
                middleName: Realblood
                lastName: Ozkan
              dateOfBirth: '1991-01-01'
              countryOfResidence: US
              countryOfNationality: DE
            legalDocuments:
              - documentType: passport
                documentNumber: Z9431P
                documentIssuedDate: 1639939034
                documentExpirationDate: 1839939034
                documentIssuedCountry: DE
                tags:
                  - key: customerType
                    value: wallet
            contactDetails:
              emailIds:
                - baran@flagright.com
              contactNumbers:
                - +371 123132
              websites:
                - flagright.com
              addresses:
                - addressLines:
                    - Klara-Franke Str 20
                  postcode: '10557'
                  city: Berlin
                  state: Berlin
                  country: Germany
                  tags:
                    - key: customKey
                      value: customValue
            tags:
              - key: customKey
                value: customValue
        directors:
          - generalDetails:
              name:
                firstName: Baran
                middleName: Realblood
                lastName: Ozkan
              dateOfBirth: '1991-01-01'
              countryOfResidence: US
              countryOfNationality: DE
            legalDocuments:
              - documentType: passport
                documentNumber: Z9431P
                documentIssuedDate: 1639939034
                documentExpirationDate: 1839939034
                documentIssuedCountry: DE
                tags:
                  - key: customerType
                    value: wallet
            contactDetails:
              emailIds:
                - baran@flagright.com
              contactNumbers:
                - +371 123132
              websites:
                - flagright.com
              addresses:
                - addressLines:
                    - Klara-Franke Str 20
                  postcode: '10557'
                  city: Berlin
                  state: Berlin
                  country: Germany
                  tags:
                    - key: customKey
                      value: customValue
            tags:
              - key: customKey
                value: customValue
        tags:
          - key: customKey
            value: customValue
      x-examples:
        example-1:
          userId: 96647cfd9e8fe66ee0f3362e011e34e8
          legalEntity:
            companyGeneralDetails:
              legalName: Ozkan Hazelnut Export JSC
              businessIndustry:
                - Farming
              mainProductsServicesSold:
                - Hazelnut
            companyFinancialDetails:
              expectedTransactionAmountPerMonth:
                amountValue: 800
                amountCurrency: GBP
              expectedTurnoverPerMonth:
                amountValue: 8000
                amountCurrency: USD
            companyRegistrationDetails:
              registrationIdentifier: PSJ554342
              registrationCountry: DE
            reasonForAccountOpening:
              - string
            contactDetails:
              addresses:
                - addressLines:
                    - Klara-Franke Str 20
                  postcode: '10557'
                  city: Berlin
                  state: Berlin
                  country: Germany
                  tags:
                    - key: customKey
                      value: customValue
          shareHolders:
            - generalDetails:
                name:
                  firstName: Baran
                  middleName: Realblood
                  lastName: Ozkan
                dateOfBirth:
                  day: 1
                  month: 1
                  year: 1990
                countryOfResidence: US
                countryOfNationality: DE
              legalDocuments:
                - documentType: passport
                  documentNumber: Z9431P
                  documentIssuedDate: 1639939034
                  documentExpirationDate: 1839939034
                  documentIssuedCountry: DE
                  tags:
                    - key: customerType
                      value: wallet
              contactDetails:
                emailIds:
                  - baran@flagright.com
                contactNumbers:
                  - +371 123132
                websites:
                  - flagright.com
                addresses:
                  - addressLines:
                      - Klara-Franke Str 20
                    postcode: '10557'
                    city: Berlin
                    state: Berlin
                    country: Germany
                    tags:
                      - key: customKey
                        value: customValue
              tags:
                - key: customKey
                  value: customValue
          directors:
            - generalDetails:
                name:
                  firstName: Baran
                  middleName: Realblood
                  lastName: Ozkan
                dateOfBirth:
                  day: 1
                  month: 1
                  year: 1990
                countryOfResidence: US
                countryOfNationality: DE
              legalDocuments:
                - documentType: passport
                  documentNumber: Z9431P
                  documentIssuedDate: 1639939034
                  documentExpirationDate: 1839939034
                  documentIssuedCountry: DE
                  tags:
                    - key: customerType
                      value: wallet
              contactDetails:
                emailIds:
                  - baran@flagright.com
                contactNumbers:
                  - +371 123132
                websites:
                  - flagright.com
                addresses:
                  - addressLines:
                      - Klara-Franke Str 20
                    postcode: '10557'
                    city: Berlin
                    state: Berlin
                    country: Germany
                    tags:
                      - key: customKey
                        value: customValue
              tags:
                - key: customKey
                  value: customValue
          tags:
            - key: customKey
              value: customValue
      description: Model for a business user
      properties:
        userId:
          minLength: 1
          type: string
          description: Unique user ID for the user
        legalEntity:
          $ref: '#/components/schemas/LegalEntity'
        createdTimestamp:
          type: number
          minimum: 1262300400000
          description: Timestamp when the user was created
        shareHolders:
          type: array
          description: >-
            Shareholders (beneficiaries) of the company that hold at least 25%
            ownership. Can be another company or an individual
          items:
            $ref: '#/components/schemas/Person'
        directors:
          type: array
          description: Director(s) of the company. Must be at least one
          items:
            $ref: '#/components/schemas/Person'
        tags:
          type: array
          description: Additional information that can be added via tags
          items:
            $ref: '#/components/schemas/Tag'
        transactionLimits:
          $ref: '#/components/schemas/TransactionLimits'
      required:
        - userId
        - legalEntity
        - createdTimestamp
    BusinessUsersResponse:
      title: BusinessUsersResponse
      type: object
      description: Model for business user risk score response
      properties:
        userId:
          minLength: 1
          type: string
          description: user ID the risk score pertains to
        userRiskScoreDetails:
          $ref: '#/components/schemas/RiskScoringResult'
      required:
        - userId
    ConsumerUsersResponse:
      title: ConsumerUsersResponse
      type: object
      x-examples:
        example-1:
          userId: string
          userRiskScoreDetails:
            kycRiskScore: 87.5
            actionRiskScore: 58.33
            dynamicRiskScore: 73.92
      description: Model for consumer user risk score response
      properties:
        userId:
          minLength: 1
          type: string
          description: user ID the risk score pertains to
        userRiskScoreDetails:
          $ref: '#/components/schemas/RiskScoringResult'
      required:
        - userId
    ACHDetails:
      description: Model for ACH payment method
      type: object
      x-examples:
        example-2:
          method: ACH
          routingNumber: '1231241'
          accountNumber: '543456675'
          bankName: Wells Fargo
          name:
            firstName: Baran
            middleName: Realblood
            lastName: Ozkan
          bankAddress:
            addressLines:
              - 1201 N Monroe St
            postcode: '32303'
            city: Tallahassee
            state: FL
            country: United States of America
            tags:
              - key: userType
                value: customValue
      title: ACHDetails
      properties:
        method:
          type: string
          pattern: ACH
          description: Classify the method of payment as "ACH" for ACHDetails
        routingNumber:
          type: string
          minLength: 1
          description: Routing number of the bank
        accountNumber:
          type: string
          minLength: 1
          description: Bank account number of the individual
        bankName:
          type: string
          minLength: 1
          description: Name of the bank
        name:
          type: string
          description: Name of the account holder
        bankAddress:
          $ref: '#/components/schemas/Address'
        beneficiaryName:
          type: string
          description: Beneficiary name of the account
      required:
        - method
        - routingNumber
        - accountNumber
    SWIFTDetails:
      description: Model for SWIFT payment method
      type: object
      x-examples: {}
      title: SWIFTDetails
      properties:
        method:
          type: string
          pattern: SWIFT
          description: Classify the method of payment as "SWIFT" for SWIFTDetails
        swiftCode:
          type: string
          minLength: 1
          description: SWIFT code of the financial institution
        accountNumber:
          type: string
          minLength: 1
          description: Account number
        accountType:
          type: string
          description: Account type. E.g. Checking, Savings etc.
        bankName:
          type: string
          minLength: 1
          description: Name of the bank
        name:
          type: string
          description: Name of the account holder
        bankAddress:
          $ref: '#/components/schemas/Address'
        specialInstructions:
          type: string
          description: Special instructions if any
      required:
        - method
    GenericBankAccountDetails:
      description: Model for any generic bank account
      type: object
      x-examples: {}
      title: GenericBankAccountDetails
      properties:
        method:
          type: string
          pattern: GENERIC_BANK_ACCOUNT
          description: >-
            Classify the method of payment as "GENERIC_BANK_ACCOUNT" for
            GenericBankAccountDetails
        accountNumber:
          type: string
          minLength: 1
          description: Bank account number
        accountType:
          type: string
          description: Bank account type. E.g. Checking, Savings etc.
        bankName:
          type: string
          minLength: 1
          description: Name of the bank
        bankCode:
          type: string
          description: >-
            Unique identifier of the bank. In some countries, this can be the
            same as the bank's SWIFT code
        name:
          type: string
          description: Name of the account holder
        bankAddress:
          $ref: '#/components/schemas/Address'
        specialInstructions:
          type: string
          description: Special instructions to be specified if any
      required:
        - method
    UPIDetails:
      description: Model for UPI payment method
      type: object
      x-examples:
        example-1:
          method: UPI
          upiID: user@okhdfcbank
          bankProvider: HDFC Bank
          interfaceProvider: PhonePe
      title: UPIDetails
      properties:
        method:
          type: string
          pattern: UPI
          description: Classify the method of payment as "UPI" for UPIDetails
        upiID:
          type: string
          minLength: 1
          description: UPI Id number
        bankProvider:
          type: string
          minLength: 1
          description: Bank provider name
        interfaceProvider:
          type: string
          minLength: 1
          description: Interface provider name
        name:
          type: string
          description: Name of the account holder
      required:
        - method
        - upiID
    TransactionLimits:
      title: TransactionLimits
      type: object
      x-examples:
        example-1:
          maximumDailyTransactionLimit:
            amountValue: 800
            amountCurrency: EUR
          maximumWeeklyTransactionLimit:
            amountValue: 800
            amountCurrency: GBP
          maximumMonthlyTransactionLimit:
            amountValue: 800
            amountCurrency: EUR
          maximumQuarterlyTransactionLimit:
            amountValue: 800
            amountCurrency: GBP
          maximumYearlyTransactionLimit:
            amountValue: 800
            amountCurrency: GBP
      description: Model for transaction limits for a given user
      properties:
        maximumDailyTransactionLimit:
          $ref: '#/components/schemas/Amount'
        maximumWeeklyTransactionLimit:
          $ref: '#/components/schemas/Amount'
        maximumMonthlyTransactionLimit:
          $ref: '#/components/schemas/Amount'
        maximumQuarterlyTransactionLimit:
          $ref: '#/components/schemas/Amount'
        maximumTransactionLimit:
          $ref: '#/components/schemas/Amount'
        maximumYearlyTransactionLimit:
          $ref: '#/components/schemas/Amount'
    InternalUser:
      description: Internal user- employees
      type: object
      x-examples:
        example-1:
          employeeID: 8cdeb166147a406b957dd9e709907b89
          employeeLevel: L4
          employeeDesignation: Senior Analyst
          employeeName: Baran Ozkan
          employeeNationality: IN
      title: InternalUser
      properties:
        employeeID:
          type: string
          minLength: 1
          description: Employee ID number
        employeeLevel:
          type: string
          minLength: 1
          description: Employee seniority level
        employeeDesignation:
          type: string
          minLength: 1
          description: Employee designation or title
        employeeName:
          type: string
          minLength: 1
          description: Employee name
        employeeNationality:
          type: string
          minLength: 1
          description: Employee nationality
      required:
        - employeeID
    TransactionEvent:
      description: Model for transaction-related events
      type: object
      x-examples:
        example-1:
          transactionState: CREATED
          timestamp: 1262300441294
          transactionId: 443dea26147a406b957d9ee3a1247b11
          eventId: aaeeb166147a406b957dd9147a406b957
          eventDescription: Transaction created
          employeeId: 8cdeb166147a406b957dd9e709907b89
          metaData:
            batteryLevel: 76.3
            deviceLatitude: 13.009711
            deviceLongitude: 76.102898
            ipAddress: 79.144.2.20
            vpnUsed: true
      properties:
        transactionState:
          $ref: '#/components/schemas/TransactionState'
        timestamp:
          type: number
          minimum: 1262300400000
          description: Timestamp of the event
        transactionId:
          type: string
          minLength: 1
          description: Transaction ID the event pertains to
        eventId:
          type: string
          description: Unique event ID
        eventDescription:
          type: string
          description: Event description
        employeeId:
          type: string
          minLength: 1
          description: >-
            Employee ID the event pertains to. E.g. Employee login event on
            behalf of an end user
        metaData:
          $ref: '#/components/schemas/DeviceData'
        updatedTransactionAttributes:
          $ref: '#/components/schemas/Transaction'
      required:
        - transactionState
        - timestamp
        - transactionId
    CaseManagementEvent:
      type: object
      x-examples:
        example-1:
          caseStatus: Unsuspended
          timestamp: 1262300441294
          transactionId: 443dea26147a406b957d9ee3a1247b11
          eventId: aaeeb166147a406b957dd9147a406b957
          eventDescription: Case Unsuspended
          employeeId: 8cdeb166147a406b957dd9e709907b89
      title: CaseManagementEvent
      description: Model for case management events
      properties:
        caseStatus:
          type: string
          minLength: 1
          enum:
            - CLOSED
            - HIT
          description: Status of a case. E.g. Open, Closed etc.
        timestamp:
          type: number
          minimum: 1262300400000
          description: Timestamp of the event
        caseStatusReason:
          type: string
          enum:
            - FALSE_POSITIVE
            - INVESTIGATION_COMPLETED
            - DOCUMENTS_COLLECTED
            - OTHER
          description: >-
            Case status reason. E.g. Closed & False Positive, Closed &
            Investigation Completed etc.
        transactionId:
          type: string
          minLength: 1
          description: Transaction ID the case pertains to
        userId:
          type: string
          description: User ID the case pertains to
        eventId:
          type: string
          description: Event ID the case pertains to
        caseStatusReasonDescription:
          type: string
          description: Case status reason description
        employeeId:
          type: string
          minLength: 1
          description: Employee ID the case pertains to
      required:
        - caseStatus
        - timestamp
        - caseStatusReason
    UserEvent:
      description: Model for user-related events
      type: object
      x-examples: {}
      properties:
        type:
          type: string
          minLength: 1
          enum:
            - LOGGED_IN
          description: Type of events. E.g. Onboarding, Checkout etc.
        timestamp:
          type: number
          description: Timestamp of the event
        userId:
          type: string
          minLength: 1
          description: User ID the event pertains to
        eventId:
          type: string
          description: Unique event ID
        eventDescription:
          type: string
          description: Event description
        metaData:
          $ref: '#/components/schemas/DeviceData'
      required:
        - type
        - timestamp
        - userId
    Date:
      title: Date
      type: object
      description: Model for date
      properties:
        day:
          type: number
          description: Day of date
        month:
          type: number
          description: Month of date
        year:
          type: number
          description: Year of date
      required:
        - day
        - month
        - year
    TransactionState:
      type: string
      title: TransactionState
      enum:
        - CREATED
        - PROCESSING
        - SENT
        - EXPIRED
        - DECLINED
        - SUSPENDED
        - REFUNDED
        - SUCCESSFUL
      minLength: 1
      description: Model for transaction states. E.g. Processing, Refunded, Successful etc.
  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
    sigv4:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: awsSigv4
    lambda-authorizer:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authorizer:
        type: request
        identitySource: method.request.header.authorization
        authorizerUri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponJWTAuthorizerFunction.Arn}/invocations
        authorizerResultTtlInSeconds: 600
        enableSimpleResponses: false
      x-amazon-apigateway-authtype: Custom scheme with tenant claims
  responses: {}
x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
