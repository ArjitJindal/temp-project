openapi: 3.0.0
info:
  title: Tarpon Console API
  version: '1.0'
servers:
  - url: http://localhost:3000
paths:
  /apikey:
    parameters: []
    post:
      summary: Tarpon API Key - Create
      operationId: post-apikey
      responses:
        '200':
          description: New API Key
      parameters:
        - schema:
            type: string
          in: query
          name: tenantId
          description: Tenant ID
        - schema:
            type: string
          in: query
          name: usagePlanId
          description: AWS Gateway usage plan ID
      description: Generate a new Tarpon API key for a tenant
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponApiKeyGeneratorFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      x-amazon-apigateway-auth:
        type: AWS_IAM
      security:
        - sigv4: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /rule_instances:
    post:
      summary: Rule Instance - Create
      operationId: post-rule_instances
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleInstance'
              examples:
                example-1:
                  value:
                    id: string
                    ruleId: string
                    parameters: {}
                    status: ACTIVE
                    createdAt: 0
                    updatedAt: 0
                    runCount: 0
                    hitCount: 0
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleInstance'
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponRuleInstanceFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      x-amazon-apigateway-auth:
        type: AWS_IAM
      security:
        - sigv4: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /rule_instances/{ruleInstanceId}:
    parameters:
      - schema:
          type: string
        name: ruleInstanceId
        in: path
        required: true
    delete:
      summary: Rule Instance - Delete
      operationId: delete-rule_instances-ruleInstanceId
      responses:
        '200':
          description: OK
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponRuleInstanceFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    put:
      summary: Rule Instance - Update
      operationId: put-rule_instances-ruleInstanceId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleInstance'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleInstance'
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponRuleInstanceFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /import:
    parameters: []
    post:
      summary: Import - Start to Import
      operationId: post-import
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportResponse'
              examples:
                example-1:
                  value:
                    importedTransactions: 100
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportRequest'
            examples:
              example-1:
                value:
                  type: TRANSACTION
                  format: flagright
                  s3Key: s3-key-in-a-bucket
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponFileImportFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /import/getPresignedUrl:
    parameters: []
    post:
      summary: Import - Get Presigned URL
      operationId: post-getPresignedUrl
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresignedUrlResponse'
              examples: {}
      description: Get a presigned URL for uploading a file
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponGetPresignedUrlFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /lists:
    post:
      summary: List Import
      operationId: post-lists
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListImportRequest'
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponListImporterFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /transactions:
    get:
      summary: Transaction - List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsListResponse'
              examples: {}
      operationId: get-transactions-list
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          required: true
        - schema:
            type: number
          in: query
          name: skip
          required: true
        - schema:
            type: number
          in: query
          name: beforeTimestamp
          required: true
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponTransactionsViewFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /consumer/users:
    get:
      summary: Consumer Users - List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerUsersListResponse'
              examples: {}
      operationId: get-consumer-users-list
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          required: true
        - schema:
            type: number
          in: query
          name: skip
          required: true
        - schema:
            type: number
          in: query
          name: beforeTimestamp
          required: true
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponConsumersUsersViewFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    parameters: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /business/users:
    get:
      summary: Business Users - List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerUsersListResponse'
              examples: {}
      operationId: get-business-users-list
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          required: true
        - schema:
            type: number
          in: query
          name: skip
          required: true
        - schema:
            type: number
          in: query
          name: beforeTimestamp
          required: true
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponBusinessUsersViewFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    parameters: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /dashboard_stats/transactions:
    get:
      summary: DashboardStats - Transactions
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardStatsTransactionsCount'
              examples: {}
      operationId: get-dashboard-stats-transactions
      description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: category
          required: true
        - schema:
            type: number
          in: query
          name: timeframe
          required: true
        - schema:
            type: string
          in: query
          name: fromTimestamp
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponDashboardStatsTransactionsFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - lambda-authorizer: []
    parameters: []
    options:
      parameters: []
      responses:
        '200':
          description: Default response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode":200}'
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
components:
  schemas:
    RuleInstance:
      title: RuleInstance
      type: object
      properties:
        id:
          type: string
        ruleId:
          type: string
        parameters:
          type: object
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        createdAt:
          type: number
        updatedAt:
          type: number
        runCount:
          type: number
        hitCount:
          type: number
      required:
        - ruleId
        - parameters
    ImportRequest:
      title: ImportRequest
      type: object
      properties:
        type:
          type: string
          enum:
            - TRANSACTION
            - USER
            - BUSINESS
        format:
          type: string
          enum:
            - flagright
            - custom
        s3Key:
          type: string
      required:
        - type
        - format
        - s3Key
    PresignedUrlResponse:
      title: PresignedUrlResponse
      type: object
      properties:
        presignedUrl:
          type: string
        s3Key:
          type: string
      required:
        - presignedUrl
        - s3Key
    ListImportRequest:
      title: ListImportRequest
      type: object
      properties:
        listName:
          type: string
        indexName:
          type: string
        data:
          type: string
      required:
        - listName
        - indexName
        - data
    ImportResponse:
      title: ImportResponse
      type: object
      properties:
        importedCount:
          type: number
      required:
        - importedCount
    TransactionsListResponse:
      title: TransactionsListResponse
      type: object
      description: ''
      x-examples: {}
      properties:
        total:
          type: number
        data:
          type: array
          items:
            $ref: >-
              https://stoplight.io/api/v1/projects/flagright/flagright-api/nodes/reference/Flagright-API.yaml/components/schemas/TransactionWithRulesResult?deref=optimizedBundle
      required:
        - total
        - data
    ConsumerUsersListResponse:
      title: ConsumerUsersListResponse
      type: object
      properties:
        total:
          type: number
        data:
          type: array
          items:
            $ref: >-
              https://stoplight.io/api/v1/projects/flagright/flagright-api/nodes/reference/Flagright-API.yaml/components/schemas/User
      required:
        - total
        - data
    BusinessUsersListResponse:
      title: BusinessUsersListResponse
      type: object
      properties:
        total:
          type: number
        data:
          type: array
          items:
            $ref: >-
              https://stoplight.io/api/v1/projects/flagright/flagright-api/nodes/reference/Flagright-API.yaml/components/schemas/Business
      required:
        - total
        - data
    DashboardStatsTransactionsCount:
      type: array
      description: ''
      minItems: 1
      uniqueItems: true
      x-examples:
        example-1:
          - date: '2020-01-04'
            totalTransactions: 2344
            flaggedTransactions: 121
            stoppedTransactions: 33
      items:
        type: object
        properties:
          date:
            type: string
            minLength: 1
          totalTransactions:
            type: number
          flaggedTransactions:
            type: number
          stoppedTransactions:
            type: number
        required:
          - date
          - totalTransactions
      title: DashboardStatsTransactionsCount
  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
    sigv4:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: awsSigv4
    lambda-authorizer:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authorizer:
        type: request
        identitySource: method.request.header.authorization
        authorizerUri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tarponJWTAuthorizerFunction.Arn}/invocations
        authorizerResultTtlInSeconds: 600
        enableSimpleResponses: false
      x-amazon-apigateway-authtype: Custom scheme with tenant claims
x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
